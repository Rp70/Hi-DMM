// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="HLS_SPFA_KWTA,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=0.000000,HLS_SYN_LAT=3,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=9,HLS_SYN_LUT=110,HLS_VERSION=2018_2}" *)

module HLS_SPFA_KWTA (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        n,
        map_r_address0,
        map_r_ce0,
        map_r_q0,
        map_r_address1,
        map_r_ce1,
        map_r_q1,
        dis_output_address0,
        dis_output_ce0,
        dis_output_we0,
        dis_output_d0,
        dis_output_q0,
        dis_output_address1,
        dis_output_ce1,
        dis_output_we1,
        dis_output_d1,
        dis_output_q1,
        alloc_HTA_size,
        alloc_HTA_size_ap_vld,
        alloc_HTA_size_ap_ack,
        alloc_HTA_free_target,
        alloc_HTA_free_target_ap_vld,
        alloc_HTA_free_target_ap_ack,
        alloc_HTA_addr,
        alloc_HTA_addr_ap_vld,
        alloc_HTA_addr_ap_ack,
        alloc_HTA_cmd,
        alloc_HTA_cmd_ap_vld,
        alloc_HTA_cmd_ap_ack,
        alloc_KWTA_size,
        alloc_KWTA_size_ap_vld,
        alloc_KWTA_size_ap_ack,
        alloc_KWTA_free_target,
        alloc_KWTA_free_target_ap_vld,
        alloc_KWTA_free_target_ap_ack,
        alloc_KWTA_addr,
        alloc_KWTA_addr_ap_vld,
        alloc_KWTA_addr_ap_ack,
        alloc_KWTA_cmd,
        alloc_KWTA_cmd_ap_vld,
        alloc_KWTA_cmd_ap_ack
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] n;
output  [14:0] map_r_address0;
output   map_r_ce0;
input  [31:0] map_r_q0;
output  [14:0] map_r_address1;
output   map_r_ce1;
input  [31:0] map_r_q1;
output  [7:0] dis_output_address0;
output   dis_output_ce0;
output   dis_output_we0;
output  [31:0] dis_output_d0;
input  [31:0] dis_output_q0;
output  [7:0] dis_output_address1;
output   dis_output_ce1;
output   dis_output_we1;
output  [31:0] dis_output_d1;
input  [31:0] dis_output_q1;
output  [31:0] alloc_HTA_size;
output   alloc_HTA_size_ap_vld;
input   alloc_HTA_size_ap_ack;
output  [31:0] alloc_HTA_free_target;
output   alloc_HTA_free_target_ap_vld;
input   alloc_HTA_free_target_ap_ack;
input  [31:0] alloc_HTA_addr;
input   alloc_HTA_addr_ap_vld;
output   alloc_HTA_addr_ap_ack;
output  [7:0] alloc_HTA_cmd;
output   alloc_HTA_cmd_ap_vld;
input   alloc_HTA_cmd_ap_ack;
input  [31:0] alloc_KWTA_size;
input   alloc_KWTA_size_ap_vld;
output   alloc_KWTA_size_ap_ack;
input  [31:0] alloc_KWTA_free_target;
input   alloc_KWTA_free_target_ap_vld;
output   alloc_KWTA_free_target_ap_ack;
input  [31:0] alloc_KWTA_addr;
input   alloc_KWTA_addr_ap_vld;
output   alloc_KWTA_addr_ap_ack;
input  [7:0] alloc_KWTA_cmd;
input   alloc_KWTA_cmd_ap_vld;
output   alloc_KWTA_cmd_ap_ack;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg alloc_HTA_addr_ap_ack;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    grp_HLS_malloc_1_s_fu_52_ap_start;
wire    grp_HLS_malloc_1_s_fu_52_ap_done;
wire    grp_HLS_malloc_1_s_fu_52_ap_idle;
wire    grp_HLS_malloc_1_s_fu_52_ap_ready;
wire   [31:0] grp_HLS_malloc_1_s_fu_52_allocator_size;
wire    grp_HLS_malloc_1_s_fu_52_allocator_size_ap_vld;
wire   [31:0] grp_HLS_malloc_1_s_fu_52_allocator_free_targe;
wire    grp_HLS_malloc_1_s_fu_52_allocator_free_targe_ap_vld;
wire    grp_HLS_malloc_1_s_fu_52_allocator_addr_ap_ack;
wire   [7:0] grp_HLS_malloc_1_s_fu_52_allocator_cmd;
wire    grp_HLS_malloc_1_s_fu_52_allocator_cmd_ap_vld;
reg    grp_HLS_malloc_1_s_fu_52_ap_start_reg;
wire    ap_CS_fsm_state2;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 grp_HLS_malloc_1_s_fu_52_ap_start_reg = 1'b0;
end

HLS_malloc_1_s grp_HLS_malloc_1_s_fu_52(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_HLS_malloc_1_s_fu_52_ap_start),
    .ap_done(grp_HLS_malloc_1_s_fu_52_ap_done),
    .ap_idle(grp_HLS_malloc_1_s_fu_52_ap_idle),
    .ap_ready(grp_HLS_malloc_1_s_fu_52_ap_ready),
    .size(n),
    .allocator_size(grp_HLS_malloc_1_s_fu_52_allocator_size),
    .allocator_size_ap_vld(grp_HLS_malloc_1_s_fu_52_allocator_size_ap_vld),
    .allocator_size_ap_ack(alloc_HTA_size_ap_ack),
    .allocator_free_targe(grp_HLS_malloc_1_s_fu_52_allocator_free_targe),
    .allocator_free_targe_ap_vld(grp_HLS_malloc_1_s_fu_52_allocator_free_targe_ap_vld),
    .allocator_free_targe_ap_ack(alloc_HTA_free_target_ap_ack),
    .allocator_addr(alloc_HTA_addr),
    .allocator_addr_ap_vld(alloc_HTA_addr_ap_vld),
    .allocator_addr_ap_ack(grp_HLS_malloc_1_s_fu_52_allocator_addr_ap_ack),
    .allocator_cmd(grp_HLS_malloc_1_s_fu_52_allocator_cmd),
    .allocator_cmd_ap_vld(grp_HLS_malloc_1_s_fu_52_allocator_cmd_ap_vld),
    .allocator_cmd_ap_ack(alloc_HTA_cmd_ap_ack)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_HLS_malloc_1_s_fu_52_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_HLS_malloc_1_s_fu_52_ap_start_reg <= 1'b1;
        end else if ((grp_HLS_malloc_1_s_fu_52_ap_ready == 1'b1)) begin
            grp_HLS_malloc_1_s_fu_52_ap_start_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        alloc_HTA_addr_ap_ack = grp_HLS_malloc_1_s_fu_52_allocator_addr_ap_ack;
    end else begin
        alloc_HTA_addr_ap_ack = 1'b0;
    end
end

always @ (*) begin
    if (((grp_HLS_malloc_1_s_fu_52_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_HLS_malloc_1_s_fu_52_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_HLS_malloc_1_s_fu_52_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign alloc_HTA_cmd = grp_HLS_malloc_1_s_fu_52_allocator_cmd;

assign alloc_HTA_cmd_ap_vld = grp_HLS_malloc_1_s_fu_52_allocator_cmd_ap_vld;

assign alloc_HTA_free_target = grp_HLS_malloc_1_s_fu_52_allocator_free_targe;

assign alloc_HTA_free_target_ap_vld = grp_HLS_malloc_1_s_fu_52_allocator_free_targe_ap_vld;

assign alloc_HTA_size = grp_HLS_malloc_1_s_fu_52_allocator_size;

assign alloc_HTA_size_ap_vld = grp_HLS_malloc_1_s_fu_52_allocator_size_ap_vld;

assign alloc_KWTA_addr_ap_ack = 1'b0;

assign alloc_KWTA_cmd_ap_ack = 1'b0;

assign alloc_KWTA_free_target_ap_ack = 1'b0;

assign alloc_KWTA_size_ap_ack = 1'b0;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign dis_output_address0 = 8'd0;

assign dis_output_address1 = 8'd0;

assign dis_output_ce0 = 1'b0;

assign dis_output_ce1 = 1'b0;

assign dis_output_d0 = 32'd0;

assign dis_output_d1 = 32'd0;

assign dis_output_we0 = 1'b0;

assign dis_output_we1 = 1'b0;

assign grp_HLS_malloc_1_s_fu_52_ap_start = grp_HLS_malloc_1_s_fu_52_ap_start_reg;

assign map_r_address0 = 15'd0;

assign map_r_address1 = 15'd0;

assign map_r_ce0 = 1'b0;

assign map_r_ce1 = 1'b0;

endmodule //HLS_SPFA_KWTA
