// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="HLS_SPFA_KWTA,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=9,HLS_SYN_DSP=3,HLS_SYN_FF=1038,HLS_SYN_LUT=2039,HLS_VERSION=2018_2}" *)

module HLS_SPFA_KWTA (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        n,
        map_r_address0,
        map_r_ce0,
        map_r_q0,
        map_r_address1,
        map_r_ce1,
        map_r_q1,
        dis_output_address0,
        dis_output_ce0,
        dis_output_we0,
        dis_output_d0,
        alloc_HTA_size,
        alloc_HTA_size_ap_vld,
        alloc_HTA_size_ap_ack,
        alloc_HTA_free_target,
        alloc_HTA_free_target_ap_vld,
        alloc_HTA_free_target_ap_ack,
        alloc_HTA_addr,
        alloc_HTA_addr_ap_vld,
        alloc_HTA_addr_ap_ack,
        alloc_HTA_cmd,
        alloc_HTA_cmd_ap_vld,
        alloc_HTA_cmd_ap_ack,
        alloc_KWTA_size,
        alloc_KWTA_size_ap_vld,
        alloc_KWTA_size_ap_ack,
        alloc_KWTA_free_target,
        alloc_KWTA_free_target_ap_vld,
        alloc_KWTA_free_target_ap_ack,
        alloc_KWTA_addr,
        alloc_KWTA_addr_ap_vld,
        alloc_KWTA_addr_ap_ack,
        alloc_KWTA_cmd,
        alloc_KWTA_cmd_ap_vld,
        alloc_KWTA_cmd_ap_ack
);

parameter    ap_ST_fsm_state1 = 40'd1;
parameter    ap_ST_fsm_state2 = 40'd2;
parameter    ap_ST_fsm_state3 = 40'd4;
parameter    ap_ST_fsm_state4 = 40'd8;
parameter    ap_ST_fsm_state5 = 40'd16;
parameter    ap_ST_fsm_state6 = 40'd32;
parameter    ap_ST_fsm_state7 = 40'd64;
parameter    ap_ST_fsm_state8 = 40'd128;
parameter    ap_ST_fsm_state9 = 40'd256;
parameter    ap_ST_fsm_state10 = 40'd512;
parameter    ap_ST_fsm_state11 = 40'd1024;
parameter    ap_ST_fsm_state12 = 40'd2048;
parameter    ap_ST_fsm_state13 = 40'd4096;
parameter    ap_ST_fsm_state14 = 40'd8192;
parameter    ap_ST_fsm_state15 = 40'd16384;
parameter    ap_ST_fsm_state16 = 40'd32768;
parameter    ap_ST_fsm_state17 = 40'd65536;
parameter    ap_ST_fsm_state18 = 40'd131072;
parameter    ap_ST_fsm_state19 = 40'd262144;
parameter    ap_ST_fsm_state20 = 40'd524288;
parameter    ap_ST_fsm_state21 = 40'd1048576;
parameter    ap_ST_fsm_state22 = 40'd2097152;
parameter    ap_ST_fsm_state23 = 40'd4194304;
parameter    ap_ST_fsm_state24 = 40'd8388608;
parameter    ap_ST_fsm_state25 = 40'd16777216;
parameter    ap_ST_fsm_state26 = 40'd33554432;
parameter    ap_ST_fsm_state27 = 40'd67108864;
parameter    ap_ST_fsm_state28 = 40'd134217728;
parameter    ap_ST_fsm_state29 = 40'd268435456;
parameter    ap_ST_fsm_state30 = 40'd536870912;
parameter    ap_ST_fsm_state31 = 40'd1073741824;
parameter    ap_ST_fsm_state32 = 40'd2147483648;
parameter    ap_ST_fsm_state33 = 40'd4294967296;
parameter    ap_ST_fsm_state34 = 40'd8589934592;
parameter    ap_ST_fsm_state35 = 40'd17179869184;
parameter    ap_ST_fsm_state36 = 40'd34359738368;
parameter    ap_ST_fsm_state37 = 40'd68719476736;
parameter    ap_ST_fsm_state38 = 40'd137438953472;
parameter    ap_ST_fsm_state39 = 40'd274877906944;
parameter    ap_ST_fsm_state40 = 40'd549755813888;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] n;
output  [14:0] map_r_address0;
output   map_r_ce0;
input  [31:0] map_r_q0;
output  [14:0] map_r_address1;
output   map_r_ce1;
input  [31:0] map_r_q1;
output  [7:0] dis_output_address0;
output   dis_output_ce0;
output   dis_output_we0;
output  [31:0] dis_output_d0;
output  [31:0] alloc_HTA_size;
output   alloc_HTA_size_ap_vld;
input   alloc_HTA_size_ap_ack;
output  [31:0] alloc_HTA_free_target;
output   alloc_HTA_free_target_ap_vld;
input   alloc_HTA_free_target_ap_ack;
input  [31:0] alloc_HTA_addr;
input   alloc_HTA_addr_ap_vld;
output   alloc_HTA_addr_ap_ack;
output  [7:0] alloc_HTA_cmd;
output   alloc_HTA_cmd_ap_vld;
input   alloc_HTA_cmd_ap_ack;
output  [31:0] alloc_KWTA_size;
output   alloc_KWTA_size_ap_vld;
input   alloc_KWTA_size_ap_ack;
output  [31:0] alloc_KWTA_free_target;
output   alloc_KWTA_free_target_ap_vld;
input   alloc_KWTA_free_target_ap_ack;
input  [31:0] alloc_KWTA_addr;
input   alloc_KWTA_addr_ap_vld;
output   alloc_KWTA_addr_ap_ack;
output  [7:0] alloc_KWTA_cmd;
output   alloc_KWTA_cmd_ap_vld;
input   alloc_KWTA_cmd_ap_ack;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg map_r_ce0;
reg map_r_ce1;
reg dis_output_ce0;
reg dis_output_we0;
reg alloc_HTA_size_ap_vld;
reg alloc_HTA_free_target_ap_vld;
reg alloc_HTA_addr_ap_ack;
reg alloc_HTA_cmd_ap_vld;
reg[31:0] alloc_KWTA_size;
reg alloc_KWTA_size_ap_vld;
reg[31:0] alloc_KWTA_free_target;
reg alloc_KWTA_free_target_ap_vld;
reg alloc_KWTA_addr_ap_ack;
reg[7:0] alloc_KWTA_cmd;
reg alloc_KWTA_cmd_ap_vld;

(* fsm_encoding = "none" *) reg   [39:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [0:0] guard_variable_for_H;
reg   [30:0] N_2;
reg    alloc_HTA_size_blk_n;
reg    alloc_HTA_free_target_blk_n;
reg    alloc_HTA_addr_blk_n;
wire    ap_CS_fsm_state2;
reg    alloc_HTA_cmd_blk_n;
reg    alloc_KWTA_size_blk_n;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state18;
wire   [0:0] brmerge_demorgan_fu_1137_p2;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state33;
reg    alloc_KWTA_free_target_blk_n;
reg    alloc_KWTA_addr_blk_n;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state34;
reg    alloc_KWTA_cmd_blk_n;
reg   [31:0] reg_575;
reg   [31:0] reg_579;
reg    ap_sig_ioackin_alloc_KWTA_cmd_ap_ack;
reg    ap_sig_ioackin_alloc_KWTA_size_ap_ack;
reg    ap_sig_ioackin_alloc_KWTA_free_target_ap_ack;
reg    ap_block_state18_io;
wire   [0:0] update0_fu_1121_p2;
wire   [0:0] update1_fu_1132_p2;
reg    ap_sig_ioackin_alloc_HTA_cmd_ap_ack;
reg    ap_sig_ioackin_alloc_HTA_size_ap_ack;
reg    ap_sig_ioackin_alloc_HTA_free_target_ap_ack;
reg    ap_block_state1_io;
reg   [31:0] status_6_reg_1506;
wire   [12:0] tmp_4_cast_fu_624_p3;
reg   [12:0] tmp_4_cast_reg_1512;
wire    ap_CS_fsm_state4;
reg   [10:0] HTA_heap_0_addr_reg_1521;
wire   [30:0] i_4_fu_655_p2;
wire    ap_CS_fsm_state5;
wire   [30:0] i_5_fu_699_p2;
wire    ap_CS_fsm_state6;
wire   [31:0] offset_head_3_fu_710_p2;
wire    ap_CS_fsm_state10;
wire   [12:0] tmp_28_fu_781_p1;
reg   [12:0] tmp_28_reg_1563;
wire    ap_CS_fsm_state11;
wire   [0:0] tmp_7_fu_775_p2;
wire   [0:0] tmp_29_fu_807_p1;
reg   [0:0] tmp_29_reg_1578;
wire    ap_CS_fsm_state12;
wire  signed [31:0] now_fu_811_p3;
reg  signed [31:0] now_reg_1583;
wire   [0:0] tmp_33_fu_823_p1;
reg   [0:0] tmp_33_reg_1589;
reg   [11:0] newIndex7_reg_1594;
wire    ap_CS_fsm_state13;
wire  signed [63:0] tmp_3_fu_847_p1;
reg  signed [63:0] tmp_3_reg_1609;
wire    ap_CS_fsm_state14;
wire   [31:0] now_dis_fu_850_p3;
reg   [31:0] now_dis_reg_1614;
wire   [31:0] tmp_6_fu_857_p2;
reg   [31:0] tmp_6_reg_1620;
wire   [31:0] i_7_fu_875_p2;
reg   [31:0] i_7_reg_1629;
wire    ap_CS_fsm_state15;
wire   [11:0] tmp_36_fu_881_p1;
reg   [11:0] tmp_36_reg_1634;
wire   [0:0] tmp_10_fu_869_p2;
wire  signed [31:0] i0_fu_885_p2;
reg  signed [31:0] i0_reg_1639;
wire  signed [31:0] i1_fu_891_p2;
reg  signed [31:0] i1_reg_1645;
wire   [31:0] tmp_20_fu_986_p3;
reg   [31:0] tmp_20_reg_1671;
wire   [0:0] or_cond_fu_1007_p2;
reg   [0:0] or_cond_reg_1676;
wire    ap_CS_fsm_state16;
wire   [31:0] weight0_fu_1013_p2;
reg   [31:0] weight0_reg_1680;
wire   [31:0] weight1_fu_1018_p2;
reg   [31:0] weight1_reg_1686;
reg   [10:0] HTA_heap_0_addr_7_reg_1692;
reg   [10:0] HTA_heap_1_addr_6_reg_1697;
wire   [0:0] tmp_22_fu_1080_p2;
reg   [0:0] tmp_22_reg_1702;
wire    ap_CS_fsm_state17;
reg   [7:0] in_list_addr_3_reg_1707;
wire   [0:0] tmp_25_fu_1089_p2;
reg   [0:0] tmp_25_reg_1713;
reg   [7:0] in_list_addr_4_reg_1718;
wire   [31:0] weight0_HTA_heap_loa_fu_1094_p3;
reg   [31:0] weight0_HTA_heap_loa_reg_1724;
wire   [31:0] weight1_1_fu_1101_p3;
reg   [31:0] weight1_1_reg_1729;
reg   [31:0] offset_tail_load_reg_1734;
wire   [12:0] tmp_39_fu_1111_p1;
reg   [12:0] tmp_39_reg_1739;
reg   [0:0] brmerge_demorgan_reg_1750;
reg   [10:0] HTA_heap_0_addr_13_reg_1754;
wire    ap_CS_fsm_state22;
reg   [11:0] newIndex19_reg_1762;
reg   [10:0] HTA_heap_0_addr_10_reg_1767;
wire    ap_CS_fsm_state27;
reg   [11:0] newIndex21_reg_1775;
wire   [12:0] tmp_33_cast_fu_1307_p3;
reg   [12:0] tmp_33_cast_reg_1780;
wire    ap_CS_fsm_state31;
reg   [10:0] HTA_heap_0_addr_8_reg_1785;
reg   [11:0] newIndex17_reg_1793;
wire    ap_CS_fsm_state36;
wire   [31:0] offset_next_fu_1430_p3;
wire    ap_CS_fsm_state38;
wire    grp_HLS_free_1_s_fu_546_ap_idle;
wire    grp_HLS_free_1_s_fu_546_ap_ready;
wire    grp_HLS_free_1_s_fu_546_ap_done;
wire   [30:0] i_6_fu_1446_p2;
reg   [30:0] i_6_reg_1806;
wire    ap_CS_fsm_state39;
wire   [0:0] tmp_s_fu_1441_p2;
reg   [10:0] HTA_heap_0_address0;
reg    HTA_heap_0_ce0;
reg    HTA_heap_0_we0;
reg   [31:0] HTA_heap_0_d0;
wire   [31:0] HTA_heap_0_q0;
reg   [10:0] HTA_heap_1_address0;
reg    HTA_heap_1_ce0;
reg    HTA_heap_1_we0;
reg   [31:0] HTA_heap_1_d0;
wire   [31:0] HTA_heap_1_q0;
reg   [7:0] in_list_address0;
reg    in_list_ce0;
reg    in_list_we0;
reg   [0:0] in_list_d0;
wire   [0:0] in_list_q0;
reg   [7:0] in_list_address1;
reg    in_list_ce1;
reg    in_list_we1;
wire   [0:0] in_list_q1;
wire    grp_HLS_free_1_s_fu_546_ap_start;
wire   [31:0] grp_HLS_free_1_s_fu_546_allocator_size;
wire    grp_HLS_free_1_s_fu_546_allocator_size_ap_vld;
wire   [31:0] grp_HLS_free_1_s_fu_546_allocator_free_targe;
wire    grp_HLS_free_1_s_fu_546_allocator_free_targe_ap_vld;
wire   [7:0] grp_HLS_free_1_s_fu_546_allocator_cmd;
wire    grp_HLS_free_1_s_fu_546_allocator_cmd_ap_vld;
reg   [30:0] i_reg_491;
wire   [0:0] tmp_5_fu_650_p2;
reg   [30:0] i_1_reg_502;
wire   [0:0] tmp_8_fu_694_p2;
reg   [31:0] offset_head_reg_513;
reg   [31:0] i_2_reg_523;
wire    ap_CS_fsm_state37;
reg   [30:0] i_3_reg_534;
wire    ap_CS_fsm_state40;
reg    grp_HLS_free_1_s_fu_546_ap_start_reg;
wire   [63:0] newIndex2_fu_641_p1;
wire   [63:0] newIndex3_cast_fu_684_p1;
wire   [63:0] tmp_9_fu_705_p1;
wire   [63:0] newIndex4_cast_fu_744_p1;
wire   [63:0] newIndex5_cast_fu_765_p1;
wire   [63:0] newIndex6_cast_fu_801_p1;
wire   [63:0] newIndex7_cast_fu_842_p1;
wire  signed [63:0] tmp_13_fu_902_p1;
wire  signed [63:0] tmp_15_fu_912_p1;
wire   [63:0] newIndex8_cast_fu_932_p1;
wire   [63:0] newIndex9_cast_fu_1045_p1;
wire   [63:0] newIndex10_cast_fu_1071_p1;
wire  signed [63:0] tmp_21_fu_1076_p1;
wire  signed [63:0] tmp_24_fu_1085_p1;
wire   [63:0] newIndex18_cast_fu_1179_p1;
wire   [63:0] newIndex20_cast_fu_1188_p1;
wire   [63:0] newIndex19_cast_fu_1215_p1;
wire    ap_CS_fsm_state23;
wire   [63:0] newIndex13_cast_fu_1255_p1;
wire   [63:0] newIndex14_cast_fu_1264_p1;
wire   [63:0] newIndex21_cast_fu_1291_p1;
wire    ap_CS_fsm_state28;
wire   [63:0] newIndex11_cast_fu_1331_p1;
wire   [63:0] newIndex12_cast_fu_1339_p1;
wire   [63:0] newIndex15_cast_fu_1380_p1;
wire   [63:0] newIndex16_cast_fu_1400_p1;
wire   [63:0] newIndex17_cast_fu_1426_p1;
wire   [63:0] newIndex_cast_fu_1471_p1;
wire   [63:0] tmp_11_fu_1477_p1;
wire   [0:0] guard_variable_for_H_1_load_fu_583_p1;
reg   [31:0] offset_tail_fu_122;
wire   [31:0] offset_new_node1_fu_1143_p2;
wire   [31:0] offset_new_node0_2_fu_1219_p2;
wire   [31:0] offset_new_node1_1_fu_1345_p2;
reg    ap_reg_ioackin_alloc_HTA_cmd_ap_ack;
reg    ap_reg_ioackin_alloc_HTA_size_ap_ack;
reg    ap_reg_ioackin_alloc_HTA_free_target_ap_ack;
reg    ap_reg_ioackin_alloc_KWTA_cmd_ap_ack;
reg    ap_block_state7_io;
reg    ap_block_state19_io;
reg    ap_block_state24_io;
reg    ap_block_state33_io;
reg    ap_reg_ioackin_alloc_KWTA_size_ap_ack;
reg    ap_reg_ioackin_alloc_KWTA_free_target_ap_ack;
wire   [0:0] tmp_4_fu_665_p1;
wire   [0:0] tmp_50_fu_1184_p1;
wire   [0:0] tmp_45_fu_1260_p1;
wire   [0:0] tmp_42_fu_1336_p1;
wire   [31:0] offset_new_node0_fu_1295_p2;
wire    ap_CS_fsm_state32;
wire   [12:0] grp_fu_560_p2;
wire  signed [31:0] tmp_1_i_fu_587_p0;
wire   [31:0] tmp_1_i_fu_587_p2;
wire   [11:0] tmp_fu_615_p4;
wire   [18:0] newIndex1_fu_632_p4;
wire   [31:0] i_cast_fu_646_p1;
wire  signed [31:0] tmp_5_fu_650_p1;
wire   [12:0] tmp_1_fu_661_p1;
wire   [12:0] local_dis_0_sum1_fu_669_p2;
wire   [11:0] newIndex3_fu_674_p4;
wire   [31:0] i_1_cast_fu_690_p1;
wire  signed [31:0] tmp_8_fu_694_p1;
wire   [11:0] tmp_27_fu_716_p1;
wire   [12:0] tmp_cast_fu_720_p3;
wire   [12:0] KWTA_heap_0_sum_fu_728_p2;
wire   [11:0] newIndex4_fu_734_p4;
wire   [12:0] p_sum_fu_749_p2;
wire   [11:0] newIndex5_fu_755_p4;
wire   [12:0] KWTA_heap_0_sum1_fu_785_p2;
wire   [11:0] newIndex6_fu_791_p4;
wire   [12:0] tmp_32_fu_819_p1;
wire   [12:0] local_dis_0_sum2_fu_827_p2;
wire  signed [31:0] tmp_6_fu_857_p0;
wire  signed [31:0] extLd_fu_865_p1;
wire   [31:0] tmp_12_fu_897_p2;
wire   [31:0] tmp_14_fu_907_p2;
wire   [12:0] p_sum3_fu_917_p2;
wire   [11:0] newIndex8_fu_922_p4;
wire   [31:0] p_neg_fu_946_p2;
wire   [30:0] p_lshr_fu_952_p4;
wire   [31:0] tmp_18_fu_962_p1;
wire   [30:0] p_lshr_f_fu_972_p4;
wire   [0:0] tmp_38_fu_938_p3;
wire   [31:0] p_neg_t_fu_966_p2;
wire   [31:0] tmp_19_fu_982_p1;
wire   [0:0] tmp_16_fu_995_p2;
wire   [0:0] tmp_17_fu_1001_p2;
wire   [12:0] tmp_24_cast_fu_1023_p3;
wire   [12:0] local_dis_0_sum6_fu_1030_p2;
wire   [11:0] newIndex9_fu_1035_p4;
wire   [12:0] tmp_27_cast_fu_1050_p2;
wire   [12:0] local_dis_0_sum7_fu_1056_p2;
wire   [11:0] newIndex10_fu_1061_p4;
wire   [0:0] tmp_23_fu_1115_p2;
wire   [0:0] tmp_26_fu_1126_p2;
wire   [11:0] tmp_49_fu_1151_p1;
wire   [12:0] tmp_36_cast_fu_1155_p3;
wire   [12:0] KWTA_heap_0_sum5_fu_1163_p2;
wire   [11:0] newIndex18_fu_1169_p4;
wire   [11:0] grp_fu_565_p4;
wire   [12:0] p_sum8_fu_1194_p2;
wire   [11:0] tmp_44_fu_1227_p1;
wire   [12:0] tmp_35_cast_fu_1231_p3;
wire   [12:0] KWTA_heap_0_sum4_fu_1239_p2;
wire   [11:0] newIndex13_fu_1245_p4;
wire   [12:0] p_sum6_fu_1270_p2;
wire   [11:0] tmp_41_fu_1303_p1;
wire   [12:0] KWTA_heap_0_sum2_fu_1315_p2;
wire   [11:0] newIndex11_fu_1321_p4;
wire   [11:0] tmp_47_fu_1352_p1;
wire   [12:0] tmp_34_cast_fu_1356_p3;
wire   [12:0] KWTA_heap_0_sum3_fu_1364_p2;
wire   [11:0] newIndex15_fu_1370_p4;
wire   [12:0] p_sum2_fu_1385_p2;
wire   [11:0] newIndex16_fu_1390_p4;
wire   [12:0] p_sum4_fu_1405_p2;
wire   [31:0] i_3_cast_fu_1437_p1;
wire  signed [31:0] tmp_s_fu_1441_p1;
wire   [12:0] tmp_34_fu_1452_p1;
wire   [12:0] local_dis_0_sum_fu_1456_p2;
wire   [11:0] newIndex_fu_1461_p4;
wire   [0:0] tmp_35_fu_1482_p1;
reg   [39:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 40'd1;
#0 guard_variable_for_H = 1'd0;
#0 N_2 = 31'd0;
#0 grp_HLS_free_1_s_fu_546_ap_start_reg = 1'b0;
#0 ap_reg_ioackin_alloc_HTA_cmd_ap_ack = 1'b0;
#0 ap_reg_ioackin_alloc_HTA_size_ap_ack = 1'b0;
#0 ap_reg_ioackin_alloc_HTA_free_target_ap_ack = 1'b0;
#0 ap_reg_ioackin_alloc_KWTA_cmd_ap_ack = 1'b0;
#0 ap_reg_ioackin_alloc_KWTA_size_ap_ack = 1'b0;
#0 ap_reg_ioackin_alloc_KWTA_free_target_ap_ack = 1'b0;
end

HLS_SPFA_KWTA_HTAbkb #(
    .DataWidth( 32 ),
    .AddressRange( 2000 ),
    .AddressWidth( 11 ))
HTA_heap_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(HTA_heap_0_address0),
    .ce0(HTA_heap_0_ce0),
    .we0(HTA_heap_0_we0),
    .d0(HTA_heap_0_d0),
    .q0(HTA_heap_0_q0)
);

HLS_SPFA_KWTA_HTAbkb #(
    .DataWidth( 32 ),
    .AddressRange( 2000 ),
    .AddressWidth( 11 ))
HTA_heap_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(HTA_heap_1_address0),
    .ce0(HTA_heap_1_ce0),
    .we0(HTA_heap_1_we0),
    .d0(HTA_heap_1_d0),
    .q0(HTA_heap_1_q0)
);

HLS_SPFA_KWTA_in_dEe #(
    .DataWidth( 1 ),
    .AddressRange( 200 ),
    .AddressWidth( 8 ))
in_list_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(in_list_address0),
    .ce0(in_list_ce0),
    .we0(in_list_we0),
    .d0(in_list_d0),
    .q0(in_list_q0),
    .address1(in_list_address1),
    .ce1(in_list_ce1),
    .we1(in_list_we1),
    .d1(1'd1),
    .q1(in_list_q1)
);

HLS_free_1_s grp_HLS_free_1_s_fu_546(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_HLS_free_1_s_fu_546_ap_start),
    .ap_done(grp_HLS_free_1_s_fu_546_ap_done),
    .ap_idle(grp_HLS_free_1_s_fu_546_ap_idle),
    .ap_ready(grp_HLS_free_1_s_fu_546_ap_ready),
    .free_target(tmp_20_reg_1671),
    .allocator_size(grp_HLS_free_1_s_fu_546_allocator_size),
    .allocator_size_ap_vld(grp_HLS_free_1_s_fu_546_allocator_size_ap_vld),
    .allocator_size_ap_ack(alloc_KWTA_size_ap_ack),
    .allocator_free_targe(grp_HLS_free_1_s_fu_546_allocator_free_targe),
    .allocator_free_targe_ap_vld(grp_HLS_free_1_s_fu_546_allocator_free_targe_ap_vld),
    .allocator_free_targe_ap_ack(alloc_KWTA_free_target_ap_ack),
    .allocator_cmd(grp_HLS_free_1_s_fu_546_allocator_cmd),
    .allocator_cmd_ap_vld(grp_HLS_free_1_s_fu_546_allocator_cmd_ap_vld),
    .allocator_cmd_ap_ack(alloc_KWTA_cmd_ap_ack)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_alloc_HTA_cmd_ap_ack <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            if (~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0))) begin
                ap_reg_ioackin_alloc_HTA_cmd_ap_ack <= 1'b0;
            end else if (((ap_start == 1'b1) & (1'b1 == alloc_HTA_cmd_ap_ack))) begin
                ap_reg_ioackin_alloc_HTA_cmd_ap_ack <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_alloc_HTA_free_target_ap_ack <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            if (~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0))) begin
                ap_reg_ioackin_alloc_HTA_free_target_ap_ack <= 1'b0;
            end else if (((ap_start == 1'b1) & (1'b1 == alloc_HTA_free_target_ap_ack))) begin
                ap_reg_ioackin_alloc_HTA_free_target_ap_ack <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_alloc_HTA_size_ap_ack <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            if (~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0))) begin
                ap_reg_ioackin_alloc_HTA_size_ap_ack <= 1'b0;
            end else if (((ap_start == 1'b1) & (1'b1 == alloc_HTA_size_ap_ack))) begin
                ap_reg_ioackin_alloc_HTA_size_ap_ack <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_alloc_KWTA_cmd_ap_ack <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_state33_io) & (1'b1 == ap_CS_fsm_state33)) | ((1'b0 == ap_block_state19_io) & (1'b1 == ap_CS_fsm_state19)) | ((1'b0 == ap_block_state24_io) & (1'b1 == ap_CS_fsm_state24)) | ((1'b0 == ap_block_state18_io) & (1'b1 == ap_CS_fsm_state18) & (brmerge_demorgan_fu_1137_p2 == 1'd1)) | ((1'b0 == ap_block_state7_io) & (1'b1 == ap_CS_fsm_state7)))) begin
            ap_reg_ioackin_alloc_KWTA_cmd_ap_ack <= 1'b0;
        end else if ((((1'b1 == ap_CS_fsm_state33) & (1'b1 == alloc_KWTA_cmd_ap_ack)) | ((1'b1 == ap_CS_fsm_state19) & (1'b1 == alloc_KWTA_cmd_ap_ack)) | ((1'b1 == ap_CS_fsm_state24) & (1'b1 == alloc_KWTA_cmd_ap_ack)) | ((1'b1 == ap_CS_fsm_state18) & (1'b1 == alloc_KWTA_cmd_ap_ack) & (brmerge_demorgan_fu_1137_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state7) & (1'b1 == alloc_KWTA_cmd_ap_ack)))) begin
            ap_reg_ioackin_alloc_KWTA_cmd_ap_ack <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_alloc_KWTA_free_target_ap_ack <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_state33_io) & (1'b1 == ap_CS_fsm_state33)) | ((1'b0 == ap_block_state19_io) & (1'b1 == ap_CS_fsm_state19)) | ((1'b0 == ap_block_state24_io) & (1'b1 == ap_CS_fsm_state24)) | ((1'b0 == ap_block_state18_io) & (1'b1 == ap_CS_fsm_state18) & (brmerge_demorgan_fu_1137_p2 == 1'd1)) | ((1'b0 == ap_block_state7_io) & (1'b1 == ap_CS_fsm_state7)))) begin
            ap_reg_ioackin_alloc_KWTA_free_target_ap_ack <= 1'b0;
        end else if ((((1'b1 == alloc_KWTA_free_target_ap_ack) & (1'b1 == ap_CS_fsm_state33)) | ((1'b1 == alloc_KWTA_free_target_ap_ack) & (1'b1 == ap_CS_fsm_state19)) | ((1'b1 == alloc_KWTA_free_target_ap_ack) & (1'b1 == ap_CS_fsm_state24)) | ((1'b1 == alloc_KWTA_free_target_ap_ack) & (1'b1 == ap_CS_fsm_state18) & (brmerge_demorgan_fu_1137_p2 == 1'd1)) | ((1'b1 == alloc_KWTA_free_target_ap_ack) & (1'b1 == ap_CS_fsm_state7)))) begin
            ap_reg_ioackin_alloc_KWTA_free_target_ap_ack <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_alloc_KWTA_size_ap_ack <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_state33_io) & (1'b1 == ap_CS_fsm_state33)) | ((1'b0 == ap_block_state19_io) & (1'b1 == ap_CS_fsm_state19)) | ((1'b0 == ap_block_state24_io) & (1'b1 == ap_CS_fsm_state24)) | ((1'b0 == ap_block_state18_io) & (1'b1 == ap_CS_fsm_state18) & (brmerge_demorgan_fu_1137_p2 == 1'd1)) | ((1'b0 == ap_block_state7_io) & (1'b1 == ap_CS_fsm_state7)))) begin
            ap_reg_ioackin_alloc_KWTA_size_ap_ack <= 1'b0;
        end else if ((((1'b1 == alloc_KWTA_size_ap_ack) & (1'b1 == ap_CS_fsm_state33)) | ((1'b1 == alloc_KWTA_size_ap_ack) & (1'b1 == ap_CS_fsm_state19)) | ((1'b1 == alloc_KWTA_size_ap_ack) & (1'b1 == ap_CS_fsm_state24)) | ((1'b1 == alloc_KWTA_size_ap_ack) & (1'b1 == ap_CS_fsm_state18) & (brmerge_demorgan_fu_1137_p2 == 1'd1)) | ((1'b1 == alloc_KWTA_size_ap_ack) & (1'b1 == ap_CS_fsm_state7)))) begin
            ap_reg_ioackin_alloc_KWTA_size_ap_ack <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_HLS_free_1_s_fu_546_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state15) & (tmp_10_fu_869_p2 == 1'd0))) begin
            grp_HLS_free_1_s_fu_546_ap_start_reg <= 1'b1;
        end else if ((grp_HLS_free_1_s_fu_546_ap_ready == 1'b1)) begin
            grp_HLS_free_1_s_fu_546_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (tmp_8_fu_694_p2 == 1'd1))) begin
        i_1_reg_502 <= i_5_fu_699_p2;
    end else if (((1'b1 == ap_CS_fsm_state5) & (tmp_5_fu_650_p2 == 1'd0))) begin
        i_1_reg_502 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        i_2_reg_523 <= i_7_reg_1629;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        i_2_reg_523 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (tmp_7_fu_775_p2 == 1'd1))) begin
        i_3_reg_534 <= 31'd0;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        i_3_reg_534 <= i_6_reg_1806;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (tmp_5_fu_650_p2 == 1'd1))) begin
        i_reg_491 <= i_4_fu_655_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        i_reg_491 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_HLS_free_1_s_fu_546_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state38))) begin
        offset_head_reg_513 <= offset_next_fu_1430_p3;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        offset_head_reg_513 <= offset_head_3_fu_710_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
                offset_tail_fu_122[31 : 1] <= offset_new_node1_1_fu_1345_p2[31 : 1];
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
                offset_tail_fu_122[31 : 1] <= offset_new_node0_2_fu_1219_p2[31 : 1];
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
                offset_tail_fu_122[31 : 1] <= offset_new_node1_fu_1143_p2[31 : 1];
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
                offset_tail_fu_122[31 : 1] <= offset_head_3_fu_710_p2[31 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        HTA_heap_0_addr_10_reg_1767 <= newIndex13_cast_fu_1255_p1;
        newIndex21_reg_1775 <= {{p_sum6_fu_1270_p2[12:1]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        HTA_heap_0_addr_13_reg_1754 <= newIndex18_cast_fu_1179_p1;
        newIndex19_reg_1762 <= {{p_sum8_fu_1194_p2[12:1]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) & (or_cond_fu_1007_p2 == 1'd0))) begin
        HTA_heap_0_addr_7_reg_1692 <= newIndex9_cast_fu_1045_p1;
        HTA_heap_1_addr_6_reg_1697 <= newIndex10_cast_fu_1071_p1;
        weight0_reg_1680 <= weight0_fu_1013_p2;
        weight1_reg_1686 <= weight1_fu_1018_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        HTA_heap_0_addr_8_reg_1785 <= newIndex11_cast_fu_1331_p1;
        tmp_33_cast_reg_1780[12 : 1] <= tmp_33_cast_fu_1307_p3[12 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        HTA_heap_0_addr_reg_1521 <= newIndex2_fu_641_p1;
        tmp_4_cast_reg_1512[12 : 1] <= tmp_4_cast_fu_624_p3[12 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1) & (guard_variable_for_H_1_load_fu_583_p1 == 1'd0))) begin
        N_2 <= {{tmp_1_i_fu_587_p2[31:1]}};
        guard_variable_for_H <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state18_io) & (1'b1 == ap_CS_fsm_state18))) begin
        brmerge_demorgan_reg_1750 <= brmerge_demorgan_fu_1137_p2;
        offset_tail_load_reg_1734[31 : 1] <= offset_tail_fu_122[31 : 1];
        tmp_39_reg_1739[12 : 1] <= tmp_39_fu_1111_p1[12 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) & (tmp_10_fu_869_p2 == 1'd1))) begin
        i0_reg_1639[31 : 1] <= i0_fu_885_p2[31 : 1];
        i1_reg_1645[31 : 1] <= i1_fu_891_p2[31 : 1];
        tmp_36_reg_1634 <= tmp_36_fu_881_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        i_6_reg_1806 <= i_6_fu_1446_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        i_7_reg_1629 <= i_7_fu_875_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        in_list_addr_3_reg_1707[7 : 1] <= tmp_21_fu_1076_p1[7 : 1];
        in_list_addr_4_reg_1718[7 : 1] <= tmp_24_fu_1085_p1[7 : 1];
        tmp_22_reg_1702 <= tmp_22_fu_1080_p2;
        tmp_25_reg_1713 <= tmp_25_fu_1089_p2;
        weight0_HTA_heap_loa_reg_1724 <= weight0_HTA_heap_loa_fu_1094_p3;
        weight1_1_reg_1729 <= weight1_1_fu_1101_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        newIndex17_reg_1793 <= {{p_sum4_fu_1405_p2[12:1]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        newIndex7_reg_1594 <= {{local_dis_0_sum2_fu_827_p2[12:1]}};
        now_reg_1583 <= now_fu_811_p3;
        tmp_29_reg_1578 <= tmp_29_fu_807_p1;
        tmp_33_reg_1589 <= tmp_33_fu_823_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        now_dis_reg_1614 <= now_dis_fu_850_p3;
        tmp_3_reg_1609 <= tmp_3_fu_847_p1;
        tmp_6_reg_1620 <= tmp_6_fu_857_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        or_cond_reg_1676 <= or_cond_fu_1007_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == alloc_KWTA_addr_ap_vld) & (1'b1 == ap_CS_fsm_state34)) | ((1'b1 == alloc_KWTA_addr_ap_vld) & (1'b1 == ap_CS_fsm_state20)) | ((1'b1 == alloc_KWTA_addr_ap_vld) & (1'b1 == ap_CS_fsm_state25)) | ((1'b1 == alloc_KWTA_addr_ap_vld) & (1'b1 == ap_CS_fsm_state29)) | ((1'b1 == alloc_KWTA_addr_ap_vld) & (1'b1 == ap_CS_fsm_state8)))) begin
        reg_575 <= alloc_KWTA_addr;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_state18_io) & (1'b1 == ap_CS_fsm_state18) & (update0_fu_1121_p2 == 1'd1) & (brmerge_demorgan_fu_1137_p2 == 1'd0)) | ((1'b0 == ap_block_state18_io) & (1'b1 == ap_CS_fsm_state18) & (update1_fu_1132_p2 == 1'd1) & (update0_fu_1121_p2 == 1'd0) & (brmerge_demorgan_fu_1137_p2 == 1'd0)))) begin
        reg_579[31 : 1] <= offset_tail_fu_122[31 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == alloc_HTA_addr_ap_vld) & (1'b1 == ap_CS_fsm_state2))) begin
        status_6_reg_1506 <= alloc_HTA_addr;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) & (tmp_10_fu_869_p2 == 1'd0))) begin
        tmp_20_reg_1671 <= tmp_20_fu_986_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (tmp_7_fu_775_p2 == 1'd0))) begin
        tmp_28_reg_1563 <= tmp_28_fu_781_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        HTA_heap_0_address0 = newIndex_cast_fu_1471_p1;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        HTA_heap_0_address0 = newIndex15_cast_fu_1380_p1;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        HTA_heap_0_address0 = HTA_heap_0_addr_8_reg_1785;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        HTA_heap_0_address0 = newIndex12_cast_fu_1339_p1;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        HTA_heap_0_address0 = HTA_heap_0_addr_10_reg_1767;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        HTA_heap_0_address0 = newIndex14_cast_fu_1264_p1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        HTA_heap_0_address0 = HTA_heap_0_addr_13_reg_1754;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        HTA_heap_0_address0 = newIndex20_cast_fu_1188_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        HTA_heap_0_address0 = HTA_heap_0_addr_7_reg_1692;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        HTA_heap_0_address0 = newIndex9_cast_fu_1045_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        HTA_heap_0_address0 = newIndex8_cast_fu_932_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        HTA_heap_0_address0 = newIndex7_cast_fu_842_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        HTA_heap_0_address0 = newIndex6_cast_fu_801_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        HTA_heap_0_address0 = newIndex4_cast_fu_744_p1;
    end else if (((1'b1 == ap_CS_fsm_state5) & (tmp_5_fu_650_p2 == 1'd0))) begin
        HTA_heap_0_address0 = HTA_heap_0_addr_reg_1521;
    end else if (((1'b1 == ap_CS_fsm_state5) & (tmp_5_fu_650_p2 == 1'd1) & (tmp_4_fu_665_p1 == 1'd0))) begin
        HTA_heap_0_address0 = newIndex3_cast_fu_684_p1;
    end else begin
        HTA_heap_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | ((1'b1 == ap_CS_fsm_state5) & (tmp_5_fu_650_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state5) & (tmp_5_fu_650_p2 == 1'd1) & (tmp_4_fu_665_p1 == 1'd0)) | ((1'b0 == ap_block_state18_io) & (1'b1 == ap_CS_fsm_state18)))) begin
        HTA_heap_0_ce0 = 1'b1;
    end else begin
        HTA_heap_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        HTA_heap_0_d0 = offset_new_node0_fu_1295_p2;
    end else if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state28))) begin
        HTA_heap_0_d0 = i0_reg_1639;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        HTA_heap_0_d0 = offset_new_node0_2_fu_1219_p2;
    end else if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state36))) begin
        HTA_heap_0_d0 = i1_reg_1645;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        HTA_heap_0_d0 = offset_new_node1_fu_1143_p2;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        HTA_heap_0_d0 = weight0_HTA_heap_loa_reg_1724;
    end else if (((1'b1 == ap_CS_fsm_state10) | ((1'b1 == ap_CS_fsm_state5) & (tmp_5_fu_650_p2 == 1'd0)))) begin
        HTA_heap_0_d0 = 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (tmp_5_fu_650_p2 == 1'd1) & (tmp_4_fu_665_p1 == 1'd0))) begin
        HTA_heap_0_d0 = 32'd10000;
    end else begin
        HTA_heap_0_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state10) | ((1'b1 == ap_CS_fsm_state31) & (tmp_42_fu_1336_p1 == 1'd1)) | ((1'b1 == ap_CS_fsm_state27) & (tmp_45_fu_1260_p1 == 1'd1)) | ((1'b1 == ap_CS_fsm_state22) & (tmp_50_fu_1184_p1 == 1'd1)) | ((1'b1 == ap_CS_fsm_state5) & (tmp_5_fu_650_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state5) & (tmp_5_fu_650_p2 == 1'd1) & (tmp_4_fu_665_p1 == 1'd0)) | ((1'b0 == ap_block_state18_io) & (1'b1 == ap_CS_fsm_state18)))) begin
        HTA_heap_0_we0 = 1'b1;
    end else begin
        HTA_heap_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        HTA_heap_1_address0 = newIndex_cast_fu_1471_p1;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        HTA_heap_1_address0 = newIndex17_cast_fu_1426_p1;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        HTA_heap_1_address0 = newIndex16_cast_fu_1400_p1;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        HTA_heap_1_address0 = newIndex12_cast_fu_1339_p1;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        HTA_heap_1_address0 = newIndex21_cast_fu_1291_p1;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        HTA_heap_1_address0 = newIndex14_cast_fu_1264_p1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        HTA_heap_1_address0 = newIndex19_cast_fu_1215_p1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        HTA_heap_1_address0 = newIndex20_cast_fu_1188_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        HTA_heap_1_address0 = HTA_heap_1_addr_6_reg_1697;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        HTA_heap_1_address0 = newIndex10_cast_fu_1071_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        HTA_heap_1_address0 = newIndex8_cast_fu_932_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        HTA_heap_1_address0 = newIndex7_cast_fu_842_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        HTA_heap_1_address0 = newIndex6_cast_fu_801_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        HTA_heap_1_address0 = newIndex5_cast_fu_765_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        HTA_heap_1_address0 = newIndex3_cast_fu_684_p1;
    end else begin
        HTA_heap_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state5) | ((1'b0 == ap_block_state18_io) & (1'b1 == ap_CS_fsm_state18)))) begin
        HTA_heap_1_ce0 = 1'b1;
    end else begin
        HTA_heap_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        HTA_heap_1_d0 = offset_new_node1_1_fu_1345_p2;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        HTA_heap_1_d0 = offset_new_node0_fu_1295_p2;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        HTA_heap_1_d0 = offset_new_node0_2_fu_1219_p2;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        HTA_heap_1_d0 = offset_new_node1_fu_1143_p2;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        HTA_heap_1_d0 = weight1_1_reg_1729;
    end else if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state10))) begin
        HTA_heap_1_d0 = 32'd4294967295;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        HTA_heap_1_d0 = 32'd10000;
    end else begin
        HTA_heap_1_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state10) | ((1'b1 == ap_CS_fsm_state37) & (brmerge_demorgan_reg_1750 == 1'd1) & (or_cond_reg_1676 == 1'd0)) | ((1'b1 == ap_CS_fsm_state31) & (tmp_42_fu_1336_p1 == 1'd0)) | ((1'b1 == ap_CS_fsm_state27) & (tmp_45_fu_1260_p1 == 1'd0)) | ((1'b1 == ap_CS_fsm_state22) & (tmp_50_fu_1184_p1 == 1'd0)) | ((1'b1 == ap_CS_fsm_state5) & (tmp_4_fu_665_p1 == 1'd1) & (tmp_5_fu_650_p2 == 1'd1)) | ((1'b0 == ap_block_state18_io) & (1'b1 == ap_CS_fsm_state18)))) begin
        HTA_heap_1_we0 = 1'b1;
    end else begin
        HTA_heap_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == alloc_HTA_addr_ap_vld) & (1'b1 == ap_CS_fsm_state2))) begin
        alloc_HTA_addr_ap_ack = 1'b1;
    end else begin
        alloc_HTA_addr_ap_ack = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        alloc_HTA_addr_blk_n = alloc_HTA_addr_ap_vld;
    end else begin
        alloc_HTA_addr_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (ap_reg_ioackin_alloc_HTA_cmd_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        alloc_HTA_cmd_ap_vld = 1'b1;
    end else begin
        alloc_HTA_cmd_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        alloc_HTA_cmd_blk_n = alloc_HTA_cmd_ap_ack;
    end else begin
        alloc_HTA_cmd_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (ap_reg_ioackin_alloc_HTA_free_target_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        alloc_HTA_free_target_ap_vld = 1'b1;
    end else begin
        alloc_HTA_free_target_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        alloc_HTA_free_target_blk_n = alloc_HTA_free_target_ap_ack;
    end else begin
        alloc_HTA_free_target_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (ap_reg_ioackin_alloc_HTA_size_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        alloc_HTA_size_ap_vld = 1'b1;
    end else begin
        alloc_HTA_size_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        alloc_HTA_size_blk_n = alloc_HTA_size_ap_ack;
    end else begin
        alloc_HTA_size_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == alloc_KWTA_addr_ap_vld) & (1'b1 == ap_CS_fsm_state34)) | ((1'b1 == alloc_KWTA_addr_ap_vld) & (1'b1 == ap_CS_fsm_state20)) | ((1'b1 == alloc_KWTA_addr_ap_vld) & (1'b1 == ap_CS_fsm_state25)) | ((1'b1 == alloc_KWTA_addr_ap_vld) & (1'b1 == ap_CS_fsm_state29)) | ((1'b1 == alloc_KWTA_addr_ap_vld) & (1'b1 == ap_CS_fsm_state8)))) begin
        alloc_KWTA_addr_ap_ack = 1'b1;
    end else begin
        alloc_KWTA_addr_ap_ack = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state8))) begin
        alloc_KWTA_addr_blk_n = alloc_KWTA_addr_ap_vld;
    end else begin
        alloc_KWTA_addr_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state18) & (brmerge_demorgan_fu_1137_p2 == 1'd1)))) begin
        alloc_KWTA_cmd = 8'd2;
    end else if (((grp_HLS_free_1_s_fu_546_allocator_cmd_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state38))) begin
        alloc_KWTA_cmd = grp_HLS_free_1_s_fu_546_allocator_cmd;
    end else begin
        alloc_KWTA_cmd = 'bx;
    end
end

always @ (*) begin
    if ((((ap_reg_ioackin_alloc_KWTA_cmd_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state33)) | ((ap_reg_ioackin_alloc_KWTA_cmd_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state19)) | ((ap_reg_ioackin_alloc_KWTA_cmd_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state24)) | ((ap_reg_ioackin_alloc_KWTA_cmd_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state18) & (brmerge_demorgan_fu_1137_p2 == 1'd1)) | ((ap_reg_ioackin_alloc_KWTA_cmd_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state7)))) begin
        alloc_KWTA_cmd_ap_vld = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        alloc_KWTA_cmd_ap_vld = grp_HLS_free_1_s_fu_546_allocator_cmd_ap_vld;
    end else begin
        alloc_KWTA_cmd_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state18) & (brmerge_demorgan_fu_1137_p2 == 1'd1)))) begin
        alloc_KWTA_cmd_blk_n = alloc_KWTA_cmd_ap_ack;
    end else begin
        alloc_KWTA_cmd_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state18) & (brmerge_demorgan_fu_1137_p2 == 1'd1)))) begin
        alloc_KWTA_free_target = 32'd0;
    end else if (((grp_HLS_free_1_s_fu_546_allocator_free_targe_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state38))) begin
        alloc_KWTA_free_target = grp_HLS_free_1_s_fu_546_allocator_free_targe;
    end else begin
        alloc_KWTA_free_target = 'bx;
    end
end

always @ (*) begin
    if ((((ap_reg_ioackin_alloc_KWTA_free_target_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state33)) | ((ap_reg_ioackin_alloc_KWTA_free_target_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state19)) | ((ap_reg_ioackin_alloc_KWTA_free_target_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state24)) | ((ap_reg_ioackin_alloc_KWTA_free_target_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state18) & (brmerge_demorgan_fu_1137_p2 == 1'd1)) | ((ap_reg_ioackin_alloc_KWTA_free_target_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state7)))) begin
        alloc_KWTA_free_target_ap_vld = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        alloc_KWTA_free_target_ap_vld = grp_HLS_free_1_s_fu_546_allocator_free_targe_ap_vld;
    end else begin
        alloc_KWTA_free_target_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state18) & (brmerge_demorgan_fu_1137_p2 == 1'd1)))) begin
        alloc_KWTA_free_target_blk_n = alloc_KWTA_free_target_ap_ack;
    end else begin
        alloc_KWTA_free_target_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state18) & (brmerge_demorgan_fu_1137_p2 == 1'd1)))) begin
        alloc_KWTA_size = 32'd1;
    end else if (((grp_HLS_free_1_s_fu_546_allocator_size_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state38))) begin
        alloc_KWTA_size = grp_HLS_free_1_s_fu_546_allocator_size;
    end else begin
        alloc_KWTA_size = 'bx;
    end
end

always @ (*) begin
    if ((((ap_reg_ioackin_alloc_KWTA_size_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state33)) | ((ap_reg_ioackin_alloc_KWTA_size_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state19)) | ((ap_reg_ioackin_alloc_KWTA_size_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state24)) | ((ap_reg_ioackin_alloc_KWTA_size_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state18) & (brmerge_demorgan_fu_1137_p2 == 1'd1)) | ((ap_reg_ioackin_alloc_KWTA_size_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state7)))) begin
        alloc_KWTA_size_ap_vld = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        alloc_KWTA_size_ap_vld = grp_HLS_free_1_s_fu_546_allocator_size_ap_vld;
    end else begin
        alloc_KWTA_size_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state18) & (brmerge_demorgan_fu_1137_p2 == 1'd1)))) begin
        alloc_KWTA_size_blk_n = alloc_KWTA_size_ap_ack;
    end else begin
        alloc_KWTA_size_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state39) & (tmp_s_fu_1441_p2 == 1'd0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state39) & (tmp_s_fu_1441_p2 == 1'd0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_alloc_HTA_cmd_ap_ack == 1'b0)) begin
        ap_sig_ioackin_alloc_HTA_cmd_ap_ack = alloc_HTA_cmd_ap_ack;
    end else begin
        ap_sig_ioackin_alloc_HTA_cmd_ap_ack = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_alloc_HTA_free_target_ap_ack == 1'b0)) begin
        ap_sig_ioackin_alloc_HTA_free_target_ap_ack = alloc_HTA_free_target_ap_ack;
    end else begin
        ap_sig_ioackin_alloc_HTA_free_target_ap_ack = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_alloc_HTA_size_ap_ack == 1'b0)) begin
        ap_sig_ioackin_alloc_HTA_size_ap_ack = alloc_HTA_size_ap_ack;
    end else begin
        ap_sig_ioackin_alloc_HTA_size_ap_ack = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_alloc_KWTA_cmd_ap_ack == 1'b0)) begin
        ap_sig_ioackin_alloc_KWTA_cmd_ap_ack = alloc_KWTA_cmd_ap_ack;
    end else begin
        ap_sig_ioackin_alloc_KWTA_cmd_ap_ack = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_alloc_KWTA_free_target_ap_ack == 1'b0)) begin
        ap_sig_ioackin_alloc_KWTA_free_target_ap_ack = alloc_KWTA_free_target_ap_ack;
    end else begin
        ap_sig_ioackin_alloc_KWTA_free_target_ap_ack = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_alloc_KWTA_size_ap_ack == 1'b0)) begin
        ap_sig_ioackin_alloc_KWTA_size_ap_ack = alloc_KWTA_size_ap_ack;
    end else begin
        ap_sig_ioackin_alloc_KWTA_size_ap_ack = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        dis_output_ce0 = 1'b1;
    end else begin
        dis_output_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        dis_output_we0 = 1'b1;
    end else begin
        dis_output_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        in_list_address0 = in_list_addr_4_reg_1718;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        in_list_address0 = tmp_21_fu_1076_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        in_list_address0 = tmp_3_reg_1609;
    end else if (((1'b1 == ap_CS_fsm_state6) & (tmp_8_fu_694_p2 == 1'd0))) begin
        in_list_address0 = 64'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (tmp_8_fu_694_p2 == 1'd1))) begin
        in_list_address0 = tmp_9_fu_705_p1;
    end else begin
        in_list_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state36))) begin
        in_list_address1 = in_list_addr_3_reg_1707;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        in_list_address1 = in_list_addr_4_reg_1718;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        in_list_address1 = tmp_24_fu_1085_p1;
    end else begin
        in_list_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state15) | ((1'b1 == ap_CS_fsm_state6) & (tmp_8_fu_694_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state6) & (tmp_8_fu_694_p2 == 1'd1)))) begin
        in_list_ce0 = 1'b1;
    end else begin
        in_list_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state17))) begin
        in_list_ce1 = 1'b1;
    end else begin
        in_list_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state36) | ((1'b1 == ap_CS_fsm_state6) & (tmp_8_fu_694_p2 == 1'd0)))) begin
        in_list_d0 = 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state15) | ((1'b1 == ap_CS_fsm_state6) & (tmp_8_fu_694_p2 == 1'd1)))) begin
        in_list_d0 = 1'd0;
    end else begin
        in_list_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state36) | ((1'b1 == ap_CS_fsm_state15) & (tmp_10_fu_869_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state6) & (tmp_8_fu_694_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state6) & (tmp_8_fu_694_p2 == 1'd1)))) begin
        in_list_we0 = 1'b1;
    end else begin
        in_list_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state36))) begin
        in_list_we1 = 1'b1;
    end else begin
        in_list_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        map_r_ce0 = 1'b1;
    end else begin
        map_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        map_r_ce1 = 1'b1;
    end else begin
        map_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == alloc_HTA_addr_ap_vld) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (tmp_5_fu_650_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (tmp_8_fu_694_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b0 == ap_block_state7_io) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == alloc_KWTA_addr_ap_vld) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (tmp_7_fu_775_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            if (((1'b1 == ap_CS_fsm_state15) & (tmp_10_fu_869_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((1'b1 == ap_CS_fsm_state16) & (or_cond_fu_1007_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            if (((1'b0 == ap_block_state18_io) & (1'b1 == ap_CS_fsm_state18) & (update1_fu_1132_p2 == 1'd0) & (update0_fu_1121_p2 == 1'd0) & (brmerge_demorgan_fu_1137_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else if (((1'b0 == ap_block_state18_io) & (1'b1 == ap_CS_fsm_state18) & (update1_fu_1132_p2 == 1'd1) & (update0_fu_1121_p2 == 1'd0) & (brmerge_demorgan_fu_1137_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else if (((1'b0 == ap_block_state18_io) & (1'b1 == ap_CS_fsm_state18) & (update0_fu_1121_p2 == 1'd1) & (brmerge_demorgan_fu_1137_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else if (((1'b0 == ap_block_state18_io) & (1'b1 == ap_CS_fsm_state18) & (brmerge_demorgan_fu_1137_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            if (((1'b0 == ap_block_state19_io) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state20 : begin
            if (((1'b1 == alloc_KWTA_addr_ap_vld) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state24 : begin
            if (((1'b0 == ap_block_state24_io) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            if (((1'b1 == alloc_KWTA_addr_ap_vld) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state29 : begin
            if (((1'b1 == alloc_KWTA_addr_ap_vld) & (1'b1 == ap_CS_fsm_state29))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            if (((1'b0 == ap_block_state33_io) & (1'b1 == ap_CS_fsm_state33))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_state34 : begin
            if (((1'b1 == alloc_KWTA_addr_ap_vld) & (1'b1 == ap_CS_fsm_state34))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state38 : begin
            if (((grp_HLS_free_1_s_fu_546_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state38))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end
        end
        ap_ST_fsm_state39 : begin
            if (((1'b1 == ap_CS_fsm_state39) & (tmp_s_fu_1441_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign KWTA_heap_0_sum1_fu_785_p2 = (13'd2000 + tmp_28_fu_781_p1);

assign KWTA_heap_0_sum2_fu_1315_p2 = (13'd2000 + tmp_33_cast_fu_1307_p3);

assign KWTA_heap_0_sum3_fu_1364_p2 = (13'd2000 + tmp_34_cast_fu_1356_p3);

assign KWTA_heap_0_sum4_fu_1239_p2 = (13'd2000 + tmp_35_cast_fu_1231_p3);

assign KWTA_heap_0_sum5_fu_1163_p2 = (13'd2000 + tmp_36_cast_fu_1155_p3);

assign KWTA_heap_0_sum_fu_728_p2 = (13'd2000 + tmp_cast_fu_720_p3);

assign alloc_HTA_cmd = 8'd2;

assign alloc_HTA_free_target = 32'd0;

assign alloc_HTA_size = n;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

always @ (*) begin
    ap_block_state18_io = (((ap_sig_ioackin_alloc_KWTA_free_target_ap_ack == 1'b0) & (brmerge_demorgan_fu_1137_p2 == 1'd1)) | ((ap_sig_ioackin_alloc_KWTA_size_ap_ack == 1'b0) & (brmerge_demorgan_fu_1137_p2 == 1'd1)) | ((ap_sig_ioackin_alloc_KWTA_cmd_ap_ack == 1'b0) & (brmerge_demorgan_fu_1137_p2 == 1'd1)));
end

always @ (*) begin
    ap_block_state19_io = ((ap_sig_ioackin_alloc_KWTA_free_target_ap_ack == 1'b0) | (ap_sig_ioackin_alloc_KWTA_size_ap_ack == 1'b0) | (ap_sig_ioackin_alloc_KWTA_cmd_ap_ack == 1'b0));
end

always @ (*) begin
    ap_block_state1_io = ((ap_sig_ioackin_alloc_HTA_free_target_ap_ack == 1'b0) | (ap_sig_ioackin_alloc_HTA_size_ap_ack == 1'b0) | (ap_sig_ioackin_alloc_HTA_cmd_ap_ack == 1'b0));
end

always @ (*) begin
    ap_block_state24_io = ((ap_sig_ioackin_alloc_KWTA_free_target_ap_ack == 1'b0) | (ap_sig_ioackin_alloc_KWTA_size_ap_ack == 1'b0) | (ap_sig_ioackin_alloc_KWTA_cmd_ap_ack == 1'b0));
end

always @ (*) begin
    ap_block_state33_io = ((ap_sig_ioackin_alloc_KWTA_free_target_ap_ack == 1'b0) | (ap_sig_ioackin_alloc_KWTA_size_ap_ack == 1'b0) | (ap_sig_ioackin_alloc_KWTA_cmd_ap_ack == 1'b0));
end

always @ (*) begin
    ap_block_state7_io = ((ap_sig_ioackin_alloc_KWTA_free_target_ap_ack == 1'b0) | (ap_sig_ioackin_alloc_KWTA_size_ap_ack == 1'b0) | (ap_sig_ioackin_alloc_KWTA_cmd_ap_ack == 1'b0));
end

assign brmerge_demorgan_fu_1137_p2 = (update1_fu_1132_p2 & update0_fu_1121_p2);

assign dis_output_address0 = tmp_11_fu_1477_p1;

assign dis_output_d0 = ((tmp_35_fu_1482_p1[0:0] === 1'b1) ? HTA_heap_1_q0 : HTA_heap_0_q0);

assign extLd_fu_865_p1 = $signed(N_2);

assign grp_HLS_free_1_s_fu_546_ap_start = grp_HLS_free_1_s_fu_546_ap_start_reg;

assign grp_fu_560_p2 = (13'd2001 + tmp_39_reg_1739);

assign grp_fu_565_p4 = {{grp_fu_560_p2[12:1]}};

assign guard_variable_for_H_1_load_fu_583_p1 = guard_variable_for_H;

assign i0_fu_885_p2 = i_2_reg_523 << 32'd1;

assign i1_fu_891_p2 = (i0_fu_885_p2 | 32'd1);

assign i_1_cast_fu_690_p1 = i_1_reg_502;

assign i_3_cast_fu_1437_p1 = i_3_reg_534;

assign i_4_fu_655_p2 = (i_reg_491 + 31'd1);

assign i_5_fu_699_p2 = (i_1_reg_502 + 31'd1);

assign i_6_fu_1446_p2 = (i_3_reg_534 + 31'd1);

assign i_7_fu_875_p2 = (i_2_reg_523 + 32'd1);

assign i_cast_fu_646_p1 = i_reg_491;

assign local_dis_0_sum1_fu_669_p2 = (tmp_1_fu_661_p1 + tmp_4_cast_reg_1512);

assign local_dis_0_sum2_fu_827_p2 = (tmp_4_cast_reg_1512 + tmp_32_fu_819_p1);

assign local_dis_0_sum6_fu_1030_p2 = (tmp_4_cast_reg_1512 + tmp_24_cast_fu_1023_p3);

assign local_dis_0_sum7_fu_1056_p2 = (tmp_4_cast_reg_1512 + tmp_27_cast_fu_1050_p2);

assign local_dis_0_sum_fu_1456_p2 = (tmp_34_fu_1452_p1 + tmp_4_cast_reg_1512);

assign map_r_address0 = tmp_13_fu_902_p1;

assign map_r_address1 = tmp_15_fu_912_p1;

assign newIndex10_cast_fu_1071_p1 = newIndex10_fu_1061_p4;

assign newIndex10_fu_1061_p4 = {{local_dis_0_sum7_fu_1056_p2[12:1]}};

assign newIndex11_cast_fu_1331_p1 = newIndex11_fu_1321_p4;

assign newIndex11_fu_1321_p4 = {{KWTA_heap_0_sum2_fu_1315_p2[12:1]}};

assign newIndex12_cast_fu_1339_p1 = grp_fu_565_p4;

assign newIndex13_cast_fu_1255_p1 = newIndex13_fu_1245_p4;

assign newIndex13_fu_1245_p4 = {{KWTA_heap_0_sum4_fu_1239_p2[12:1]}};

assign newIndex14_cast_fu_1264_p1 = grp_fu_565_p4;

assign newIndex15_cast_fu_1380_p1 = newIndex15_fu_1370_p4;

assign newIndex15_fu_1370_p4 = {{KWTA_heap_0_sum3_fu_1364_p2[12:1]}};

assign newIndex16_cast_fu_1400_p1 = newIndex16_fu_1390_p4;

assign newIndex16_fu_1390_p4 = {{p_sum2_fu_1385_p2[12:1]}};

assign newIndex17_cast_fu_1426_p1 = newIndex17_reg_1793;

assign newIndex18_cast_fu_1179_p1 = newIndex18_fu_1169_p4;

assign newIndex18_fu_1169_p4 = {{KWTA_heap_0_sum5_fu_1163_p2[12:1]}};

assign newIndex19_cast_fu_1215_p1 = newIndex19_reg_1762;

assign newIndex1_fu_632_p4 = {{status_6_reg_1506[19:1]}};

assign newIndex20_cast_fu_1188_p1 = grp_fu_565_p4;

assign newIndex21_cast_fu_1291_p1 = newIndex21_reg_1775;

assign newIndex2_fu_641_p1 = newIndex1_fu_632_p4;

assign newIndex3_cast_fu_684_p1 = newIndex3_fu_674_p4;

assign newIndex3_fu_674_p4 = {{local_dis_0_sum1_fu_669_p2[12:1]}};

assign newIndex4_cast_fu_744_p1 = newIndex4_fu_734_p4;

assign newIndex4_fu_734_p4 = {{KWTA_heap_0_sum_fu_728_p2[12:1]}};

assign newIndex5_cast_fu_765_p1 = newIndex5_fu_755_p4;

assign newIndex5_fu_755_p4 = {{p_sum_fu_749_p2[12:1]}};

assign newIndex6_cast_fu_801_p1 = newIndex6_fu_791_p4;

assign newIndex6_fu_791_p4 = {{KWTA_heap_0_sum1_fu_785_p2[12:1]}};

assign newIndex7_cast_fu_842_p1 = newIndex7_reg_1594;

assign newIndex8_cast_fu_932_p1 = newIndex8_fu_922_p4;

assign newIndex8_fu_922_p4 = {{p_sum3_fu_917_p2[12:1]}};

assign newIndex9_cast_fu_1045_p1 = newIndex9_fu_1035_p4;

assign newIndex9_fu_1035_p4 = {{local_dis_0_sum6_fu_1030_p2[12:1]}};

assign newIndex_cast_fu_1471_p1 = newIndex_fu_1461_p4;

assign newIndex_fu_1461_p4 = {{local_dis_0_sum_fu_1456_p2[12:1]}};

assign now_dis_fu_850_p3 = ((tmp_33_reg_1589[0:0] === 1'b1) ? HTA_heap_1_q0 : HTA_heap_0_q0);

assign now_fu_811_p3 = ((tmp_29_fu_807_p1[0:0] === 1'b1) ? HTA_heap_1_q0 : HTA_heap_0_q0);

assign offset_head_3_fu_710_p2 = reg_575 << 32'd1;

assign offset_new_node0_2_fu_1219_p2 = reg_575 << 32'd1;

assign offset_new_node0_fu_1295_p2 = reg_575 << 32'd1;

assign offset_new_node1_1_fu_1345_p2 = reg_575 << 32'd1;

assign offset_new_node1_fu_1143_p2 = reg_575 << 32'd1;

assign offset_next_fu_1430_p3 = ((tmp_29_reg_1578[0:0] === 1'b1) ? HTA_heap_0_q0 : HTA_heap_1_q0);

assign or_cond_fu_1007_p2 = (tmp_17_fu_1001_p2 & tmp_16_fu_995_p2);

assign p_lshr_f_fu_972_p4 = {{offset_head_reg_513[31:1]}};

assign p_lshr_fu_952_p4 = {{p_neg_fu_946_p2[31:1]}};

assign p_neg_fu_946_p2 = (32'd0 - offset_head_reg_513);

assign p_neg_t_fu_966_p2 = (32'd0 - tmp_18_fu_962_p1);

assign p_sum2_fu_1385_p2 = (13'd2001 + tmp_33_cast_reg_1780);

assign p_sum3_fu_917_p2 = (tmp_28_reg_1563 + 13'd2001);

assign p_sum4_fu_1405_p2 = (13'd2001 + tmp_34_cast_fu_1356_p3);

assign p_sum6_fu_1270_p2 = (tmp_35_cast_fu_1231_p3 + 13'd2001);

assign p_sum8_fu_1194_p2 = (tmp_36_cast_fu_1155_p3 + 13'd2001);

assign p_sum_fu_749_p2 = (13'd2001 + tmp_cast_fu_720_p3);

assign tmp_10_fu_869_p2 = (($signed(i_2_reg_523) < $signed(extLd_fu_865_p1)) ? 1'b1 : 1'b0);

assign tmp_11_fu_1477_p1 = i_3_reg_534;

assign tmp_12_fu_897_p2 = ($signed(tmp_6_reg_1620) + $signed(i0_fu_885_p2));

assign tmp_13_fu_902_p1 = $signed(tmp_12_fu_897_p2);

assign tmp_14_fu_907_p2 = ($signed(tmp_6_reg_1620) + $signed(i1_fu_891_p2));

assign tmp_15_fu_912_p1 = $signed(tmp_14_fu_907_p2);

assign tmp_16_fu_995_p2 = (($signed(map_r_q0) > $signed(32'd9999)) ? 1'b1 : 1'b0);

assign tmp_17_fu_1001_p2 = (($signed(map_r_q1) > $signed(32'd9999)) ? 1'b1 : 1'b0);

assign tmp_18_fu_962_p1 = p_lshr_fu_952_p4;

assign tmp_19_fu_982_p1 = p_lshr_f_fu_972_p4;

assign tmp_1_fu_661_p1 = i_reg_491[12:0];

assign tmp_1_i_fu_587_p0 = n;

assign tmp_1_i_fu_587_p2 = ($signed(tmp_1_i_fu_587_p0) + $signed(32'd1));

assign tmp_20_fu_986_p3 = ((tmp_38_fu_938_p3[0:0] === 1'b1) ? p_neg_t_fu_966_p2 : tmp_19_fu_982_p1);

assign tmp_21_fu_1076_p1 = i0_reg_1639;

assign tmp_22_fu_1080_p2 = (($signed(weight0_reg_1680) < $signed(HTA_heap_0_q0)) ? 1'b1 : 1'b0);

assign tmp_23_fu_1115_p2 = (in_list_q0 ^ 1'd1);

assign tmp_24_cast_fu_1023_p3 = {{tmp_36_reg_1634}, {1'd0}};

assign tmp_24_fu_1085_p1 = i1_reg_1645;

assign tmp_25_fu_1089_p2 = (($signed(weight1_reg_1686) < $signed(HTA_heap_1_q0)) ? 1'b1 : 1'b0);

assign tmp_26_fu_1126_p2 = (in_list_q1 ^ 1'd1);

assign tmp_27_cast_fu_1050_p2 = (tmp_24_cast_fu_1023_p3 | 13'd1);

assign tmp_27_fu_716_p1 = reg_575[11:0];

assign tmp_28_fu_781_p1 = offset_head_reg_513[12:0];

assign tmp_29_fu_807_p1 = offset_head_reg_513[0:0];

assign tmp_32_fu_819_p1 = now_fu_811_p3[12:0];

assign tmp_33_cast_fu_1307_p3 = {{tmp_41_fu_1303_p1}, {1'd0}};

assign tmp_33_fu_823_p1 = now_fu_811_p3[0:0];

assign tmp_34_cast_fu_1356_p3 = {{tmp_47_fu_1352_p1}, {1'd0}};

assign tmp_34_fu_1452_p1 = i_3_reg_534[12:0];

assign tmp_35_cast_fu_1231_p3 = {{tmp_44_fu_1227_p1}, {1'd0}};

assign tmp_35_fu_1482_p1 = i_3_reg_534[0:0];

assign tmp_36_cast_fu_1155_p3 = {{tmp_49_fu_1151_p1}, {1'd0}};

assign tmp_36_fu_881_p1 = i_2_reg_523[11:0];

assign tmp_38_fu_938_p3 = offset_head_reg_513[32'd31];

assign tmp_39_fu_1111_p1 = offset_tail_fu_122[12:0];

assign tmp_3_fu_847_p1 = now_reg_1583;

assign tmp_41_fu_1303_p1 = reg_575[11:0];

assign tmp_42_fu_1336_p1 = offset_tail_load_reg_1734[0:0];

assign tmp_44_fu_1227_p1 = reg_575[11:0];

assign tmp_45_fu_1260_p1 = reg_579[0:0];

assign tmp_47_fu_1352_p1 = reg_575[11:0];

assign tmp_49_fu_1151_p1 = reg_575[11:0];

assign tmp_4_cast_fu_624_p3 = {{tmp_fu_615_p4}, {1'd0}};

assign tmp_4_fu_665_p1 = i_reg_491[0:0];

assign tmp_50_fu_1184_p1 = reg_579[0:0];

assign tmp_5_fu_650_p1 = n;

assign tmp_5_fu_650_p2 = (($signed(i_cast_fu_646_p1) < $signed(tmp_5_fu_650_p1)) ? 1'b1 : 1'b0);

assign tmp_6_fu_857_p0 = n;

assign tmp_6_fu_857_p2 = ($signed(tmp_6_fu_857_p0) * $signed(now_reg_1583));

assign tmp_7_fu_775_p2 = ((offset_head_reg_513 == 32'd4294967295) ? 1'b1 : 1'b0);

assign tmp_8_fu_694_p1 = n;

assign tmp_8_fu_694_p2 = (($signed(i_1_cast_fu_690_p1) < $signed(tmp_8_fu_694_p1)) ? 1'b1 : 1'b0);

assign tmp_9_fu_705_p1 = i_1_reg_502;

assign tmp_cast_fu_720_p3 = {{tmp_27_fu_716_p1}, {1'd0}};

assign tmp_fu_615_p4 = {{status_6_reg_1506[12:1]}};

assign tmp_s_fu_1441_p1 = n;

assign tmp_s_fu_1441_p2 = (($signed(i_3_cast_fu_1437_p1) < $signed(tmp_s_fu_1441_p1)) ? 1'b1 : 1'b0);

assign update0_fu_1121_p2 = (tmp_23_fu_1115_p2 & tmp_22_reg_1702);

assign update1_fu_1132_p2 = (tmp_26_fu_1126_p2 & tmp_25_reg_1713);

assign weight0_HTA_heap_loa_fu_1094_p3 = ((tmp_22_fu_1080_p2[0:0] === 1'b1) ? weight0_reg_1680 : HTA_heap_0_q0);

assign weight0_fu_1013_p2 = (now_dis_reg_1614 + map_r_q0);

assign weight1_1_fu_1101_p3 = ((tmp_25_fu_1089_p2[0:0] === 1'b1) ? weight1_reg_1686 : HTA_heap_1_q0);

assign weight1_fu_1018_p2 = (now_dis_reg_1614 + map_r_q1);

always @ (posedge ap_clk) begin
    reg_579[0] <= 1'b0;
    tmp_4_cast_reg_1512[0] <= 1'b0;
    i0_reg_1639[0] <= 1'b0;
    i1_reg_1645[0] <= 1'b1;
    in_list_addr_3_reg_1707[0] <= 1'b0;
    in_list_addr_4_reg_1718[0] <= 1'b1;
    offset_tail_load_reg_1734[0] <= 1'b0;
    tmp_39_reg_1739[0] <= 1'b0;
    tmp_33_cast_reg_1780[0] <= 1'b0;
    offset_tail_fu_122[0] <= 1'b0;
end

endmodule //HLS_SPFA_KWTA
