-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity HLS_SPFA_KWTA is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    n : IN STD_LOGIC_VECTOR (31 downto 0);
    map_r_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    map_r_ce0 : OUT STD_LOGIC;
    map_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    map_r_address1 : OUT STD_LOGIC_VECTOR (14 downto 0);
    map_r_ce1 : OUT STD_LOGIC;
    map_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    dis_output_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    dis_output_ce0 : OUT STD_LOGIC;
    dis_output_we0 : OUT STD_LOGIC;
    dis_output_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    alloc_HTA_size : OUT STD_LOGIC_VECTOR (31 downto 0);
    alloc_HTA_size_ap_vld : OUT STD_LOGIC;
    alloc_HTA_size_ap_ack : IN STD_LOGIC;
    alloc_HTA_free_target : OUT STD_LOGIC_VECTOR (31 downto 0);
    alloc_HTA_free_target_ap_vld : OUT STD_LOGIC;
    alloc_HTA_free_target_ap_ack : IN STD_LOGIC;
    alloc_HTA_addr : IN STD_LOGIC_VECTOR (31 downto 0);
    alloc_HTA_addr_ap_vld : IN STD_LOGIC;
    alloc_HTA_addr_ap_ack : OUT STD_LOGIC;
    alloc_HTA_cmd : OUT STD_LOGIC_VECTOR (7 downto 0);
    alloc_HTA_cmd_ap_vld : OUT STD_LOGIC;
    alloc_HTA_cmd_ap_ack : IN STD_LOGIC;
    alloc_KWTA_size : OUT STD_LOGIC_VECTOR (31 downto 0);
    alloc_KWTA_size_ap_vld : OUT STD_LOGIC;
    alloc_KWTA_size_ap_ack : IN STD_LOGIC;
    alloc_KWTA_free_target : OUT STD_LOGIC_VECTOR (31 downto 0);
    alloc_KWTA_free_target_ap_vld : OUT STD_LOGIC;
    alloc_KWTA_free_target_ap_ack : IN STD_LOGIC;
    alloc_KWTA_addr : IN STD_LOGIC_VECTOR (31 downto 0);
    alloc_KWTA_addr_ap_vld : IN STD_LOGIC;
    alloc_KWTA_addr_ap_ack : OUT STD_LOGIC;
    alloc_KWTA_cmd : OUT STD_LOGIC_VECTOR (7 downto 0);
    alloc_KWTA_cmd_ap_vld : OUT STD_LOGIC;
    alloc_KWTA_cmd_ap_ack : IN STD_LOGIC );
end;


architecture behav of HLS_SPFA_KWTA is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "HLS_SPFA_KWTA,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=9,HLS_SYN_DSP=3,HLS_SYN_FF=1060,HLS_SYN_LUT=1907,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (35 downto 0) := "000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (35 downto 0) := "000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (35 downto 0) := "000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (35 downto 0) := "000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (35 downto 0) := "000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (35 downto 0) := "000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (35 downto 0) := "000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (35 downto 0) := "000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (35 downto 0) := "000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (35 downto 0) := "001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (35 downto 0) := "010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (35 downto 0) := "100000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv32_2710 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010011100010000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv13_7D1 : STD_LOGIC_VECTOR (12 downto 0) := "0011111010001";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv13_7D0 : STD_LOGIC_VECTOR (12 downto 0) := "0011111010000";
    constant ap_const_lv32_270F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010011100001111";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal guard_variable_for_H : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal N_2 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    signal alloc_HTA_size_blk_n : STD_LOGIC;
    signal alloc_HTA_free_target_blk_n : STD_LOGIC;
    signal alloc_HTA_addr_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal alloc_HTA_cmd_blk_n : STD_LOGIC;
    signal alloc_KWTA_size_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal brmerge_demorgan_fu_1073_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal alloc_KWTA_free_target_blk_n : STD_LOGIC;
    signal alloc_KWTA_addr_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal alloc_KWTA_cmd_blk_n : STD_LOGIC;
    signal reg_568 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_572 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_ioackin_alloc_KWTA_cmd_ap_ack : STD_LOGIC;
    signal ap_sig_ioackin_alloc_KWTA_size_ap_ack : STD_LOGIC;
    signal ap_sig_ioackin_alloc_KWTA_free_target_ap_ack : STD_LOGIC;
    signal ap_block_state16_io : BOOLEAN;
    signal update0_fu_1057_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal update1_fu_1068_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_ioackin_alloc_HTA_cmd_ap_ack : STD_LOGIC;
    signal ap_sig_ioackin_alloc_HTA_size_ap_ack : STD_LOGIC;
    signal ap_sig_ioackin_alloc_HTA_free_target_ap_ack : STD_LOGIC;
    signal ap_block_state1_io : BOOLEAN;
    signal status_6_reg_1498 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_cast_fu_617_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_4_cast_reg_1504 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal HTA_heap_0_addr_reg_1513 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_4_fu_648_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_5_fu_692_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal offset_head_3_fu_703_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_27_fu_774_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_27_reg_1555 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_7_fu_768_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_fu_800_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_reg_1570 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal now_fu_804_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal now_reg_1575 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_32_fu_816_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_reg_1581 : STD_LOGIC_VECTOR (0 downto 0);
    signal newIndex7_reg_1586 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_3_fu_840_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_reg_1601 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal now_dis_fu_843_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal now_dis_reg_1606 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_850_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_1612 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_7_fu_868_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_7_reg_1621 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal tmp_35_fu_874_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_35_reg_1626 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_10_fu_862_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i0_fu_878_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i0_reg_1631 : STD_LOGIC_VECTOR (31 downto 0);
    signal i1_fu_884_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i1_reg_1637 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_cond_fu_943_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_1663 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal weight0_fu_949_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight0_reg_1667 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight1_fu_954_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight1_reg_1673 : STD_LOGIC_VECTOR (31 downto 0);
    signal HTA_heap_0_addr_7_reg_1679 : STD_LOGIC_VECTOR (10 downto 0);
    signal HTA_heap_1_addr_6_reg_1684 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_21_fu_1016_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_reg_1689 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal in_list_addr_3_reg_1694 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_24_fu_1025_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_reg_1700 : STD_LOGIC_VECTOR (0 downto 0);
    signal in_list_addr_4_reg_1705 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight0_HTA_heap_loa_fu_1030_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight0_HTA_heap_loa_reg_1710 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight1_1_fu_1037_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight1_1_reg_1715 : STD_LOGIC_VECTOR (31 downto 0);
    signal offset_tail_load_reg_1720 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_38_fu_1047_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_38_reg_1725 : STD_LOGIC_VECTOR (12 downto 0);
    signal brmerge_demorgan_reg_1736 : STD_LOGIC_VECTOR (0 downto 0);
    signal HTA_heap_0_addr_13_reg_1740 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal newIndex19_reg_1748 : STD_LOGIC_VECTOR (11 downto 0);
    signal HTA_heap_0_addr_10_reg_1753 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal newIndex21_reg_1761 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_32_cast_fu_1243_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_32_cast_reg_1766 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal HTA_heap_0_addr_8_reg_1771 : STD_LOGIC_VECTOR (10 downto 0);
    signal newIndex17_reg_1779 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal offset_next_fu_1366_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal offset_next_reg_1784 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal free_target_assign_fu_1421_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal free_target_assign_reg_1789 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_6_fu_1438_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_6_reg_1797 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal tmp_s_fu_1433_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal HTA_heap_0_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal HTA_heap_0_ce0 : STD_LOGIC;
    signal HTA_heap_0_we0 : STD_LOGIC;
    signal HTA_heap_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal HTA_heap_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal HTA_heap_1_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal HTA_heap_1_ce0 : STD_LOGIC;
    signal HTA_heap_1_we0 : STD_LOGIC;
    signal HTA_heap_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal HTA_heap_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_list_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal in_list_ce0 : STD_LOGIC;
    signal in_list_we0 : STD_LOGIC;
    signal in_list_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal in_list_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal in_list_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal in_list_ce1 : STD_LOGIC;
    signal in_list_we1 : STD_LOGIC;
    signal in_list_q1 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_495 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_5_fu_643_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_reg_506 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_8_fu_687_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal offset_head_reg_517 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal i_2_reg_527 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal i_3_reg_538 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal newIndex2_fu_634_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal newIndex3_cast_fu_677_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_698_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal newIndex4_cast_fu_737_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal newIndex5_cast_fu_758_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal newIndex6_cast_fu_794_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal newIndex7_cast_fu_835_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_fu_895_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_fu_905_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal newIndex8_cast_fu_925_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal newIndex9_cast_fu_981_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal newIndex10_cast_fu_1007_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_20_fu_1012_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_23_fu_1021_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal newIndex18_cast_fu_1115_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal newIndex20_cast_fu_1124_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal newIndex19_cast_fu_1151_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal newIndex13_cast_fu_1191_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal newIndex14_cast_fu_1200_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal newIndex21_cast_fu_1227_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal newIndex11_cast_fu_1267_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal newIndex12_cast_fu_1275_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal newIndex15_cast_fu_1316_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal newIndex16_cast_fu_1336_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal newIndex17_cast_fu_1362_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal newIndex_cast_fu_1463_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_fu_1469_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal guard_variable_for_H_1_load_fu_576_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal offset_tail_fu_124 : STD_LOGIC_VECTOR (31 downto 0);
    signal offset_new_node1_fu_1079_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal offset_new_node0_2_fu_1155_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal offset_new_node1_1_fu_1281_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ioackin_alloc_HTA_cmd_ap_ack : STD_LOGIC := '0';
    signal ap_reg_ioackin_alloc_HTA_size_ap_ack : STD_LOGIC := '0';
    signal ap_reg_ioackin_alloc_HTA_free_target_ap_ack : STD_LOGIC := '0';
    signal ap_reg_ioackin_alloc_KWTA_cmd_ap_ack : STD_LOGIC := '0';
    signal ap_block_state6_io : BOOLEAN;
    signal ap_block_state17_io : BOOLEAN;
    signal ap_block_state21_io : BOOLEAN;
    signal ap_block_state28_io : BOOLEAN;
    signal ap_block_state33_io : BOOLEAN;
    signal ap_reg_ioackin_alloc_KWTA_size_ap_ack : STD_LOGIC := '0';
    signal ap_reg_ioackin_alloc_KWTA_free_target_ap_ack : STD_LOGIC := '0';
    signal tmp_4_fu_658_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_49_fu_1120_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_44_fu_1196_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_41_fu_1272_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal offset_new_node0_fu_1231_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal grp_fu_553_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_1_i_fu_580_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_i_fu_580_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_608_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal newIndex1_fu_625_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal i_cast_fu_639_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_643_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_654_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal local_dis_0_sum1_fu_662_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal newIndex3_fu_667_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_1_cast_fu_683_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_687_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_26_fu_709_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_cast_fu_713_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal KWTA_heap_0_sum_fu_721_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal newIndex4_fu_727_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_sum_fu_742_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal newIndex5_fu_748_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal KWTA_heap_0_sum1_fu_778_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal newIndex6_fu_784_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_31_fu_812_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal local_dis_0_sum2_fu_820_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_6_fu_850_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal extLd_fu_858_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_890_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_900_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_sum3_fu_910_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal newIndex8_fu_915_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_16_fu_931_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_937_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_cast_fu_959_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal local_dis_0_sum6_fu_966_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal newIndex9_fu_971_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_26_cast_fu_986_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal local_dis_0_sum7_fu_992_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal newIndex10_fu_997_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_22_fu_1051_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_fu_1062_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_48_fu_1087_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_35_cast_fu_1091_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal KWTA_heap_0_sum5_fu_1099_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal newIndex18_fu_1105_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_558_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_sum8_fu_1130_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_43_fu_1163_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_34_cast_fu_1167_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal KWTA_heap_0_sum4_fu_1175_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal newIndex13_fu_1181_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_sum6_fu_1206_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_40_fu_1239_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal KWTA_heap_0_sum2_fu_1251_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal newIndex11_fu_1257_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_46_fu_1288_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_33_cast_fu_1292_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal KWTA_heap_0_sum3_fu_1300_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal newIndex15_fu_1306_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_sum2_fu_1321_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal newIndex16_fu_1326_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_sum4_fu_1341_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_neg_fu_1381_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_lshr_fu_1387_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_18_fu_1397_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_lshr_f_fu_1407_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_37_fu_1373_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_neg_t_fu_1401_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_fu_1417_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_3_cast_fu_1429_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_1433_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_33_fu_1444_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal local_dis_0_sum_fu_1448_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal newIndex_fu_1453_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_34_fu_1474_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (35 downto 0);

    component HLS_SPFA_KWTA_HTAbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component HLS_SPFA_KWTA_in_dEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (0 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    HTA_heap_0_U : component HLS_SPFA_KWTA_HTAbkb
    generic map (
        DataWidth => 32,
        AddressRange => 2000,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => HTA_heap_0_address0,
        ce0 => HTA_heap_0_ce0,
        we0 => HTA_heap_0_we0,
        d0 => HTA_heap_0_d0,
        q0 => HTA_heap_0_q0);

    HTA_heap_1_U : component HLS_SPFA_KWTA_HTAbkb
    generic map (
        DataWidth => 32,
        AddressRange => 2000,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => HTA_heap_1_address0,
        ce0 => HTA_heap_1_ce0,
        we0 => HTA_heap_1_we0,
        d0 => HTA_heap_1_d0,
        q0 => HTA_heap_1_q0);

    in_list_U : component HLS_SPFA_KWTA_in_dEe
    generic map (
        DataWidth => 1,
        AddressRange => 200,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => in_list_address0,
        ce0 => in_list_ce0,
        we0 => in_list_we0,
        d0 => in_list_d0,
        q0 => in_list_q0,
        address1 => in_list_address1,
        ce1 => in_list_ce1,
        we1 => in_list_we1,
        d1 => ap_const_lv1_1,
        q1 => in_list_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ioackin_alloc_HTA_cmd_ap_ack_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_alloc_HTA_cmd_ap_ack <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                    if (not(((ap_const_boolean_1 = ap_block_state1_io) or (ap_start = ap_const_logic_0)))) then 
                        ap_reg_ioackin_alloc_HTA_cmd_ap_ack <= ap_const_logic_0;
                    elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = alloc_HTA_cmd_ap_ack))) then 
                        ap_reg_ioackin_alloc_HTA_cmd_ap_ack <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_alloc_HTA_free_target_ap_ack_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_alloc_HTA_free_target_ap_ack <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                    if (not(((ap_const_boolean_1 = ap_block_state1_io) or (ap_start = ap_const_logic_0)))) then 
                        ap_reg_ioackin_alloc_HTA_free_target_ap_ack <= ap_const_logic_0;
                    elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = alloc_HTA_free_target_ap_ack))) then 
                        ap_reg_ioackin_alloc_HTA_free_target_ap_ack <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_alloc_HTA_size_ap_ack_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_alloc_HTA_size_ap_ack <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                    if (not(((ap_const_boolean_1 = ap_block_state1_io) or (ap_start = ap_const_logic_0)))) then 
                        ap_reg_ioackin_alloc_HTA_size_ap_ack <= ap_const_logic_0;
                    elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = alloc_HTA_size_ap_ack))) then 
                        ap_reg_ioackin_alloc_HTA_size_ap_ack <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_alloc_KWTA_cmd_ap_ack_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_alloc_KWTA_cmd_ap_ack <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_state28_io) and (ap_const_logic_1 = ap_CS_fsm_state28)) or ((ap_const_boolean_0 = ap_block_state33_io) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((ap_const_boolean_0 = ap_block_state17_io) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((ap_const_boolean_0 = ap_block_state21_io) and (ap_const_logic_1 = ap_CS_fsm_state21)) or ((ap_const_boolean_0 = ap_block_state16_io) and (ap_const_logic_1 = ap_CS_fsm_state16) and (brmerge_demorgan_fu_1073_p2 = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_state6_io) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
                    ap_reg_ioackin_alloc_KWTA_cmd_ap_ack <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = alloc_KWTA_cmd_ap_ack) and (ap_const_logic_1 = ap_CS_fsm_state28)) or ((ap_const_logic_1 = alloc_KWTA_cmd_ap_ack) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((ap_const_logic_1 = alloc_KWTA_cmd_ap_ack) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((ap_const_logic_1 = alloc_KWTA_cmd_ap_ack) and (ap_const_logic_1 = ap_CS_fsm_state21)) or ((ap_const_logic_1 = alloc_KWTA_cmd_ap_ack) and (ap_const_logic_1 = ap_CS_fsm_state16) and (brmerge_demorgan_fu_1073_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = alloc_KWTA_cmd_ap_ack) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
                    ap_reg_ioackin_alloc_KWTA_cmd_ap_ack <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_alloc_KWTA_free_target_ap_ack_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_alloc_KWTA_free_target_ap_ack <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_state28_io) and (ap_const_logic_1 = ap_CS_fsm_state28)) or ((ap_const_boolean_0 = ap_block_state33_io) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((ap_const_boolean_0 = ap_block_state17_io) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((ap_const_boolean_0 = ap_block_state21_io) and (ap_const_logic_1 = ap_CS_fsm_state21)) or ((ap_const_boolean_0 = ap_block_state16_io) and (ap_const_logic_1 = ap_CS_fsm_state16) and (brmerge_demorgan_fu_1073_p2 = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_state6_io) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
                    ap_reg_ioackin_alloc_KWTA_free_target_ap_ack <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = alloc_KWTA_free_target_ap_ack) and (ap_const_logic_1 = ap_CS_fsm_state28)) or ((ap_const_logic_1 = alloc_KWTA_free_target_ap_ack) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((ap_const_logic_1 = alloc_KWTA_free_target_ap_ack) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((ap_const_logic_1 = alloc_KWTA_free_target_ap_ack) and (ap_const_logic_1 = ap_CS_fsm_state21)) or ((ap_const_logic_1 = alloc_KWTA_free_target_ap_ack) and (ap_const_logic_1 = ap_CS_fsm_state16) and (brmerge_demorgan_fu_1073_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = alloc_KWTA_free_target_ap_ack) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
                    ap_reg_ioackin_alloc_KWTA_free_target_ap_ack <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_alloc_KWTA_size_ap_ack_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_alloc_KWTA_size_ap_ack <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_state28_io) and (ap_const_logic_1 = ap_CS_fsm_state28)) or ((ap_const_boolean_0 = ap_block_state33_io) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((ap_const_boolean_0 = ap_block_state17_io) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((ap_const_boolean_0 = ap_block_state21_io) and (ap_const_logic_1 = ap_CS_fsm_state21)) or ((ap_const_boolean_0 = ap_block_state16_io) and (ap_const_logic_1 = ap_CS_fsm_state16) and (brmerge_demorgan_fu_1073_p2 = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_state6_io) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
                    ap_reg_ioackin_alloc_KWTA_size_ap_ack <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = alloc_KWTA_size_ap_ack) and (ap_const_logic_1 = ap_CS_fsm_state28)) or ((ap_const_logic_1 = alloc_KWTA_size_ap_ack) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((ap_const_logic_1 = alloc_KWTA_size_ap_ack) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((ap_const_logic_1 = alloc_KWTA_size_ap_ack) and (ap_const_logic_1 = ap_CS_fsm_state21)) or ((ap_const_logic_1 = alloc_KWTA_size_ap_ack) and (ap_const_logic_1 = ap_CS_fsm_state16) and (brmerge_demorgan_fu_1073_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = alloc_KWTA_size_ap_ack) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
                    ap_reg_ioackin_alloc_KWTA_size_ap_ack <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_1_reg_506_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_8_fu_687_p2 = ap_const_lv1_1))) then 
                i_1_reg_506 <= i_5_fu_692_p2;
            elsif (((tmp_5_fu_643_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_1_reg_506 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    i_2_reg_527_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                i_2_reg_527 <= i_7_reg_1621;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                i_2_reg_527 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i_3_reg_538_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (tmp_7_fu_768_p2 = ap_const_lv1_1))) then 
                i_3_reg_538 <= ap_const_lv31_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
                i_3_reg_538 <= i_6_reg_1797;
            end if; 
        end if;
    end process;

    i_reg_495_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_5_fu_643_p2 = ap_const_lv1_1))) then 
                i_reg_495 <= i_4_fu_648_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_reg_495 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    offset_head_reg_517_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
                offset_head_reg_517 <= offset_next_reg_1784;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                offset_head_reg_517 <= offset_head_3_fu_703_p2;
            end if; 
        end if;
    end process;

    offset_tail_fu_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                                offset_tail_fu_124(31 downto 1) <= offset_new_node1_1_fu_1281_p2(31 downto 1);
            elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                                offset_tail_fu_124(31 downto 1) <= offset_new_node0_2_fu_1155_p2(31 downto 1);
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                                offset_tail_fu_124(31 downto 1) <= offset_new_node1_fu_1079_p2(31 downto 1);
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                                offset_tail_fu_124(31 downto 1) <= offset_head_3_fu_703_p2(31 downto 1);
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                HTA_heap_0_addr_10_reg_1753 <= newIndex13_cast_fu_1191_p1(11 - 1 downto 0);
                newIndex21_reg_1761 <= p_sum6_fu_1206_p2(12 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                HTA_heap_0_addr_13_reg_1740 <= newIndex18_cast_fu_1115_p1(11 - 1 downto 0);
                newIndex19_reg_1748 <= p_sum8_fu_1130_p2(12 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_cond_fu_943_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                HTA_heap_0_addr_7_reg_1679 <= newIndex9_cast_fu_981_p1(11 - 1 downto 0);
                HTA_heap_1_addr_6_reg_1684 <= newIndex10_cast_fu_1007_p1(11 - 1 downto 0);
                weight0_reg_1667 <= weight0_fu_949_p2;
                weight1_reg_1673 <= weight1_fu_954_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                HTA_heap_0_addr_8_reg_1771 <= newIndex11_cast_fu_1267_p1(11 - 1 downto 0);
                    tmp_32_cast_reg_1766(12 downto 1) <= tmp_32_cast_fu_1243_p3(12 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                HTA_heap_0_addr_reg_1513 <= newIndex2_fu_634_p1(11 - 1 downto 0);
                    tmp_4_cast_reg_1504(12 downto 1) <= tmp_4_cast_fu_617_p3(12 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state1_io) or (ap_start = ap_const_logic_0))) and (guard_variable_for_H_1_load_fu_576_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                N_2 <= tmp_1_i_fu_580_p2(31 downto 1);
                guard_variable_for_H <= ap_const_lv1_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state16_io) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                brmerge_demorgan_reg_1736 <= brmerge_demorgan_fu_1073_p2;
                    offset_tail_load_reg_1720(31 downto 1) <= offset_tail_fu_124(31 downto 1);
                    tmp_38_reg_1725(12 downto 1) <= tmp_38_fu_1047_p1(12 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
                free_target_assign_reg_1789 <= free_target_assign_fu_1421_p3;
                offset_next_reg_1784 <= offset_next_fu_1366_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (tmp_10_fu_862_p2 = ap_const_lv1_1))) then
                    i0_reg_1631(31 downto 1) <= i0_fu_878_p2(31 downto 1);
                    i1_reg_1637(31 downto 1) <= i1_fu_884_p2(31 downto 1);
                tmp_35_reg_1626 <= tmp_35_fu_874_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then
                i_6_reg_1797 <= i_6_fu_1438_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                i_7_reg_1621 <= i_7_fu_868_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                    in_list_addr_3_reg_1694(7 downto 1) <= tmp_20_fu_1012_p1(8 - 1 downto 0)(7 downto 1);
                    in_list_addr_4_reg_1705(7 downto 1) <= tmp_23_fu_1021_p1(8 - 1 downto 0)(7 downto 1);
                tmp_21_reg_1689 <= tmp_21_fu_1016_p2;
                tmp_24_reg_1700 <= tmp_24_fu_1025_p2;
                weight0_HTA_heap_loa_reg_1710 <= weight0_HTA_heap_loa_fu_1030_p3;
                weight1_1_reg_1715 <= weight1_1_fu_1037_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                newIndex17_reg_1779 <= p_sum4_fu_1341_p2(12 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                newIndex7_reg_1586 <= local_dis_0_sum2_fu_820_p2(12 downto 1);
                now_reg_1575 <= now_fu_804_p3;
                tmp_28_reg_1570 <= tmp_28_fu_800_p1;
                tmp_32_reg_1581 <= tmp_32_fu_816_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                now_dis_reg_1606 <= now_dis_fu_843_p3;
                tmp_3_reg_1601 <= tmp_3_fu_840_p1;
                tmp_6_reg_1612 <= tmp_6_fu_850_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                or_cond_reg_1663 <= or_cond_fu_943_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = alloc_KWTA_addr_ap_vld) and (ap_const_logic_1 = ap_CS_fsm_state29)) or ((ap_const_logic_1 = alloc_KWTA_addr_ap_vld) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((ap_const_logic_1 = alloc_KWTA_addr_ap_vld) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((ap_const_logic_1 = alloc_KWTA_addr_ap_vld) and (ap_const_logic_1 = ap_CS_fsm_state25)) or ((ap_const_logic_1 = alloc_KWTA_addr_ap_vld) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then
                reg_568 <= alloc_KWTA_addr;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((brmerge_demorgan_fu_1073_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state16_io) and (ap_const_logic_1 = ap_CS_fsm_state16) and (update0_fu_1057_p2 = ap_const_lv1_1)) or ((update0_fu_1057_p2 = ap_const_lv1_0) and (brmerge_demorgan_fu_1073_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state16_io) and (ap_const_logic_1 = ap_CS_fsm_state16) and (update1_fu_1068_p2 = ap_const_lv1_1)))) then
                    reg_572(31 downto 1) <= offset_tail_fu_124(31 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = alloc_HTA_addr_ap_vld) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                status_6_reg_1498 <= alloc_HTA_addr;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_7_fu_768_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                tmp_27_reg_1555 <= tmp_27_fu_774_p1;
            end if;
        end if;
    end process;
    reg_572(0) <= '0';
    tmp_4_cast_reg_1504(0) <= '0';
    i0_reg_1631(0) <= '0';
    i1_reg_1637(0) <= '1';
    in_list_addr_3_reg_1694(0) <= '0';
    in_list_addr_4_reg_1705(0) <= '1';
    offset_tail_load_reg_1720(0) <= '0';
    tmp_38_reg_1725(0) <= '0';
    tmp_32_cast_reg_1766(0) <= '0';
    offset_tail_fu_124(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, alloc_HTA_addr_ap_vld, alloc_KWTA_addr_ap_vld, ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state16, brmerge_demorgan_fu_1073_p2, ap_CS_fsm_state21, ap_CS_fsm_state17, ap_CS_fsm_state33, ap_CS_fsm_state28, ap_CS_fsm_state7, ap_CS_fsm_state25, ap_CS_fsm_state22, ap_CS_fsm_state18, ap_CS_fsm_state29, ap_block_state16_io, update0_fu_1057_p2, update1_fu_1068_p2, ap_block_state1_io, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state9, tmp_7_fu_768_p2, ap_CS_fsm_state13, tmp_10_fu_862_p2, or_cond_fu_943_p2, ap_CS_fsm_state14, ap_CS_fsm_state35, tmp_s_fu_1433_p2, tmp_5_fu_643_p2, tmp_8_fu_687_p2, ap_block_state6_io, ap_block_state17_io, ap_block_state21_io, ap_block_state28_io, ap_block_state33_io)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_const_boolean_1 = ap_block_state1_io) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = alloc_HTA_addr_ap_vld) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((tmp_5_fu_643_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_8_fu_687_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_boolean_0 = ap_block_state6_io) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = alloc_KWTA_addr_ap_vld) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (tmp_7_fu_768_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((tmp_10_fu_862_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (or_cond_fu_943_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if (((update1_fu_1068_p2 = ap_const_lv1_0) and (update0_fu_1057_p2 = ap_const_lv1_0) and (brmerge_demorgan_fu_1073_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state16_io) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                elsif (((update0_fu_1057_p2 = ap_const_lv1_0) and (brmerge_demorgan_fu_1073_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state16_io) and (ap_const_logic_1 = ap_CS_fsm_state16) and (update1_fu_1068_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                elsif (((brmerge_demorgan_fu_1073_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state16_io) and (ap_const_logic_1 = ap_CS_fsm_state16) and (update0_fu_1057_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                elsif (((ap_const_boolean_0 = ap_block_state16_io) and (ap_const_logic_1 = ap_CS_fsm_state16) and (brmerge_demorgan_fu_1073_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                if (((ap_const_boolean_0 = ap_block_state17_io) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                if (((ap_const_logic_1 = alloc_KWTA_addr_ap_vld) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state21 => 
                if (((ap_const_boolean_0 = ap_block_state21_io) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state22 => 
                if (((ap_const_logic_1 = alloc_KWTA_addr_ap_vld) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state25 => 
                if (((ap_const_logic_1 = alloc_KWTA_addr_ap_vld) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                if (((ap_const_boolean_0 = ap_block_state28_io) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state29 => 
                if (((ap_const_logic_1 = alloc_KWTA_addr_ap_vld) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                if (((ap_const_boolean_0 = ap_block_state33_io) and (ap_const_logic_1 = ap_CS_fsm_state33))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_state33;
                end if;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state35 => 
                if (((tmp_s_fu_1433_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state35))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state36;
                end if;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    HTA_heap_0_address0_assign_proc : process(ap_CS_fsm_state16, HTA_heap_0_addr_reg_1513, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state14, HTA_heap_0_addr_7_reg_1679, HTA_heap_0_addr_13_reg_1740, ap_CS_fsm_state19, HTA_heap_0_addr_10_reg_1753, ap_CS_fsm_state23, ap_CS_fsm_state26, HTA_heap_0_addr_8_reg_1771, ap_CS_fsm_state30, ap_CS_fsm_state35, tmp_5_fu_643_p2, newIndex3_cast_fu_677_p1, newIndex4_cast_fu_737_p1, newIndex6_cast_fu_794_p1, newIndex7_cast_fu_835_p1, newIndex8_cast_fu_925_p1, newIndex9_cast_fu_981_p1, newIndex20_cast_fu_1124_p1, ap_CS_fsm_state20, newIndex14_cast_fu_1200_p1, ap_CS_fsm_state24, newIndex12_cast_fu_1275_p1, newIndex15_cast_fu_1316_p1, newIndex_cast_fu_1463_p1, tmp_4_fu_658_p1, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            HTA_heap_0_address0 <= newIndex_cast_fu_1463_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            HTA_heap_0_address0 <= newIndex15_cast_fu_1316_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            HTA_heap_0_address0 <= HTA_heap_0_addr_8_reg_1771;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            HTA_heap_0_address0 <= newIndex12_cast_fu_1275_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            HTA_heap_0_address0 <= HTA_heap_0_addr_10_reg_1753;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            HTA_heap_0_address0 <= newIndex14_cast_fu_1200_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            HTA_heap_0_address0 <= HTA_heap_0_addr_13_reg_1740;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            HTA_heap_0_address0 <= newIndex20_cast_fu_1124_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            HTA_heap_0_address0 <= HTA_heap_0_addr_7_reg_1679;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            HTA_heap_0_address0 <= newIndex9_cast_fu_981_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            HTA_heap_0_address0 <= newIndex8_cast_fu_925_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            HTA_heap_0_address0 <= newIndex7_cast_fu_835_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            HTA_heap_0_address0 <= newIndex6_cast_fu_794_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            HTA_heap_0_address0 <= newIndex4_cast_fu_737_p1(11 - 1 downto 0);
        elsif (((tmp_5_fu_643_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            HTA_heap_0_address0 <= HTA_heap_0_addr_reg_1513;
        elsif (((tmp_4_fu_658_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_5_fu_643_p2 = ap_const_lv1_1))) then 
            HTA_heap_0_address0 <= newIndex3_cast_fu_677_p1(11 - 1 downto 0);
        else 
            HTA_heap_0_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    HTA_heap_0_ce0_assign_proc : process(ap_CS_fsm_state16, ap_block_state16_io, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state19, ap_CS_fsm_state23, ap_CS_fsm_state26, ap_CS_fsm_state30, ap_CS_fsm_state35, tmp_5_fu_643_p2, ap_CS_fsm_state20, ap_CS_fsm_state24, tmp_4_fu_658_p1, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or ((tmp_5_fu_643_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((tmp_4_fu_658_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_5_fu_643_p2 = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_state16_io) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
            HTA_heap_0_ce0 <= ap_const_logic_1;
        else 
            HTA_heap_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    HTA_heap_0_d0_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state4, ap_CS_fsm_state8, i0_reg_1631, i1_reg_1637, weight0_HTA_heap_loa_reg_1710, ap_CS_fsm_state19, ap_CS_fsm_state23, ap_CS_fsm_state26, ap_CS_fsm_state30, tmp_5_fu_643_p2, ap_CS_fsm_state20, ap_CS_fsm_state24, offset_new_node1_fu_1079_p2, offset_new_node0_2_fu_1155_p2, tmp_4_fu_658_p1, offset_new_node0_fu_1231_p2, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            HTA_heap_0_d0 <= offset_new_node0_fu_1231_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            HTA_heap_0_d0 <= i0_reg_1631;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            HTA_heap_0_d0 <= offset_new_node0_2_fu_1155_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            HTA_heap_0_d0 <= i1_reg_1637;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            HTA_heap_0_d0 <= offset_new_node1_fu_1079_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            HTA_heap_0_d0 <= weight0_HTA_heap_loa_reg_1710;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or ((tmp_5_fu_643_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            HTA_heap_0_d0 <= ap_const_lv32_0;
        elsif (((tmp_4_fu_658_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_5_fu_643_p2 = ap_const_lv1_1))) then 
            HTA_heap_0_d0 <= ap_const_lv32_2710;
        else 
            HTA_heap_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    HTA_heap_0_we0_assign_proc : process(ap_CS_fsm_state16, ap_block_state16_io, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state19, ap_CS_fsm_state23, ap_CS_fsm_state26, ap_CS_fsm_state30, tmp_5_fu_643_p2, ap_CS_fsm_state20, ap_CS_fsm_state24, tmp_4_fu_658_p1, tmp_49_fu_1120_p1, tmp_44_fu_1196_p1, tmp_41_fu_1272_p1, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_const_logic_1 = ap_CS_fsm_state26) and (tmp_41_fu_1272_p1 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (tmp_44_fu_1196_p1 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state19) and (tmp_49_fu_1120_p1 = ap_const_lv1_1)) or ((tmp_5_fu_643_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((tmp_4_fu_658_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_5_fu_643_p2 = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_state16_io) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
            HTA_heap_0_we0 <= ap_const_logic_1;
        else 
            HTA_heap_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    HTA_heap_1_address0_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state14, HTA_heap_1_addr_6_reg_1684, ap_CS_fsm_state19, ap_CS_fsm_state23, ap_CS_fsm_state26, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state31, newIndex3_cast_fu_677_p1, newIndex5_cast_fu_758_p1, newIndex6_cast_fu_794_p1, newIndex7_cast_fu_835_p1, newIndex8_cast_fu_925_p1, newIndex10_cast_fu_1007_p1, newIndex20_cast_fu_1124_p1, newIndex19_cast_fu_1151_p1, ap_CS_fsm_state20, newIndex14_cast_fu_1200_p1, newIndex21_cast_fu_1227_p1, ap_CS_fsm_state24, newIndex12_cast_fu_1275_p1, newIndex16_cast_fu_1336_p1, newIndex17_cast_fu_1362_p1, newIndex_cast_fu_1463_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            HTA_heap_1_address0 <= newIndex_cast_fu_1463_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            HTA_heap_1_address0 <= newIndex17_cast_fu_1362_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            HTA_heap_1_address0 <= newIndex16_cast_fu_1336_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            HTA_heap_1_address0 <= newIndex12_cast_fu_1275_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            HTA_heap_1_address0 <= newIndex21_cast_fu_1227_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            HTA_heap_1_address0 <= newIndex14_cast_fu_1200_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            HTA_heap_1_address0 <= newIndex19_cast_fu_1151_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            HTA_heap_1_address0 <= newIndex20_cast_fu_1124_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            HTA_heap_1_address0 <= HTA_heap_1_addr_6_reg_1684;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            HTA_heap_1_address0 <= newIndex10_cast_fu_1007_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            HTA_heap_1_address0 <= newIndex8_cast_fu_925_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            HTA_heap_1_address0 <= newIndex7_cast_fu_835_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            HTA_heap_1_address0 <= newIndex6_cast_fu_794_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            HTA_heap_1_address0 <= newIndex5_cast_fu_758_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            HTA_heap_1_address0 <= newIndex3_cast_fu_677_p1(11 - 1 downto 0);
        else 
            HTA_heap_1_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    HTA_heap_1_ce0_assign_proc : process(ap_CS_fsm_state16, ap_block_state16_io, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state19, ap_CS_fsm_state23, ap_CS_fsm_state26, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state31, ap_CS_fsm_state20, ap_CS_fsm_state24)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_boolean_0 = ap_block_state16_io) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
            HTA_heap_1_ce0 <= ap_const_logic_1;
        else 
            HTA_heap_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    HTA_heap_1_d0_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state4, ap_CS_fsm_state8, weight1_1_reg_1715, ap_CS_fsm_state19, ap_CS_fsm_state23, ap_CS_fsm_state26, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state20, ap_CS_fsm_state24, offset_new_node1_fu_1079_p2, offset_new_node0_2_fu_1155_p2, offset_new_node1_1_fu_1281_p2, offset_new_node0_fu_1231_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            HTA_heap_1_d0 <= offset_new_node1_1_fu_1281_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            HTA_heap_1_d0 <= offset_new_node0_fu_1231_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            HTA_heap_1_d0 <= offset_new_node0_2_fu_1155_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            HTA_heap_1_d0 <= offset_new_node1_fu_1079_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            HTA_heap_1_d0 <= weight1_1_reg_1715;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            HTA_heap_1_d0 <= ap_const_lv32_FFFFFFFF;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            HTA_heap_1_d0 <= ap_const_lv32_2710;
        else 
            HTA_heap_1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    HTA_heap_1_we0_assign_proc : process(ap_CS_fsm_state16, ap_block_state16_io, ap_CS_fsm_state4, ap_CS_fsm_state8, or_cond_reg_1663, brmerge_demorgan_reg_1736, ap_CS_fsm_state19, ap_CS_fsm_state23, ap_CS_fsm_state26, ap_CS_fsm_state30, tmp_5_fu_643_p2, ap_CS_fsm_state31, ap_CS_fsm_state20, ap_CS_fsm_state24, tmp_4_fu_658_p1, tmp_49_fu_1120_p1, tmp_44_fu_1196_p1, tmp_41_fu_1272_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state8) or ((or_cond_reg_1663 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state31) and (brmerge_demorgan_reg_1736 = ap_const_lv1_1)) or ((tmp_41_fu_1272_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state26)) or ((tmp_44_fu_1196_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state23)) or ((tmp_49_fu_1120_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_4_fu_658_p1 = ap_const_lv1_1) and (tmp_5_fu_643_p2 = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_state16_io) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
            HTA_heap_1_we0 <= ap_const_logic_1;
        else 
            HTA_heap_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    KWTA_heap_0_sum1_fu_778_p2 <= std_logic_vector(unsigned(ap_const_lv13_7D0) + unsigned(tmp_27_fu_774_p1));
    KWTA_heap_0_sum2_fu_1251_p2 <= std_logic_vector(unsigned(ap_const_lv13_7D0) + unsigned(tmp_32_cast_fu_1243_p3));
    KWTA_heap_0_sum3_fu_1300_p2 <= std_logic_vector(unsigned(ap_const_lv13_7D0) + unsigned(tmp_33_cast_fu_1292_p3));
    KWTA_heap_0_sum4_fu_1175_p2 <= std_logic_vector(unsigned(ap_const_lv13_7D0) + unsigned(tmp_34_cast_fu_1167_p3));
    KWTA_heap_0_sum5_fu_1099_p2 <= std_logic_vector(unsigned(ap_const_lv13_7D0) + unsigned(tmp_35_cast_fu_1091_p3));
    KWTA_heap_0_sum_fu_721_p2 <= std_logic_vector(unsigned(ap_const_lv13_7D0) + unsigned(tmp_cast_fu_713_p3));

    alloc_HTA_addr_ap_ack_assign_proc : process(alloc_HTA_addr_ap_vld, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = alloc_HTA_addr_ap_vld) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            alloc_HTA_addr_ap_ack <= ap_const_logic_1;
        else 
            alloc_HTA_addr_ap_ack <= ap_const_logic_0;
        end if; 
    end process;


    alloc_HTA_addr_blk_n_assign_proc : process(alloc_HTA_addr_ap_vld, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            alloc_HTA_addr_blk_n <= alloc_HTA_addr_ap_vld;
        else 
            alloc_HTA_addr_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    alloc_HTA_cmd <= ap_const_lv8_2;

    alloc_HTA_cmd_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_reg_ioackin_alloc_HTA_cmd_ap_ack)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_reg_ioackin_alloc_HTA_cmd_ap_ack = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            alloc_HTA_cmd_ap_vld <= ap_const_logic_1;
        else 
            alloc_HTA_cmd_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    alloc_HTA_cmd_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, alloc_HTA_cmd_ap_ack)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            alloc_HTA_cmd_blk_n <= alloc_HTA_cmd_ap_ack;
        else 
            alloc_HTA_cmd_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    alloc_HTA_free_target <= ap_const_lv32_0;

    alloc_HTA_free_target_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_reg_ioackin_alloc_HTA_free_target_ap_ack)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_reg_ioackin_alloc_HTA_free_target_ap_ack = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            alloc_HTA_free_target_ap_vld <= ap_const_logic_1;
        else 
            alloc_HTA_free_target_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    alloc_HTA_free_target_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, alloc_HTA_free_target_ap_ack)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            alloc_HTA_free_target_blk_n <= alloc_HTA_free_target_ap_ack;
        else 
            alloc_HTA_free_target_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    alloc_HTA_size <= n;

    alloc_HTA_size_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_reg_ioackin_alloc_HTA_size_ap_ack)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_reg_ioackin_alloc_HTA_size_ap_ack = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            alloc_HTA_size_ap_vld <= ap_const_logic_1;
        else 
            alloc_HTA_size_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    alloc_HTA_size_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, alloc_HTA_size_ap_ack)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            alloc_HTA_size_blk_n <= alloc_HTA_size_ap_ack;
        else 
            alloc_HTA_size_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    alloc_KWTA_addr_ap_ack_assign_proc : process(alloc_KWTA_addr_ap_vld, ap_CS_fsm_state7, ap_CS_fsm_state25, ap_CS_fsm_state22, ap_CS_fsm_state18, ap_CS_fsm_state29)
    begin
        if ((((ap_const_logic_1 = alloc_KWTA_addr_ap_vld) and (ap_const_logic_1 = ap_CS_fsm_state29)) or ((ap_const_logic_1 = alloc_KWTA_addr_ap_vld) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((ap_const_logic_1 = alloc_KWTA_addr_ap_vld) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((ap_const_logic_1 = alloc_KWTA_addr_ap_vld) and (ap_const_logic_1 = ap_CS_fsm_state25)) or ((ap_const_logic_1 = alloc_KWTA_addr_ap_vld) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            alloc_KWTA_addr_ap_ack <= ap_const_logic_1;
        else 
            alloc_KWTA_addr_ap_ack <= ap_const_logic_0;
        end if; 
    end process;


    alloc_KWTA_addr_blk_n_assign_proc : process(alloc_KWTA_addr_ap_vld, ap_CS_fsm_state7, ap_CS_fsm_state25, ap_CS_fsm_state22, ap_CS_fsm_state18, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            alloc_KWTA_addr_blk_n <= alloc_KWTA_addr_ap_vld;
        else 
            alloc_KWTA_addr_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    alloc_KWTA_cmd_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state16, brmerge_demorgan_fu_1073_p2, ap_CS_fsm_state21, ap_CS_fsm_state17, ap_CS_fsm_state33, ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            alloc_KWTA_cmd <= ap_const_lv8_3;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_logic_1 = ap_CS_fsm_state16) and (brmerge_demorgan_fu_1073_p2 = ap_const_lv1_1)))) then 
            alloc_KWTA_cmd <= ap_const_lv8_2;
        else 
            alloc_KWTA_cmd <= "XXXXXXXX";
        end if; 
    end process;


    alloc_KWTA_cmd_ap_vld_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state16, brmerge_demorgan_fu_1073_p2, ap_CS_fsm_state21, ap_CS_fsm_state17, ap_CS_fsm_state33, ap_CS_fsm_state28, ap_reg_ioackin_alloc_KWTA_cmd_ap_ack)
    begin
        if ((((ap_reg_ioackin_alloc_KWTA_cmd_ap_ack = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state28)) or ((ap_reg_ioackin_alloc_KWTA_cmd_ap_ack = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((ap_reg_ioackin_alloc_KWTA_cmd_ap_ack = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((ap_reg_ioackin_alloc_KWTA_cmd_ap_ack = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state21)) or ((ap_reg_ioackin_alloc_KWTA_cmd_ap_ack = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state16) and (brmerge_demorgan_fu_1073_p2 = ap_const_lv1_1)) or ((ap_reg_ioackin_alloc_KWTA_cmd_ap_ack = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            alloc_KWTA_cmd_ap_vld <= ap_const_logic_1;
        else 
            alloc_KWTA_cmd_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    alloc_KWTA_cmd_blk_n_assign_proc : process(alloc_KWTA_cmd_ap_ack, ap_CS_fsm_state6, ap_CS_fsm_state16, brmerge_demorgan_fu_1073_p2, ap_CS_fsm_state21, ap_CS_fsm_state17, ap_CS_fsm_state33, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_logic_1 = ap_CS_fsm_state16) and (brmerge_demorgan_fu_1073_p2 = ap_const_lv1_1)))) then 
            alloc_KWTA_cmd_blk_n <= alloc_KWTA_cmd_ap_ack;
        else 
            alloc_KWTA_cmd_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    alloc_KWTA_free_target_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state16, brmerge_demorgan_fu_1073_p2, ap_CS_fsm_state21, ap_CS_fsm_state17, ap_CS_fsm_state33, ap_CS_fsm_state28, free_target_assign_reg_1789)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            alloc_KWTA_free_target <= free_target_assign_reg_1789;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_logic_1 = ap_CS_fsm_state16) and (brmerge_demorgan_fu_1073_p2 = ap_const_lv1_1)))) then 
            alloc_KWTA_free_target <= ap_const_lv32_0;
        else 
            alloc_KWTA_free_target <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    alloc_KWTA_free_target_ap_vld_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state16, brmerge_demorgan_fu_1073_p2, ap_CS_fsm_state21, ap_CS_fsm_state17, ap_CS_fsm_state33, ap_CS_fsm_state28, ap_reg_ioackin_alloc_KWTA_free_target_ap_ack)
    begin
        if ((((ap_reg_ioackin_alloc_KWTA_free_target_ap_ack = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state28)) or ((ap_reg_ioackin_alloc_KWTA_free_target_ap_ack = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((ap_reg_ioackin_alloc_KWTA_free_target_ap_ack = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((ap_reg_ioackin_alloc_KWTA_free_target_ap_ack = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state21)) or ((ap_reg_ioackin_alloc_KWTA_free_target_ap_ack = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state16) and (brmerge_demorgan_fu_1073_p2 = ap_const_lv1_1)) or ((ap_reg_ioackin_alloc_KWTA_free_target_ap_ack = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            alloc_KWTA_free_target_ap_vld <= ap_const_logic_1;
        else 
            alloc_KWTA_free_target_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    alloc_KWTA_free_target_blk_n_assign_proc : process(alloc_KWTA_free_target_ap_ack, ap_CS_fsm_state6, ap_CS_fsm_state16, brmerge_demorgan_fu_1073_p2, ap_CS_fsm_state21, ap_CS_fsm_state17, ap_CS_fsm_state33, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_logic_1 = ap_CS_fsm_state16) and (brmerge_demorgan_fu_1073_p2 = ap_const_lv1_1)))) then 
            alloc_KWTA_free_target_blk_n <= alloc_KWTA_free_target_ap_ack;
        else 
            alloc_KWTA_free_target_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    alloc_KWTA_size_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state16, brmerge_demorgan_fu_1073_p2, ap_CS_fsm_state21, ap_CS_fsm_state17, ap_CS_fsm_state33, ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            alloc_KWTA_size <= ap_const_lv32_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_logic_1 = ap_CS_fsm_state16) and (brmerge_demorgan_fu_1073_p2 = ap_const_lv1_1)))) then 
            alloc_KWTA_size <= ap_const_lv32_1;
        else 
            alloc_KWTA_size <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    alloc_KWTA_size_ap_vld_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state16, brmerge_demorgan_fu_1073_p2, ap_CS_fsm_state21, ap_CS_fsm_state17, ap_CS_fsm_state33, ap_CS_fsm_state28, ap_reg_ioackin_alloc_KWTA_size_ap_ack)
    begin
        if ((((ap_reg_ioackin_alloc_KWTA_size_ap_ack = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state28)) or ((ap_reg_ioackin_alloc_KWTA_size_ap_ack = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((ap_reg_ioackin_alloc_KWTA_size_ap_ack = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((ap_reg_ioackin_alloc_KWTA_size_ap_ack = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state21)) or ((ap_reg_ioackin_alloc_KWTA_size_ap_ack = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state16) and (brmerge_demorgan_fu_1073_p2 = ap_const_lv1_1)) or ((ap_reg_ioackin_alloc_KWTA_size_ap_ack = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            alloc_KWTA_size_ap_vld <= ap_const_logic_1;
        else 
            alloc_KWTA_size_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    alloc_KWTA_size_blk_n_assign_proc : process(alloc_KWTA_size_ap_ack, ap_CS_fsm_state6, ap_CS_fsm_state16, brmerge_demorgan_fu_1073_p2, ap_CS_fsm_state21, ap_CS_fsm_state17, ap_CS_fsm_state33, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_logic_1 = ap_CS_fsm_state16) and (brmerge_demorgan_fu_1073_p2 = ap_const_lv1_1)))) then 
            alloc_KWTA_size_blk_n <= alloc_KWTA_size_ap_ack;
        else 
            alloc_KWTA_size_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state16_io_assign_proc : process(brmerge_demorgan_fu_1073_p2, ap_sig_ioackin_alloc_KWTA_cmd_ap_ack, ap_sig_ioackin_alloc_KWTA_size_ap_ack, ap_sig_ioackin_alloc_KWTA_free_target_ap_ack)
    begin
                ap_block_state16_io <= (((ap_sig_ioackin_alloc_KWTA_free_target_ap_ack = ap_const_logic_0) and (brmerge_demorgan_fu_1073_p2 = ap_const_lv1_1)) or ((ap_sig_ioackin_alloc_KWTA_size_ap_ack = ap_const_logic_0) and (brmerge_demorgan_fu_1073_p2 = ap_const_lv1_1)) or ((ap_sig_ioackin_alloc_KWTA_cmd_ap_ack = ap_const_logic_0) and (brmerge_demorgan_fu_1073_p2 = ap_const_lv1_1)));
    end process;


    ap_block_state17_io_assign_proc : process(ap_sig_ioackin_alloc_KWTA_cmd_ap_ack, ap_sig_ioackin_alloc_KWTA_size_ap_ack, ap_sig_ioackin_alloc_KWTA_free_target_ap_ack)
    begin
                ap_block_state17_io <= ((ap_sig_ioackin_alloc_KWTA_free_target_ap_ack = ap_const_logic_0) or (ap_sig_ioackin_alloc_KWTA_size_ap_ack = ap_const_logic_0) or (ap_sig_ioackin_alloc_KWTA_cmd_ap_ack = ap_const_logic_0));
    end process;


    ap_block_state1_io_assign_proc : process(ap_sig_ioackin_alloc_HTA_cmd_ap_ack, ap_sig_ioackin_alloc_HTA_size_ap_ack, ap_sig_ioackin_alloc_HTA_free_target_ap_ack)
    begin
                ap_block_state1_io <= ((ap_sig_ioackin_alloc_HTA_free_target_ap_ack = ap_const_logic_0) or (ap_sig_ioackin_alloc_HTA_size_ap_ack = ap_const_logic_0) or (ap_sig_ioackin_alloc_HTA_cmd_ap_ack = ap_const_logic_0));
    end process;


    ap_block_state21_io_assign_proc : process(ap_sig_ioackin_alloc_KWTA_cmd_ap_ack, ap_sig_ioackin_alloc_KWTA_size_ap_ack, ap_sig_ioackin_alloc_KWTA_free_target_ap_ack)
    begin
                ap_block_state21_io <= ((ap_sig_ioackin_alloc_KWTA_free_target_ap_ack = ap_const_logic_0) or (ap_sig_ioackin_alloc_KWTA_size_ap_ack = ap_const_logic_0) or (ap_sig_ioackin_alloc_KWTA_cmd_ap_ack = ap_const_logic_0));
    end process;


    ap_block_state28_io_assign_proc : process(ap_sig_ioackin_alloc_KWTA_cmd_ap_ack, ap_sig_ioackin_alloc_KWTA_size_ap_ack, ap_sig_ioackin_alloc_KWTA_free_target_ap_ack)
    begin
                ap_block_state28_io <= ((ap_sig_ioackin_alloc_KWTA_free_target_ap_ack = ap_const_logic_0) or (ap_sig_ioackin_alloc_KWTA_size_ap_ack = ap_const_logic_0) or (ap_sig_ioackin_alloc_KWTA_cmd_ap_ack = ap_const_logic_0));
    end process;


    ap_block_state33_io_assign_proc : process(ap_sig_ioackin_alloc_KWTA_cmd_ap_ack, ap_sig_ioackin_alloc_KWTA_size_ap_ack, ap_sig_ioackin_alloc_KWTA_free_target_ap_ack)
    begin
                ap_block_state33_io <= ((ap_sig_ioackin_alloc_KWTA_free_target_ap_ack = ap_const_logic_0) or (ap_sig_ioackin_alloc_KWTA_size_ap_ack = ap_const_logic_0) or (ap_sig_ioackin_alloc_KWTA_cmd_ap_ack = ap_const_logic_0));
    end process;


    ap_block_state6_io_assign_proc : process(ap_sig_ioackin_alloc_KWTA_cmd_ap_ack, ap_sig_ioackin_alloc_KWTA_size_ap_ack, ap_sig_ioackin_alloc_KWTA_free_target_ap_ack)
    begin
                ap_block_state6_io <= ((ap_sig_ioackin_alloc_KWTA_free_target_ap_ack = ap_const_logic_0) or (ap_sig_ioackin_alloc_KWTA_size_ap_ack = ap_const_logic_0) or (ap_sig_ioackin_alloc_KWTA_cmd_ap_ack = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state35, tmp_s_fu_1433_p2)
    begin
        if (((tmp_s_fu_1433_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state35))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state35, tmp_s_fu_1433_p2)
    begin
        if (((tmp_s_fu_1433_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state35))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_ioackin_alloc_HTA_cmd_ap_ack_assign_proc : process(alloc_HTA_cmd_ap_ack, ap_reg_ioackin_alloc_HTA_cmd_ap_ack)
    begin
        if ((ap_reg_ioackin_alloc_HTA_cmd_ap_ack = ap_const_logic_0)) then 
            ap_sig_ioackin_alloc_HTA_cmd_ap_ack <= alloc_HTA_cmd_ap_ack;
        else 
            ap_sig_ioackin_alloc_HTA_cmd_ap_ack <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_alloc_HTA_free_target_ap_ack_assign_proc : process(alloc_HTA_free_target_ap_ack, ap_reg_ioackin_alloc_HTA_free_target_ap_ack)
    begin
        if ((ap_reg_ioackin_alloc_HTA_free_target_ap_ack = ap_const_logic_0)) then 
            ap_sig_ioackin_alloc_HTA_free_target_ap_ack <= alloc_HTA_free_target_ap_ack;
        else 
            ap_sig_ioackin_alloc_HTA_free_target_ap_ack <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_alloc_HTA_size_ap_ack_assign_proc : process(alloc_HTA_size_ap_ack, ap_reg_ioackin_alloc_HTA_size_ap_ack)
    begin
        if ((ap_reg_ioackin_alloc_HTA_size_ap_ack = ap_const_logic_0)) then 
            ap_sig_ioackin_alloc_HTA_size_ap_ack <= alloc_HTA_size_ap_ack;
        else 
            ap_sig_ioackin_alloc_HTA_size_ap_ack <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_alloc_KWTA_cmd_ap_ack_assign_proc : process(alloc_KWTA_cmd_ap_ack, ap_reg_ioackin_alloc_KWTA_cmd_ap_ack)
    begin
        if ((ap_reg_ioackin_alloc_KWTA_cmd_ap_ack = ap_const_logic_0)) then 
            ap_sig_ioackin_alloc_KWTA_cmd_ap_ack <= alloc_KWTA_cmd_ap_ack;
        else 
            ap_sig_ioackin_alloc_KWTA_cmd_ap_ack <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_alloc_KWTA_free_target_ap_ack_assign_proc : process(alloc_KWTA_free_target_ap_ack, ap_reg_ioackin_alloc_KWTA_free_target_ap_ack)
    begin
        if ((ap_reg_ioackin_alloc_KWTA_free_target_ap_ack = ap_const_logic_0)) then 
            ap_sig_ioackin_alloc_KWTA_free_target_ap_ack <= alloc_KWTA_free_target_ap_ack;
        else 
            ap_sig_ioackin_alloc_KWTA_free_target_ap_ack <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_alloc_KWTA_size_ap_ack_assign_proc : process(alloc_KWTA_size_ap_ack, ap_reg_ioackin_alloc_KWTA_size_ap_ack)
    begin
        if ((ap_reg_ioackin_alloc_KWTA_size_ap_ack = ap_const_logic_0)) then 
            ap_sig_ioackin_alloc_KWTA_size_ap_ack <= alloc_KWTA_size_ap_ack;
        else 
            ap_sig_ioackin_alloc_KWTA_size_ap_ack <= ap_const_logic_1;
        end if; 
    end process;

    brmerge_demorgan_fu_1073_p2 <= (update1_fu_1068_p2 and update0_fu_1057_p2);
    dis_output_address0 <= tmp_11_fu_1469_p1(8 - 1 downto 0);

    dis_output_ce0_assign_proc : process(ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            dis_output_ce0 <= ap_const_logic_1;
        else 
            dis_output_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dis_output_d0 <= 
        HTA_heap_1_q0 when (tmp_34_fu_1474_p1(0) = '1') else 
        HTA_heap_0_q0;

    dis_output_we0_assign_proc : process(ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            dis_output_we0 <= ap_const_logic_1;
        else 
            dis_output_we0 <= ap_const_logic_0;
        end if; 
    end process;

        extLd_fu_858_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(N_2),32));

    free_target_assign_fu_1421_p3 <= 
        p_neg_t_fu_1401_p2 when (tmp_37_fu_1373_p3(0) = '1') else 
        tmp_19_fu_1417_p1;
    grp_fu_553_p2 <= std_logic_vector(unsigned(ap_const_lv13_7D1) + unsigned(tmp_38_reg_1725));
    grp_fu_558_p4 <= grp_fu_553_p2(12 downto 1);
    guard_variable_for_H_1_load_fu_576_p1 <= guard_variable_for_H;
    i0_fu_878_p2 <= std_logic_vector(shift_left(unsigned(i_2_reg_527),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    i1_fu_884_p2 <= (i0_fu_878_p2 or ap_const_lv32_1);
    i_1_cast_fu_683_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_506),32));
    i_3_cast_fu_1429_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_reg_538),32));
    i_4_fu_648_p2 <= std_logic_vector(unsigned(i_reg_495) + unsigned(ap_const_lv31_1));
    i_5_fu_692_p2 <= std_logic_vector(unsigned(i_1_reg_506) + unsigned(ap_const_lv31_1));
    i_6_fu_1438_p2 <= std_logic_vector(unsigned(i_3_reg_538) + unsigned(ap_const_lv31_1));
    i_7_fu_868_p2 <= std_logic_vector(unsigned(i_2_reg_527) + unsigned(ap_const_lv32_1));
    i_cast_fu_639_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_495),32));

    in_list_address0_assign_proc : process(ap_CS_fsm_state5, tmp_3_reg_1601, ap_CS_fsm_state15, in_list_addr_3_reg_1694, ap_CS_fsm_state30, tmp_8_fu_687_p2, ap_CS_fsm_state34, tmp_9_fu_698_p1, tmp_20_fu_1012_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            in_list_address0 <= tmp_3_reg_1601(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            in_list_address0 <= in_list_addr_3_reg_1694;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            in_list_address0 <= tmp_20_fu_1012_p1(8 - 1 downto 0);
        elsif (((tmp_8_fu_687_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            in_list_address0 <= ap_const_lv64_0(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_8_fu_687_p2 = ap_const_lv1_1))) then 
            in_list_address0 <= tmp_9_fu_698_p1(8 - 1 downto 0);
        else 
            in_list_address0 <= "XXXXXXXX";
        end if; 
    end process;


    in_list_address1_assign_proc : process(ap_CS_fsm_state15, in_list_addr_3_reg_1694, in_list_addr_4_reg_1705, ap_CS_fsm_state30, tmp_23_fu_1021_p1, ap_CS_fsm_state20, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            in_list_address1 <= in_list_addr_3_reg_1694;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            in_list_address1 <= in_list_addr_4_reg_1705;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            in_list_address1 <= tmp_23_fu_1021_p1(8 - 1 downto 0);
        else 
            in_list_address1 <= "XXXXXXXX";
        end if; 
    end process;


    in_list_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state15, ap_CS_fsm_state30, tmp_8_fu_687_p2, ap_CS_fsm_state34)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state15) or ((tmp_8_fu_687_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_8_fu_687_p2 = ap_const_lv1_1)))) then 
            in_list_ce0 <= ap_const_logic_1;
        else 
            in_list_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    in_list_ce1_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state30, ap_CS_fsm_state20, ap_CS_fsm_state24)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            in_list_ce1 <= ap_const_logic_1;
        else 
            in_list_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    in_list_d0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state30, tmp_8_fu_687_p2, ap_CS_fsm_state34)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or ((tmp_8_fu_687_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            in_list_d0 <= ap_const_lv1_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state34) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_8_fu_687_p2 = ap_const_lv1_1)))) then 
            in_list_d0 <= ap_const_lv1_0;
        else 
            in_list_d0 <= "X";
        end if; 
    end process;


    in_list_we0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state30, tmp_8_fu_687_p2, ap_CS_fsm_state34)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state30) or ((tmp_8_fu_687_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_8_fu_687_p2 = ap_const_lv1_1)))) then 
            in_list_we0 <= ap_const_logic_1;
        else 
            in_list_we0 <= ap_const_logic_0;
        end if; 
    end process;


    in_list_we1_assign_proc : process(ap_CS_fsm_state30, ap_CS_fsm_state20, ap_CS_fsm_state24)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            in_list_we1 <= ap_const_logic_1;
        else 
            in_list_we1 <= ap_const_logic_0;
        end if; 
    end process;

    local_dis_0_sum1_fu_662_p2 <= std_logic_vector(unsigned(tmp_1_fu_654_p1) + unsigned(tmp_4_cast_reg_1504));
    local_dis_0_sum2_fu_820_p2 <= std_logic_vector(unsigned(tmp_4_cast_reg_1504) + unsigned(tmp_31_fu_812_p1));
    local_dis_0_sum6_fu_966_p2 <= std_logic_vector(unsigned(tmp_4_cast_reg_1504) + unsigned(tmp_23_cast_fu_959_p3));
    local_dis_0_sum7_fu_992_p2 <= std_logic_vector(unsigned(tmp_4_cast_reg_1504) + unsigned(tmp_26_cast_fu_986_p2));
    local_dis_0_sum_fu_1448_p2 <= std_logic_vector(unsigned(tmp_33_fu_1444_p1) + unsigned(tmp_4_cast_reg_1504));
    map_r_address0 <= tmp_13_fu_895_p1(15 - 1 downto 0);
    map_r_address1 <= tmp_15_fu_905_p1(15 - 1 downto 0);

    map_r_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            map_r_ce0 <= ap_const_logic_1;
        else 
            map_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    map_r_ce1_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            map_r_ce1 <= ap_const_logic_1;
        else 
            map_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    newIndex10_cast_fu_1007_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(newIndex10_fu_997_p4),64));
    newIndex10_fu_997_p4 <= local_dis_0_sum7_fu_992_p2(12 downto 1);
    newIndex11_cast_fu_1267_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(newIndex11_fu_1257_p4),64));
    newIndex11_fu_1257_p4 <= KWTA_heap_0_sum2_fu_1251_p2(12 downto 1);
    newIndex12_cast_fu_1275_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_558_p4),64));
    newIndex13_cast_fu_1191_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(newIndex13_fu_1181_p4),64));
    newIndex13_fu_1181_p4 <= KWTA_heap_0_sum4_fu_1175_p2(12 downto 1);
    newIndex14_cast_fu_1200_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_558_p4),64));
    newIndex15_cast_fu_1316_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(newIndex15_fu_1306_p4),64));
    newIndex15_fu_1306_p4 <= KWTA_heap_0_sum3_fu_1300_p2(12 downto 1);
    newIndex16_cast_fu_1336_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(newIndex16_fu_1326_p4),64));
    newIndex16_fu_1326_p4 <= p_sum2_fu_1321_p2(12 downto 1);
    newIndex17_cast_fu_1362_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(newIndex17_reg_1779),64));
    newIndex18_cast_fu_1115_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(newIndex18_fu_1105_p4),64));
    newIndex18_fu_1105_p4 <= KWTA_heap_0_sum5_fu_1099_p2(12 downto 1);
    newIndex19_cast_fu_1151_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(newIndex19_reg_1748),64));
    newIndex1_fu_625_p4 <= status_6_reg_1498(19 downto 1);
    newIndex20_cast_fu_1124_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_558_p4),64));
    newIndex21_cast_fu_1227_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(newIndex21_reg_1761),64));
    newIndex2_fu_634_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(newIndex1_fu_625_p4),64));
    newIndex3_cast_fu_677_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(newIndex3_fu_667_p4),64));
    newIndex3_fu_667_p4 <= local_dis_0_sum1_fu_662_p2(12 downto 1);
    newIndex4_cast_fu_737_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(newIndex4_fu_727_p4),64));
    newIndex4_fu_727_p4 <= KWTA_heap_0_sum_fu_721_p2(12 downto 1);
    newIndex5_cast_fu_758_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(newIndex5_fu_748_p4),64));
    newIndex5_fu_748_p4 <= p_sum_fu_742_p2(12 downto 1);
    newIndex6_cast_fu_794_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(newIndex6_fu_784_p4),64));
    newIndex6_fu_784_p4 <= KWTA_heap_0_sum1_fu_778_p2(12 downto 1);
    newIndex7_cast_fu_835_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(newIndex7_reg_1586),64));
    newIndex8_cast_fu_925_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(newIndex8_fu_915_p4),64));
    newIndex8_fu_915_p4 <= p_sum3_fu_910_p2(12 downto 1);
    newIndex9_cast_fu_981_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(newIndex9_fu_971_p4),64));
    newIndex9_fu_971_p4 <= local_dis_0_sum6_fu_966_p2(12 downto 1);
    newIndex_cast_fu_1463_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(newIndex_fu_1453_p4),64));
    newIndex_fu_1453_p4 <= local_dis_0_sum_fu_1448_p2(12 downto 1);
    now_dis_fu_843_p3 <= 
        HTA_heap_1_q0 when (tmp_32_reg_1581(0) = '1') else 
        HTA_heap_0_q0;
    now_fu_804_p3 <= 
        HTA_heap_1_q0 when (tmp_28_fu_800_p1(0) = '1') else 
        HTA_heap_0_q0;
    offset_head_3_fu_703_p2 <= std_logic_vector(shift_left(unsigned(reg_568),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    offset_new_node0_2_fu_1155_p2 <= std_logic_vector(shift_left(unsigned(reg_568),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    offset_new_node0_fu_1231_p2 <= std_logic_vector(shift_left(unsigned(reg_568),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    offset_new_node1_1_fu_1281_p2 <= std_logic_vector(shift_left(unsigned(reg_568),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    offset_new_node1_fu_1079_p2 <= std_logic_vector(shift_left(unsigned(reg_568),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    offset_next_fu_1366_p3 <= 
        HTA_heap_0_q0 when (tmp_28_reg_1570(0) = '1') else 
        HTA_heap_1_q0;
    or_cond_fu_943_p2 <= (tmp_17_fu_937_p2 and tmp_16_fu_931_p2);
    p_lshr_f_fu_1407_p4 <= offset_head_reg_517(31 downto 1);
    p_lshr_fu_1387_p4 <= p_neg_fu_1381_p2(31 downto 1);
    p_neg_fu_1381_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(offset_head_reg_517));
    p_neg_t_fu_1401_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(tmp_18_fu_1397_p1));
    p_sum2_fu_1321_p2 <= std_logic_vector(unsigned(ap_const_lv13_7D1) + unsigned(tmp_32_cast_reg_1766));
    p_sum3_fu_910_p2 <= std_logic_vector(unsigned(tmp_27_reg_1555) + unsigned(ap_const_lv13_7D1));
    p_sum4_fu_1341_p2 <= std_logic_vector(unsigned(ap_const_lv13_7D1) + unsigned(tmp_33_cast_fu_1292_p3));
    p_sum6_fu_1206_p2 <= std_logic_vector(unsigned(tmp_34_cast_fu_1167_p3) + unsigned(ap_const_lv13_7D1));
    p_sum8_fu_1130_p2 <= std_logic_vector(unsigned(tmp_35_cast_fu_1091_p3) + unsigned(ap_const_lv13_7D1));
    p_sum_fu_742_p2 <= std_logic_vector(unsigned(ap_const_lv13_7D1) + unsigned(tmp_cast_fu_713_p3));
    tmp_10_fu_862_p2 <= "1" when (signed(i_2_reg_527) < signed(extLd_fu_858_p1)) else "0";
    tmp_11_fu_1469_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_reg_538),64));
    tmp_12_fu_890_p2 <= std_logic_vector(unsigned(tmp_6_reg_1612) + unsigned(i0_fu_878_p2));
        tmp_13_fu_895_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_12_fu_890_p2),64));

    tmp_14_fu_900_p2 <= std_logic_vector(unsigned(tmp_6_reg_1612) + unsigned(i1_fu_884_p2));
        tmp_15_fu_905_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_14_fu_900_p2),64));

    tmp_16_fu_931_p2 <= "1" when (signed(map_r_q0) > signed(ap_const_lv32_270F)) else "0";
    tmp_17_fu_937_p2 <= "1" when (signed(map_r_q1) > signed(ap_const_lv32_270F)) else "0";
    tmp_18_fu_1397_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_lshr_fu_1387_p4),32));
    tmp_19_fu_1417_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_lshr_f_fu_1407_p4),32));
    tmp_1_fu_654_p1 <= i_reg_495(13 - 1 downto 0);
    tmp_1_i_fu_580_p0 <= n;
    tmp_1_i_fu_580_p2 <= std_logic_vector(signed(tmp_1_i_fu_580_p0) + signed(ap_const_lv32_1));
        tmp_20_fu_1012_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i0_reg_1631),64));

    tmp_21_fu_1016_p2 <= "1" when (signed(weight0_reg_1667) < signed(HTA_heap_0_q0)) else "0";
    tmp_22_fu_1051_p2 <= (in_list_q0 xor ap_const_lv1_1);
    tmp_23_cast_fu_959_p3 <= (tmp_35_reg_1626 & ap_const_lv1_0);
        tmp_23_fu_1021_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i1_reg_1637),64));

    tmp_24_fu_1025_p2 <= "1" when (signed(weight1_reg_1673) < signed(HTA_heap_1_q0)) else "0";
    tmp_25_fu_1062_p2 <= (in_list_q1 xor ap_const_lv1_1);
    tmp_26_cast_fu_986_p2 <= (tmp_23_cast_fu_959_p3 or ap_const_lv13_1);
    tmp_26_fu_709_p1 <= reg_568(12 - 1 downto 0);
    tmp_27_fu_774_p1 <= offset_head_reg_517(13 - 1 downto 0);
    tmp_28_fu_800_p1 <= offset_head_reg_517(1 - 1 downto 0);
    tmp_31_fu_812_p1 <= now_fu_804_p3(13 - 1 downto 0);
    tmp_32_cast_fu_1243_p3 <= (tmp_40_fu_1239_p1 & ap_const_lv1_0);
    tmp_32_fu_816_p1 <= now_fu_804_p3(1 - 1 downto 0);
    tmp_33_cast_fu_1292_p3 <= (tmp_46_fu_1288_p1 & ap_const_lv1_0);
    tmp_33_fu_1444_p1 <= i_3_reg_538(13 - 1 downto 0);
    tmp_34_cast_fu_1167_p3 <= (tmp_43_fu_1163_p1 & ap_const_lv1_0);
    tmp_34_fu_1474_p1 <= i_3_reg_538(1 - 1 downto 0);
    tmp_35_cast_fu_1091_p3 <= (tmp_48_fu_1087_p1 & ap_const_lv1_0);
    tmp_35_fu_874_p1 <= i_2_reg_527(12 - 1 downto 0);
    tmp_37_fu_1373_p3 <= offset_head_reg_517(31 downto 31);
    tmp_38_fu_1047_p1 <= offset_tail_fu_124(13 - 1 downto 0);
        tmp_3_fu_840_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(now_reg_1575),64));

    tmp_40_fu_1239_p1 <= reg_568(12 - 1 downto 0);
    tmp_41_fu_1272_p1 <= offset_tail_load_reg_1720(1 - 1 downto 0);
    tmp_43_fu_1163_p1 <= reg_568(12 - 1 downto 0);
    tmp_44_fu_1196_p1 <= reg_572(1 - 1 downto 0);
    tmp_46_fu_1288_p1 <= reg_568(12 - 1 downto 0);
    tmp_48_fu_1087_p1 <= reg_568(12 - 1 downto 0);
    tmp_49_fu_1120_p1 <= reg_572(1 - 1 downto 0);
    tmp_4_cast_fu_617_p3 <= (tmp_fu_608_p4 & ap_const_lv1_0);
    tmp_4_fu_658_p1 <= i_reg_495(1 - 1 downto 0);
    tmp_5_fu_643_p1 <= n;
    tmp_5_fu_643_p2 <= "1" when (signed(i_cast_fu_639_p1) < signed(tmp_5_fu_643_p1)) else "0";
    tmp_6_fu_850_p0 <= n;
    tmp_6_fu_850_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_6_fu_850_p0) * signed(now_reg_1575))), 32));
    tmp_7_fu_768_p2 <= "1" when (offset_head_reg_517 = ap_const_lv32_FFFFFFFF) else "0";
    tmp_8_fu_687_p1 <= n;
    tmp_8_fu_687_p2 <= "1" when (signed(i_1_cast_fu_683_p1) < signed(tmp_8_fu_687_p1)) else "0";
    tmp_9_fu_698_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_506),64));
    tmp_cast_fu_713_p3 <= (tmp_26_fu_709_p1 & ap_const_lv1_0);
    tmp_fu_608_p4 <= status_6_reg_1498(12 downto 1);
    tmp_s_fu_1433_p1 <= n;
    tmp_s_fu_1433_p2 <= "1" when (signed(i_3_cast_fu_1429_p1) < signed(tmp_s_fu_1433_p1)) else "0";
    update0_fu_1057_p2 <= (tmp_22_fu_1051_p2 and tmp_21_reg_1689);
    update1_fu_1068_p2 <= (tmp_25_fu_1062_p2 and tmp_24_reg_1700);
    weight0_HTA_heap_loa_fu_1030_p3 <= 
        weight0_reg_1667 when (tmp_21_fu_1016_p2(0) = '1') else 
        HTA_heap_0_q0;
    weight0_fu_949_p2 <= std_logic_vector(unsigned(now_dis_reg_1606) + unsigned(map_r_q0));
    weight1_1_fu_1037_p3 <= 
        weight1_reg_1673 when (tmp_24_fu_1025_p2(0) = '1') else 
        HTA_heap_1_q0;
    weight1_fu_954_p2 <= std_logic_vector(unsigned(now_dis_reg_1606) + unsigned(map_r_q1));
end behav;
