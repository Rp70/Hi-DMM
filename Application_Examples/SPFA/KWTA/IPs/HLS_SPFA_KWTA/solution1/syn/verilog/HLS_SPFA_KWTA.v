// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="HLS_SPFA_KWTA,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=9,HLS_SYN_DSP=3,HLS_SYN_FF=1060,HLS_SYN_LUT=1907,HLS_VERSION=2018_2}" *)

module HLS_SPFA_KWTA (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        n,
        map_r_address0,
        map_r_ce0,
        map_r_q0,
        map_r_address1,
        map_r_ce1,
        map_r_q1,
        dis_output_address0,
        dis_output_ce0,
        dis_output_we0,
        dis_output_d0,
        alloc_HTA_size,
        alloc_HTA_size_ap_vld,
        alloc_HTA_size_ap_ack,
        alloc_HTA_free_target,
        alloc_HTA_free_target_ap_vld,
        alloc_HTA_free_target_ap_ack,
        alloc_HTA_addr,
        alloc_HTA_addr_ap_vld,
        alloc_HTA_addr_ap_ack,
        alloc_HTA_cmd,
        alloc_HTA_cmd_ap_vld,
        alloc_HTA_cmd_ap_ack,
        alloc_KWTA_size,
        alloc_KWTA_size_ap_vld,
        alloc_KWTA_size_ap_ack,
        alloc_KWTA_free_target,
        alloc_KWTA_free_target_ap_vld,
        alloc_KWTA_free_target_ap_ack,
        alloc_KWTA_addr,
        alloc_KWTA_addr_ap_vld,
        alloc_KWTA_addr_ap_ack,
        alloc_KWTA_cmd,
        alloc_KWTA_cmd_ap_vld,
        alloc_KWTA_cmd_ap_ack
);

parameter    ap_ST_fsm_state1 = 36'd1;
parameter    ap_ST_fsm_state2 = 36'd2;
parameter    ap_ST_fsm_state3 = 36'd4;
parameter    ap_ST_fsm_state4 = 36'd8;
parameter    ap_ST_fsm_state5 = 36'd16;
parameter    ap_ST_fsm_state6 = 36'd32;
parameter    ap_ST_fsm_state7 = 36'd64;
parameter    ap_ST_fsm_state8 = 36'd128;
parameter    ap_ST_fsm_state9 = 36'd256;
parameter    ap_ST_fsm_state10 = 36'd512;
parameter    ap_ST_fsm_state11 = 36'd1024;
parameter    ap_ST_fsm_state12 = 36'd2048;
parameter    ap_ST_fsm_state13 = 36'd4096;
parameter    ap_ST_fsm_state14 = 36'd8192;
parameter    ap_ST_fsm_state15 = 36'd16384;
parameter    ap_ST_fsm_state16 = 36'd32768;
parameter    ap_ST_fsm_state17 = 36'd65536;
parameter    ap_ST_fsm_state18 = 36'd131072;
parameter    ap_ST_fsm_state19 = 36'd262144;
parameter    ap_ST_fsm_state20 = 36'd524288;
parameter    ap_ST_fsm_state21 = 36'd1048576;
parameter    ap_ST_fsm_state22 = 36'd2097152;
parameter    ap_ST_fsm_state23 = 36'd4194304;
parameter    ap_ST_fsm_state24 = 36'd8388608;
parameter    ap_ST_fsm_state25 = 36'd16777216;
parameter    ap_ST_fsm_state26 = 36'd33554432;
parameter    ap_ST_fsm_state27 = 36'd67108864;
parameter    ap_ST_fsm_state28 = 36'd134217728;
parameter    ap_ST_fsm_state29 = 36'd268435456;
parameter    ap_ST_fsm_state30 = 36'd536870912;
parameter    ap_ST_fsm_state31 = 36'd1073741824;
parameter    ap_ST_fsm_state32 = 36'd2147483648;
parameter    ap_ST_fsm_state33 = 36'd4294967296;
parameter    ap_ST_fsm_state34 = 36'd8589934592;
parameter    ap_ST_fsm_state35 = 36'd17179869184;
parameter    ap_ST_fsm_state36 = 36'd34359738368;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] n;
output  [14:0] map_r_address0;
output   map_r_ce0;
input  [31:0] map_r_q0;
output  [14:0] map_r_address1;
output   map_r_ce1;
input  [31:0] map_r_q1;
output  [7:0] dis_output_address0;
output   dis_output_ce0;
output   dis_output_we0;
output  [31:0] dis_output_d0;
output  [31:0] alloc_HTA_size;
output   alloc_HTA_size_ap_vld;
input   alloc_HTA_size_ap_ack;
output  [31:0] alloc_HTA_free_target;
output   alloc_HTA_free_target_ap_vld;
input   alloc_HTA_free_target_ap_ack;
input  [31:0] alloc_HTA_addr;
input   alloc_HTA_addr_ap_vld;
output   alloc_HTA_addr_ap_ack;
output  [7:0] alloc_HTA_cmd;
output   alloc_HTA_cmd_ap_vld;
input   alloc_HTA_cmd_ap_ack;
output  [31:0] alloc_KWTA_size;
output   alloc_KWTA_size_ap_vld;
input   alloc_KWTA_size_ap_ack;
output  [31:0] alloc_KWTA_free_target;
output   alloc_KWTA_free_target_ap_vld;
input   alloc_KWTA_free_target_ap_ack;
input  [31:0] alloc_KWTA_addr;
input   alloc_KWTA_addr_ap_vld;
output   alloc_KWTA_addr_ap_ack;
output  [7:0] alloc_KWTA_cmd;
output   alloc_KWTA_cmd_ap_vld;
input   alloc_KWTA_cmd_ap_ack;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg map_r_ce0;
reg map_r_ce1;
reg dis_output_ce0;
reg dis_output_we0;
reg alloc_HTA_size_ap_vld;
reg alloc_HTA_free_target_ap_vld;
reg alloc_HTA_addr_ap_ack;
reg alloc_HTA_cmd_ap_vld;
reg[31:0] alloc_KWTA_size;
reg alloc_KWTA_size_ap_vld;
reg[31:0] alloc_KWTA_free_target;
reg alloc_KWTA_free_target_ap_vld;
reg alloc_KWTA_addr_ap_ack;
reg[7:0] alloc_KWTA_cmd;
reg alloc_KWTA_cmd_ap_vld;

(* fsm_encoding = "none" *) reg   [35:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [0:0] guard_variable_for_H;
reg   [30:0] N_2;
reg    alloc_HTA_size_blk_n;
reg    alloc_HTA_free_target_blk_n;
reg    alloc_HTA_addr_blk_n;
wire    ap_CS_fsm_state2;
reg    alloc_HTA_cmd_blk_n;
reg    alloc_KWTA_size_blk_n;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state16;
wire   [0:0] brmerge_demorgan_fu_1073_p2;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state28;
reg    alloc_KWTA_free_target_blk_n;
reg    alloc_KWTA_addr_blk_n;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state29;
reg    alloc_KWTA_cmd_blk_n;
reg   [31:0] reg_568;
reg   [31:0] reg_572;
reg    ap_sig_ioackin_alloc_KWTA_cmd_ap_ack;
reg    ap_sig_ioackin_alloc_KWTA_size_ap_ack;
reg    ap_sig_ioackin_alloc_KWTA_free_target_ap_ack;
reg    ap_block_state16_io;
wire   [0:0] update0_fu_1057_p2;
wire   [0:0] update1_fu_1068_p2;
reg    ap_sig_ioackin_alloc_HTA_cmd_ap_ack;
reg    ap_sig_ioackin_alloc_HTA_size_ap_ack;
reg    ap_sig_ioackin_alloc_HTA_free_target_ap_ack;
reg    ap_block_state1_io;
reg   [31:0] status_6_reg_1498;
wire   [12:0] tmp_4_cast_fu_617_p3;
reg   [12:0] tmp_4_cast_reg_1504;
wire    ap_CS_fsm_state3;
reg   [10:0] HTA_heap_0_addr_reg_1513;
wire   [30:0] i_4_fu_648_p2;
wire    ap_CS_fsm_state4;
wire   [30:0] i_5_fu_692_p2;
wire    ap_CS_fsm_state5;
wire   [31:0] offset_head_3_fu_703_p2;
wire    ap_CS_fsm_state8;
wire   [12:0] tmp_27_fu_774_p1;
reg   [12:0] tmp_27_reg_1555;
wire    ap_CS_fsm_state9;
wire   [0:0] tmp_7_fu_768_p2;
wire   [0:0] tmp_28_fu_800_p1;
reg   [0:0] tmp_28_reg_1570;
wire    ap_CS_fsm_state10;
wire  signed [31:0] now_fu_804_p3;
reg  signed [31:0] now_reg_1575;
wire   [0:0] tmp_32_fu_816_p1;
reg   [0:0] tmp_32_reg_1581;
reg   [11:0] newIndex7_reg_1586;
wire    ap_CS_fsm_state11;
wire  signed [63:0] tmp_3_fu_840_p1;
reg  signed [63:0] tmp_3_reg_1601;
wire    ap_CS_fsm_state12;
wire   [31:0] now_dis_fu_843_p3;
reg   [31:0] now_dis_reg_1606;
wire   [31:0] tmp_6_fu_850_p2;
reg   [31:0] tmp_6_reg_1612;
wire   [31:0] i_7_fu_868_p2;
reg   [31:0] i_7_reg_1621;
wire    ap_CS_fsm_state13;
wire   [11:0] tmp_35_fu_874_p1;
reg   [11:0] tmp_35_reg_1626;
wire   [0:0] tmp_10_fu_862_p2;
wire  signed [31:0] i0_fu_878_p2;
reg  signed [31:0] i0_reg_1631;
wire  signed [31:0] i1_fu_884_p2;
reg  signed [31:0] i1_reg_1637;
wire   [0:0] or_cond_fu_943_p2;
reg   [0:0] or_cond_reg_1663;
wire    ap_CS_fsm_state14;
wire   [31:0] weight0_fu_949_p2;
reg   [31:0] weight0_reg_1667;
wire   [31:0] weight1_fu_954_p2;
reg   [31:0] weight1_reg_1673;
reg   [10:0] HTA_heap_0_addr_7_reg_1679;
reg   [10:0] HTA_heap_1_addr_6_reg_1684;
wire   [0:0] tmp_21_fu_1016_p2;
reg   [0:0] tmp_21_reg_1689;
wire    ap_CS_fsm_state15;
reg   [7:0] in_list_addr_3_reg_1694;
wire   [0:0] tmp_24_fu_1025_p2;
reg   [0:0] tmp_24_reg_1700;
reg   [7:0] in_list_addr_4_reg_1705;
wire   [31:0] weight0_HTA_heap_loa_fu_1030_p3;
reg   [31:0] weight0_HTA_heap_loa_reg_1710;
wire   [31:0] weight1_1_fu_1037_p3;
reg   [31:0] weight1_1_reg_1715;
reg   [31:0] offset_tail_load_reg_1720;
wire   [12:0] tmp_38_fu_1047_p1;
reg   [12:0] tmp_38_reg_1725;
reg   [0:0] brmerge_demorgan_reg_1736;
reg   [10:0] HTA_heap_0_addr_13_reg_1740;
wire    ap_CS_fsm_state19;
reg   [11:0] newIndex19_reg_1748;
reg   [10:0] HTA_heap_0_addr_10_reg_1753;
wire    ap_CS_fsm_state23;
reg   [11:0] newIndex21_reg_1761;
wire   [12:0] tmp_32_cast_fu_1243_p3;
reg   [12:0] tmp_32_cast_reg_1766;
wire    ap_CS_fsm_state26;
reg   [10:0] HTA_heap_0_addr_8_reg_1771;
reg   [11:0] newIndex17_reg_1779;
wire    ap_CS_fsm_state30;
wire   [31:0] offset_next_fu_1366_p3;
reg   [31:0] offset_next_reg_1784;
wire    ap_CS_fsm_state32;
wire   [31:0] free_target_assign_fu_1421_p3;
reg   [31:0] free_target_assign_reg_1789;
wire   [30:0] i_6_fu_1438_p2;
reg   [30:0] i_6_reg_1797;
wire    ap_CS_fsm_state35;
wire   [0:0] tmp_s_fu_1433_p2;
reg   [10:0] HTA_heap_0_address0;
reg    HTA_heap_0_ce0;
reg    HTA_heap_0_we0;
reg   [31:0] HTA_heap_0_d0;
wire   [31:0] HTA_heap_0_q0;
reg   [10:0] HTA_heap_1_address0;
reg    HTA_heap_1_ce0;
reg    HTA_heap_1_we0;
reg   [31:0] HTA_heap_1_d0;
wire   [31:0] HTA_heap_1_q0;
reg   [7:0] in_list_address0;
reg    in_list_ce0;
reg    in_list_we0;
reg   [0:0] in_list_d0;
wire   [0:0] in_list_q0;
reg   [7:0] in_list_address1;
reg    in_list_ce1;
reg    in_list_we1;
wire   [0:0] in_list_q1;
reg   [30:0] i_reg_495;
wire   [0:0] tmp_5_fu_643_p2;
reg   [30:0] i_1_reg_506;
wire   [0:0] tmp_8_fu_687_p2;
reg   [31:0] offset_head_reg_517;
wire    ap_CS_fsm_state34;
reg   [31:0] i_2_reg_527;
wire    ap_CS_fsm_state31;
reg   [30:0] i_3_reg_538;
wire    ap_CS_fsm_state36;
wire   [63:0] newIndex2_fu_634_p1;
wire   [63:0] newIndex3_cast_fu_677_p1;
wire   [63:0] tmp_9_fu_698_p1;
wire   [63:0] newIndex4_cast_fu_737_p1;
wire   [63:0] newIndex5_cast_fu_758_p1;
wire   [63:0] newIndex6_cast_fu_794_p1;
wire   [63:0] newIndex7_cast_fu_835_p1;
wire  signed [63:0] tmp_13_fu_895_p1;
wire  signed [63:0] tmp_15_fu_905_p1;
wire   [63:0] newIndex8_cast_fu_925_p1;
wire   [63:0] newIndex9_cast_fu_981_p1;
wire   [63:0] newIndex10_cast_fu_1007_p1;
wire  signed [63:0] tmp_20_fu_1012_p1;
wire  signed [63:0] tmp_23_fu_1021_p1;
wire   [63:0] newIndex18_cast_fu_1115_p1;
wire   [63:0] newIndex20_cast_fu_1124_p1;
wire   [63:0] newIndex19_cast_fu_1151_p1;
wire    ap_CS_fsm_state20;
wire   [63:0] newIndex13_cast_fu_1191_p1;
wire   [63:0] newIndex14_cast_fu_1200_p1;
wire   [63:0] newIndex21_cast_fu_1227_p1;
wire    ap_CS_fsm_state24;
wire   [63:0] newIndex11_cast_fu_1267_p1;
wire   [63:0] newIndex12_cast_fu_1275_p1;
wire   [63:0] newIndex15_cast_fu_1316_p1;
wire   [63:0] newIndex16_cast_fu_1336_p1;
wire   [63:0] newIndex17_cast_fu_1362_p1;
wire   [63:0] newIndex_cast_fu_1463_p1;
wire   [63:0] tmp_11_fu_1469_p1;
wire   [0:0] guard_variable_for_H_1_load_fu_576_p1;
reg   [31:0] offset_tail_fu_124;
wire   [31:0] offset_new_node1_fu_1079_p2;
wire   [31:0] offset_new_node0_2_fu_1155_p2;
wire   [31:0] offset_new_node1_1_fu_1281_p2;
reg    ap_reg_ioackin_alloc_HTA_cmd_ap_ack;
reg    ap_reg_ioackin_alloc_HTA_size_ap_ack;
reg    ap_reg_ioackin_alloc_HTA_free_target_ap_ack;
reg    ap_reg_ioackin_alloc_KWTA_cmd_ap_ack;
reg    ap_block_state6_io;
reg    ap_block_state17_io;
reg    ap_block_state21_io;
reg    ap_block_state28_io;
reg    ap_block_state33_io;
reg    ap_reg_ioackin_alloc_KWTA_size_ap_ack;
reg    ap_reg_ioackin_alloc_KWTA_free_target_ap_ack;
wire   [0:0] tmp_4_fu_658_p1;
wire   [0:0] tmp_49_fu_1120_p1;
wire   [0:0] tmp_44_fu_1196_p1;
wire   [0:0] tmp_41_fu_1272_p1;
wire   [31:0] offset_new_node0_fu_1231_p2;
wire    ap_CS_fsm_state27;
wire   [12:0] grp_fu_553_p2;
wire  signed [31:0] tmp_1_i_fu_580_p0;
wire   [31:0] tmp_1_i_fu_580_p2;
wire   [11:0] tmp_fu_608_p4;
wire   [18:0] newIndex1_fu_625_p4;
wire   [31:0] i_cast_fu_639_p1;
wire  signed [31:0] tmp_5_fu_643_p1;
wire   [12:0] tmp_1_fu_654_p1;
wire   [12:0] local_dis_0_sum1_fu_662_p2;
wire   [11:0] newIndex3_fu_667_p4;
wire   [31:0] i_1_cast_fu_683_p1;
wire  signed [31:0] tmp_8_fu_687_p1;
wire   [11:0] tmp_26_fu_709_p1;
wire   [12:0] tmp_cast_fu_713_p3;
wire   [12:0] KWTA_heap_0_sum_fu_721_p2;
wire   [11:0] newIndex4_fu_727_p4;
wire   [12:0] p_sum_fu_742_p2;
wire   [11:0] newIndex5_fu_748_p4;
wire   [12:0] KWTA_heap_0_sum1_fu_778_p2;
wire   [11:0] newIndex6_fu_784_p4;
wire   [12:0] tmp_31_fu_812_p1;
wire   [12:0] local_dis_0_sum2_fu_820_p2;
wire  signed [31:0] tmp_6_fu_850_p0;
wire  signed [31:0] extLd_fu_858_p1;
wire   [31:0] tmp_12_fu_890_p2;
wire   [31:0] tmp_14_fu_900_p2;
wire   [12:0] p_sum3_fu_910_p2;
wire   [11:0] newIndex8_fu_915_p4;
wire   [0:0] tmp_16_fu_931_p2;
wire   [0:0] tmp_17_fu_937_p2;
wire   [12:0] tmp_23_cast_fu_959_p3;
wire   [12:0] local_dis_0_sum6_fu_966_p2;
wire   [11:0] newIndex9_fu_971_p4;
wire   [12:0] tmp_26_cast_fu_986_p2;
wire   [12:0] local_dis_0_sum7_fu_992_p2;
wire   [11:0] newIndex10_fu_997_p4;
wire   [0:0] tmp_22_fu_1051_p2;
wire   [0:0] tmp_25_fu_1062_p2;
wire   [11:0] tmp_48_fu_1087_p1;
wire   [12:0] tmp_35_cast_fu_1091_p3;
wire   [12:0] KWTA_heap_0_sum5_fu_1099_p2;
wire   [11:0] newIndex18_fu_1105_p4;
wire   [11:0] grp_fu_558_p4;
wire   [12:0] p_sum8_fu_1130_p2;
wire   [11:0] tmp_43_fu_1163_p1;
wire   [12:0] tmp_34_cast_fu_1167_p3;
wire   [12:0] KWTA_heap_0_sum4_fu_1175_p2;
wire   [11:0] newIndex13_fu_1181_p4;
wire   [12:0] p_sum6_fu_1206_p2;
wire   [11:0] tmp_40_fu_1239_p1;
wire   [12:0] KWTA_heap_0_sum2_fu_1251_p2;
wire   [11:0] newIndex11_fu_1257_p4;
wire   [11:0] tmp_46_fu_1288_p1;
wire   [12:0] tmp_33_cast_fu_1292_p3;
wire   [12:0] KWTA_heap_0_sum3_fu_1300_p2;
wire   [11:0] newIndex15_fu_1306_p4;
wire   [12:0] p_sum2_fu_1321_p2;
wire   [11:0] newIndex16_fu_1326_p4;
wire   [12:0] p_sum4_fu_1341_p2;
wire   [31:0] p_neg_fu_1381_p2;
wire   [30:0] p_lshr_fu_1387_p4;
wire   [31:0] tmp_18_fu_1397_p1;
wire   [30:0] p_lshr_f_fu_1407_p4;
wire   [0:0] tmp_37_fu_1373_p3;
wire   [31:0] p_neg_t_fu_1401_p2;
wire   [31:0] tmp_19_fu_1417_p1;
wire   [31:0] i_3_cast_fu_1429_p1;
wire  signed [31:0] tmp_s_fu_1433_p1;
wire   [12:0] tmp_33_fu_1444_p1;
wire   [12:0] local_dis_0_sum_fu_1448_p2;
wire   [11:0] newIndex_fu_1453_p4;
wire   [0:0] tmp_34_fu_1474_p1;
reg   [35:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 36'd1;
#0 guard_variable_for_H = 1'd0;
#0 N_2 = 31'd0;
#0 ap_reg_ioackin_alloc_HTA_cmd_ap_ack = 1'b0;
#0 ap_reg_ioackin_alloc_HTA_size_ap_ack = 1'b0;
#0 ap_reg_ioackin_alloc_HTA_free_target_ap_ack = 1'b0;
#0 ap_reg_ioackin_alloc_KWTA_cmd_ap_ack = 1'b0;
#0 ap_reg_ioackin_alloc_KWTA_size_ap_ack = 1'b0;
#0 ap_reg_ioackin_alloc_KWTA_free_target_ap_ack = 1'b0;
end

HLS_SPFA_KWTA_HTAbkb #(
    .DataWidth( 32 ),
    .AddressRange( 2000 ),
    .AddressWidth( 11 ))
HTA_heap_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(HTA_heap_0_address0),
    .ce0(HTA_heap_0_ce0),
    .we0(HTA_heap_0_we0),
    .d0(HTA_heap_0_d0),
    .q0(HTA_heap_0_q0)
);

HLS_SPFA_KWTA_HTAbkb #(
    .DataWidth( 32 ),
    .AddressRange( 2000 ),
    .AddressWidth( 11 ))
HTA_heap_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(HTA_heap_1_address0),
    .ce0(HTA_heap_1_ce0),
    .we0(HTA_heap_1_we0),
    .d0(HTA_heap_1_d0),
    .q0(HTA_heap_1_q0)
);

HLS_SPFA_KWTA_in_dEe #(
    .DataWidth( 1 ),
    .AddressRange( 200 ),
    .AddressWidth( 8 ))
in_list_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(in_list_address0),
    .ce0(in_list_ce0),
    .we0(in_list_we0),
    .d0(in_list_d0),
    .q0(in_list_q0),
    .address1(in_list_address1),
    .ce1(in_list_ce1),
    .we1(in_list_we1),
    .d1(1'd1),
    .q1(in_list_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_alloc_HTA_cmd_ap_ack <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            if (~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0))) begin
                ap_reg_ioackin_alloc_HTA_cmd_ap_ack <= 1'b0;
            end else if (((ap_start == 1'b1) & (1'b1 == alloc_HTA_cmd_ap_ack))) begin
                ap_reg_ioackin_alloc_HTA_cmd_ap_ack <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_alloc_HTA_free_target_ap_ack <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            if (~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0))) begin
                ap_reg_ioackin_alloc_HTA_free_target_ap_ack <= 1'b0;
            end else if (((ap_start == 1'b1) & (1'b1 == alloc_HTA_free_target_ap_ack))) begin
                ap_reg_ioackin_alloc_HTA_free_target_ap_ack <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_alloc_HTA_size_ap_ack <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            if (~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0))) begin
                ap_reg_ioackin_alloc_HTA_size_ap_ack <= 1'b0;
            end else if (((ap_start == 1'b1) & (1'b1 == alloc_HTA_size_ap_ack))) begin
                ap_reg_ioackin_alloc_HTA_size_ap_ack <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_alloc_KWTA_cmd_ap_ack <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_state28_io) & (1'b1 == ap_CS_fsm_state28)) | ((1'b0 == ap_block_state33_io) & (1'b1 == ap_CS_fsm_state33)) | ((1'b0 == ap_block_state17_io) & (1'b1 == ap_CS_fsm_state17)) | ((1'b0 == ap_block_state21_io) & (1'b1 == ap_CS_fsm_state21)) | ((1'b0 == ap_block_state16_io) & (1'b1 == ap_CS_fsm_state16) & (brmerge_demorgan_fu_1073_p2 == 1'd1)) | ((1'b0 == ap_block_state6_io) & (1'b1 == ap_CS_fsm_state6)))) begin
            ap_reg_ioackin_alloc_KWTA_cmd_ap_ack <= 1'b0;
        end else if ((((1'b1 == alloc_KWTA_cmd_ap_ack) & (1'b1 == ap_CS_fsm_state28)) | ((1'b1 == alloc_KWTA_cmd_ap_ack) & (1'b1 == ap_CS_fsm_state33)) | ((1'b1 == alloc_KWTA_cmd_ap_ack) & (1'b1 == ap_CS_fsm_state17)) | ((1'b1 == alloc_KWTA_cmd_ap_ack) & (1'b1 == ap_CS_fsm_state21)) | ((1'b1 == alloc_KWTA_cmd_ap_ack) & (1'b1 == ap_CS_fsm_state16) & (brmerge_demorgan_fu_1073_p2 == 1'd1)) | ((1'b1 == alloc_KWTA_cmd_ap_ack) & (1'b1 == ap_CS_fsm_state6)))) begin
            ap_reg_ioackin_alloc_KWTA_cmd_ap_ack <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_alloc_KWTA_free_target_ap_ack <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_state28_io) & (1'b1 == ap_CS_fsm_state28)) | ((1'b0 == ap_block_state33_io) & (1'b1 == ap_CS_fsm_state33)) | ((1'b0 == ap_block_state17_io) & (1'b1 == ap_CS_fsm_state17)) | ((1'b0 == ap_block_state21_io) & (1'b1 == ap_CS_fsm_state21)) | ((1'b0 == ap_block_state16_io) & (1'b1 == ap_CS_fsm_state16) & (brmerge_demorgan_fu_1073_p2 == 1'd1)) | ((1'b0 == ap_block_state6_io) & (1'b1 == ap_CS_fsm_state6)))) begin
            ap_reg_ioackin_alloc_KWTA_free_target_ap_ack <= 1'b0;
        end else if ((((1'b1 == alloc_KWTA_free_target_ap_ack) & (1'b1 == ap_CS_fsm_state28)) | ((1'b1 == alloc_KWTA_free_target_ap_ack) & (1'b1 == ap_CS_fsm_state33)) | ((1'b1 == alloc_KWTA_free_target_ap_ack) & (1'b1 == ap_CS_fsm_state17)) | ((1'b1 == alloc_KWTA_free_target_ap_ack) & (1'b1 == ap_CS_fsm_state21)) | ((1'b1 == alloc_KWTA_free_target_ap_ack) & (1'b1 == ap_CS_fsm_state16) & (brmerge_demorgan_fu_1073_p2 == 1'd1)) | ((1'b1 == alloc_KWTA_free_target_ap_ack) & (1'b1 == ap_CS_fsm_state6)))) begin
            ap_reg_ioackin_alloc_KWTA_free_target_ap_ack <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_alloc_KWTA_size_ap_ack <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_state28_io) & (1'b1 == ap_CS_fsm_state28)) | ((1'b0 == ap_block_state33_io) & (1'b1 == ap_CS_fsm_state33)) | ((1'b0 == ap_block_state17_io) & (1'b1 == ap_CS_fsm_state17)) | ((1'b0 == ap_block_state21_io) & (1'b1 == ap_CS_fsm_state21)) | ((1'b0 == ap_block_state16_io) & (1'b1 == ap_CS_fsm_state16) & (brmerge_demorgan_fu_1073_p2 == 1'd1)) | ((1'b0 == ap_block_state6_io) & (1'b1 == ap_CS_fsm_state6)))) begin
            ap_reg_ioackin_alloc_KWTA_size_ap_ack <= 1'b0;
        end else if ((((1'b1 == alloc_KWTA_size_ap_ack) & (1'b1 == ap_CS_fsm_state28)) | ((1'b1 == alloc_KWTA_size_ap_ack) & (1'b1 == ap_CS_fsm_state33)) | ((1'b1 == alloc_KWTA_size_ap_ack) & (1'b1 == ap_CS_fsm_state17)) | ((1'b1 == alloc_KWTA_size_ap_ack) & (1'b1 == ap_CS_fsm_state21)) | ((1'b1 == alloc_KWTA_size_ap_ack) & (1'b1 == ap_CS_fsm_state16) & (brmerge_demorgan_fu_1073_p2 == 1'd1)) | ((1'b1 == alloc_KWTA_size_ap_ack) & (1'b1 == ap_CS_fsm_state6)))) begin
            ap_reg_ioackin_alloc_KWTA_size_ap_ack <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (tmp_8_fu_687_p2 == 1'd1))) begin
        i_1_reg_506 <= i_5_fu_692_p2;
    end else if (((tmp_5_fu_643_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        i_1_reg_506 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        i_2_reg_527 <= i_7_reg_1621;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        i_2_reg_527 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (tmp_7_fu_768_p2 == 1'd1))) begin
        i_3_reg_538 <= 31'd0;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        i_3_reg_538 <= i_6_reg_1797;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (tmp_5_fu_643_p2 == 1'd1))) begin
        i_reg_495 <= i_4_fu_648_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        i_reg_495 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        offset_head_reg_517 <= offset_next_reg_1784;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        offset_head_reg_517 <= offset_head_3_fu_703_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
                offset_tail_fu_124[31 : 1] <= offset_new_node1_1_fu_1281_p2[31 : 1];
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
                offset_tail_fu_124[31 : 1] <= offset_new_node0_2_fu_1155_p2[31 : 1];
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
                offset_tail_fu_124[31 : 1] <= offset_new_node1_fu_1079_p2[31 : 1];
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
                offset_tail_fu_124[31 : 1] <= offset_head_3_fu_703_p2[31 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        HTA_heap_0_addr_10_reg_1753 <= newIndex13_cast_fu_1191_p1;
        newIndex21_reg_1761 <= {{p_sum6_fu_1206_p2[12:1]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        HTA_heap_0_addr_13_reg_1740 <= newIndex18_cast_fu_1115_p1;
        newIndex19_reg_1748 <= {{p_sum8_fu_1130_p2[12:1]}};
    end
end

always @ (posedge ap_clk) begin
    if (((or_cond_fu_943_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
        HTA_heap_0_addr_7_reg_1679 <= newIndex9_cast_fu_981_p1;
        HTA_heap_1_addr_6_reg_1684 <= newIndex10_cast_fu_1007_p1;
        weight0_reg_1667 <= weight0_fu_949_p2;
        weight1_reg_1673 <= weight1_fu_954_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        HTA_heap_0_addr_8_reg_1771 <= newIndex11_cast_fu_1267_p1;
        tmp_32_cast_reg_1766[12 : 1] <= tmp_32_cast_fu_1243_p3[12 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        HTA_heap_0_addr_reg_1513 <= newIndex2_fu_634_p1;
        tmp_4_cast_reg_1504[12 : 1] <= tmp_4_cast_fu_617_p3[12 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (guard_variable_for_H_1_load_fu_576_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        N_2 <= {{tmp_1_i_fu_580_p2[31:1]}};
        guard_variable_for_H <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state16_io) & (1'b1 == ap_CS_fsm_state16))) begin
        brmerge_demorgan_reg_1736 <= brmerge_demorgan_fu_1073_p2;
        offset_tail_load_reg_1720[31 : 1] <= offset_tail_fu_124[31 : 1];
        tmp_38_reg_1725[12 : 1] <= tmp_38_fu_1047_p1[12 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        free_target_assign_reg_1789 <= free_target_assign_fu_1421_p3;
        offset_next_reg_1784 <= offset_next_fu_1366_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) & (tmp_10_fu_862_p2 == 1'd1))) begin
        i0_reg_1631[31 : 1] <= i0_fu_878_p2[31 : 1];
        i1_reg_1637[31 : 1] <= i1_fu_884_p2[31 : 1];
        tmp_35_reg_1626 <= tmp_35_fu_874_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        i_6_reg_1797 <= i_6_fu_1438_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        i_7_reg_1621 <= i_7_fu_868_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        in_list_addr_3_reg_1694[7 : 1] <= tmp_20_fu_1012_p1[7 : 1];
        in_list_addr_4_reg_1705[7 : 1] <= tmp_23_fu_1021_p1[7 : 1];
        tmp_21_reg_1689 <= tmp_21_fu_1016_p2;
        tmp_24_reg_1700 <= tmp_24_fu_1025_p2;
        weight0_HTA_heap_loa_reg_1710 <= weight0_HTA_heap_loa_fu_1030_p3;
        weight1_1_reg_1715 <= weight1_1_fu_1037_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        newIndex17_reg_1779 <= {{p_sum4_fu_1341_p2[12:1]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        newIndex7_reg_1586 <= {{local_dis_0_sum2_fu_820_p2[12:1]}};
        now_reg_1575 <= now_fu_804_p3;
        tmp_28_reg_1570 <= tmp_28_fu_800_p1;
        tmp_32_reg_1581 <= tmp_32_fu_816_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        now_dis_reg_1606 <= now_dis_fu_843_p3;
        tmp_3_reg_1601 <= tmp_3_fu_840_p1;
        tmp_6_reg_1612 <= tmp_6_fu_850_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        or_cond_reg_1663 <= or_cond_fu_943_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == alloc_KWTA_addr_ap_vld) & (1'b1 == ap_CS_fsm_state29)) | ((1'b1 == alloc_KWTA_addr_ap_vld) & (1'b1 == ap_CS_fsm_state18)) | ((1'b1 == alloc_KWTA_addr_ap_vld) & (1'b1 == ap_CS_fsm_state22)) | ((1'b1 == alloc_KWTA_addr_ap_vld) & (1'b1 == ap_CS_fsm_state25)) | ((1'b1 == alloc_KWTA_addr_ap_vld) & (1'b1 == ap_CS_fsm_state7)))) begin
        reg_568 <= alloc_KWTA_addr;
    end
end

always @ (posedge ap_clk) begin
    if ((((brmerge_demorgan_fu_1073_p2 == 1'd0) & (1'b0 == ap_block_state16_io) & (1'b1 == ap_CS_fsm_state16) & (update0_fu_1057_p2 == 1'd1)) | ((update0_fu_1057_p2 == 1'd0) & (brmerge_demorgan_fu_1073_p2 == 1'd0) & (1'b0 == ap_block_state16_io) & (1'b1 == ap_CS_fsm_state16) & (update1_fu_1068_p2 == 1'd1)))) begin
        reg_572[31 : 1] <= offset_tail_fu_124[31 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == alloc_HTA_addr_ap_vld) & (1'b1 == ap_CS_fsm_state2))) begin
        status_6_reg_1498 <= alloc_HTA_addr;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_7_fu_768_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        tmp_27_reg_1555 <= tmp_27_fu_774_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        HTA_heap_0_address0 = newIndex_cast_fu_1463_p1;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        HTA_heap_0_address0 = newIndex15_cast_fu_1316_p1;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        HTA_heap_0_address0 = HTA_heap_0_addr_8_reg_1771;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        HTA_heap_0_address0 = newIndex12_cast_fu_1275_p1;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        HTA_heap_0_address0 = HTA_heap_0_addr_10_reg_1753;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        HTA_heap_0_address0 = newIndex14_cast_fu_1200_p1;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        HTA_heap_0_address0 = HTA_heap_0_addr_13_reg_1740;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        HTA_heap_0_address0 = newIndex20_cast_fu_1124_p1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        HTA_heap_0_address0 = HTA_heap_0_addr_7_reg_1679;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        HTA_heap_0_address0 = newIndex9_cast_fu_981_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        HTA_heap_0_address0 = newIndex8_cast_fu_925_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        HTA_heap_0_address0 = newIndex7_cast_fu_835_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        HTA_heap_0_address0 = newIndex6_cast_fu_794_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        HTA_heap_0_address0 = newIndex4_cast_fu_737_p1;
    end else if (((tmp_5_fu_643_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        HTA_heap_0_address0 = HTA_heap_0_addr_reg_1513;
    end else if (((tmp_4_fu_658_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state4) & (tmp_5_fu_643_p2 == 1'd1))) begin
        HTA_heap_0_address0 = newIndex3_cast_fu_677_p1;
    end else begin
        HTA_heap_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | ((tmp_5_fu_643_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)) | ((tmp_4_fu_658_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state4) & (tmp_5_fu_643_p2 == 1'd1)) | ((1'b0 == ap_block_state16_io) & (1'b1 == ap_CS_fsm_state16)))) begin
        HTA_heap_0_ce0 = 1'b1;
    end else begin
        HTA_heap_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        HTA_heap_0_d0 = offset_new_node0_fu_1231_p2;
    end else if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state24))) begin
        HTA_heap_0_d0 = i0_reg_1631;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        HTA_heap_0_d0 = offset_new_node0_2_fu_1155_p2;
    end else if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state30))) begin
        HTA_heap_0_d0 = i1_reg_1637;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        HTA_heap_0_d0 = offset_new_node1_fu_1079_p2;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        HTA_heap_0_d0 = weight0_HTA_heap_loa_reg_1710;
    end else if (((1'b1 == ap_CS_fsm_state8) | ((tmp_5_fu_643_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)))) begin
        HTA_heap_0_d0 = 32'd0;
    end else if (((tmp_4_fu_658_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state4) & (tmp_5_fu_643_p2 == 1'd1))) begin
        HTA_heap_0_d0 = 32'd10000;
    end else begin
        HTA_heap_0_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state8) | ((1'b1 == ap_CS_fsm_state26) & (tmp_41_fu_1272_p1 == 1'd1)) | ((1'b1 == ap_CS_fsm_state23) & (tmp_44_fu_1196_p1 == 1'd1)) | ((1'b1 == ap_CS_fsm_state19) & (tmp_49_fu_1120_p1 == 1'd1)) | ((tmp_5_fu_643_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)) | ((tmp_4_fu_658_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state4) & (tmp_5_fu_643_p2 == 1'd1)) | ((1'b0 == ap_block_state16_io) & (1'b1 == ap_CS_fsm_state16)))) begin
        HTA_heap_0_we0 = 1'b1;
    end else begin
        HTA_heap_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        HTA_heap_1_address0 = newIndex_cast_fu_1463_p1;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        HTA_heap_1_address0 = newIndex17_cast_fu_1362_p1;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        HTA_heap_1_address0 = newIndex16_cast_fu_1336_p1;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        HTA_heap_1_address0 = newIndex12_cast_fu_1275_p1;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        HTA_heap_1_address0 = newIndex21_cast_fu_1227_p1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        HTA_heap_1_address0 = newIndex14_cast_fu_1200_p1;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        HTA_heap_1_address0 = newIndex19_cast_fu_1151_p1;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        HTA_heap_1_address0 = newIndex20_cast_fu_1124_p1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        HTA_heap_1_address0 = HTA_heap_1_addr_6_reg_1684;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        HTA_heap_1_address0 = newIndex10_cast_fu_1007_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        HTA_heap_1_address0 = newIndex8_cast_fu_925_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        HTA_heap_1_address0 = newIndex7_cast_fu_835_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        HTA_heap_1_address0 = newIndex6_cast_fu_794_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        HTA_heap_1_address0 = newIndex5_cast_fu_758_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        HTA_heap_1_address0 = newIndex3_cast_fu_677_p1;
    end else begin
        HTA_heap_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state4) | ((1'b0 == ap_block_state16_io) & (1'b1 == ap_CS_fsm_state16)))) begin
        HTA_heap_1_ce0 = 1'b1;
    end else begin
        HTA_heap_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        HTA_heap_1_d0 = offset_new_node1_1_fu_1281_p2;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        HTA_heap_1_d0 = offset_new_node0_fu_1231_p2;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        HTA_heap_1_d0 = offset_new_node0_2_fu_1155_p2;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        HTA_heap_1_d0 = offset_new_node1_fu_1079_p2;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        HTA_heap_1_d0 = weight1_1_reg_1715;
    end else if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state8))) begin
        HTA_heap_1_d0 = 32'd4294967295;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        HTA_heap_1_d0 = 32'd10000;
    end else begin
        HTA_heap_1_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state8) | ((or_cond_reg_1663 == 1'd0) & (1'b1 == ap_CS_fsm_state31) & (brmerge_demorgan_reg_1736 == 1'd1)) | ((tmp_41_fu_1272_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state26)) | ((tmp_44_fu_1196_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state23)) | ((tmp_49_fu_1120_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state19)) | ((1'b1 == ap_CS_fsm_state4) & (tmp_4_fu_658_p1 == 1'd1) & (tmp_5_fu_643_p2 == 1'd1)) | ((1'b0 == ap_block_state16_io) & (1'b1 == ap_CS_fsm_state16)))) begin
        HTA_heap_1_we0 = 1'b1;
    end else begin
        HTA_heap_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == alloc_HTA_addr_ap_vld) & (1'b1 == ap_CS_fsm_state2))) begin
        alloc_HTA_addr_ap_ack = 1'b1;
    end else begin
        alloc_HTA_addr_ap_ack = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        alloc_HTA_addr_blk_n = alloc_HTA_addr_ap_vld;
    end else begin
        alloc_HTA_addr_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (ap_reg_ioackin_alloc_HTA_cmd_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        alloc_HTA_cmd_ap_vld = 1'b1;
    end else begin
        alloc_HTA_cmd_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        alloc_HTA_cmd_blk_n = alloc_HTA_cmd_ap_ack;
    end else begin
        alloc_HTA_cmd_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (ap_reg_ioackin_alloc_HTA_free_target_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        alloc_HTA_free_target_ap_vld = 1'b1;
    end else begin
        alloc_HTA_free_target_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        alloc_HTA_free_target_blk_n = alloc_HTA_free_target_ap_ack;
    end else begin
        alloc_HTA_free_target_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (ap_reg_ioackin_alloc_HTA_size_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        alloc_HTA_size_ap_vld = 1'b1;
    end else begin
        alloc_HTA_size_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        alloc_HTA_size_blk_n = alloc_HTA_size_ap_ack;
    end else begin
        alloc_HTA_size_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == alloc_KWTA_addr_ap_vld) & (1'b1 == ap_CS_fsm_state29)) | ((1'b1 == alloc_KWTA_addr_ap_vld) & (1'b1 == ap_CS_fsm_state18)) | ((1'b1 == alloc_KWTA_addr_ap_vld) & (1'b1 == ap_CS_fsm_state22)) | ((1'b1 == alloc_KWTA_addr_ap_vld) & (1'b1 == ap_CS_fsm_state25)) | ((1'b1 == alloc_KWTA_addr_ap_vld) & (1'b1 == ap_CS_fsm_state7)))) begin
        alloc_KWTA_addr_ap_ack = 1'b1;
    end else begin
        alloc_KWTA_addr_ap_ack = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state7))) begin
        alloc_KWTA_addr_blk_n = alloc_KWTA_addr_ap_vld;
    end else begin
        alloc_KWTA_addr_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        alloc_KWTA_cmd = 8'd3;
    end else if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state6) | ((1'b1 == ap_CS_fsm_state16) & (brmerge_demorgan_fu_1073_p2 == 1'd1)))) begin
        alloc_KWTA_cmd = 8'd2;
    end else begin
        alloc_KWTA_cmd = 'bx;
    end
end

always @ (*) begin
    if ((((ap_reg_ioackin_alloc_KWTA_cmd_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state28)) | ((ap_reg_ioackin_alloc_KWTA_cmd_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state33)) | ((ap_reg_ioackin_alloc_KWTA_cmd_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state17)) | ((ap_reg_ioackin_alloc_KWTA_cmd_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state21)) | ((ap_reg_ioackin_alloc_KWTA_cmd_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state16) & (brmerge_demorgan_fu_1073_p2 == 1'd1)) | ((ap_reg_ioackin_alloc_KWTA_cmd_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state6)))) begin
        alloc_KWTA_cmd_ap_vld = 1'b1;
    end else begin
        alloc_KWTA_cmd_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state6) | ((1'b1 == ap_CS_fsm_state16) & (brmerge_demorgan_fu_1073_p2 == 1'd1)))) begin
        alloc_KWTA_cmd_blk_n = alloc_KWTA_cmd_ap_ack;
    end else begin
        alloc_KWTA_cmd_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        alloc_KWTA_free_target = free_target_assign_reg_1789;
    end else if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state6) | ((1'b1 == ap_CS_fsm_state16) & (brmerge_demorgan_fu_1073_p2 == 1'd1)))) begin
        alloc_KWTA_free_target = 32'd0;
    end else begin
        alloc_KWTA_free_target = 'bx;
    end
end

always @ (*) begin
    if ((((ap_reg_ioackin_alloc_KWTA_free_target_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state28)) | ((ap_reg_ioackin_alloc_KWTA_free_target_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state33)) | ((ap_reg_ioackin_alloc_KWTA_free_target_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state17)) | ((ap_reg_ioackin_alloc_KWTA_free_target_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state21)) | ((ap_reg_ioackin_alloc_KWTA_free_target_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state16) & (brmerge_demorgan_fu_1073_p2 == 1'd1)) | ((ap_reg_ioackin_alloc_KWTA_free_target_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state6)))) begin
        alloc_KWTA_free_target_ap_vld = 1'b1;
    end else begin
        alloc_KWTA_free_target_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state6) | ((1'b1 == ap_CS_fsm_state16) & (brmerge_demorgan_fu_1073_p2 == 1'd1)))) begin
        alloc_KWTA_free_target_blk_n = alloc_KWTA_free_target_ap_ack;
    end else begin
        alloc_KWTA_free_target_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        alloc_KWTA_size = 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state6) | ((1'b1 == ap_CS_fsm_state16) & (brmerge_demorgan_fu_1073_p2 == 1'd1)))) begin
        alloc_KWTA_size = 32'd1;
    end else begin
        alloc_KWTA_size = 'bx;
    end
end

always @ (*) begin
    if ((((ap_reg_ioackin_alloc_KWTA_size_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state28)) | ((ap_reg_ioackin_alloc_KWTA_size_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state33)) | ((ap_reg_ioackin_alloc_KWTA_size_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state17)) | ((ap_reg_ioackin_alloc_KWTA_size_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state21)) | ((ap_reg_ioackin_alloc_KWTA_size_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state16) & (brmerge_demorgan_fu_1073_p2 == 1'd1)) | ((ap_reg_ioackin_alloc_KWTA_size_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state6)))) begin
        alloc_KWTA_size_ap_vld = 1'b1;
    end else begin
        alloc_KWTA_size_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state6) | ((1'b1 == ap_CS_fsm_state16) & (brmerge_demorgan_fu_1073_p2 == 1'd1)))) begin
        alloc_KWTA_size_blk_n = alloc_KWTA_size_ap_ack;
    end else begin
        alloc_KWTA_size_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_s_fu_1433_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state35))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_s_fu_1433_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state35))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_alloc_HTA_cmd_ap_ack == 1'b0)) begin
        ap_sig_ioackin_alloc_HTA_cmd_ap_ack = alloc_HTA_cmd_ap_ack;
    end else begin
        ap_sig_ioackin_alloc_HTA_cmd_ap_ack = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_alloc_HTA_free_target_ap_ack == 1'b0)) begin
        ap_sig_ioackin_alloc_HTA_free_target_ap_ack = alloc_HTA_free_target_ap_ack;
    end else begin
        ap_sig_ioackin_alloc_HTA_free_target_ap_ack = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_alloc_HTA_size_ap_ack == 1'b0)) begin
        ap_sig_ioackin_alloc_HTA_size_ap_ack = alloc_HTA_size_ap_ack;
    end else begin
        ap_sig_ioackin_alloc_HTA_size_ap_ack = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_alloc_KWTA_cmd_ap_ack == 1'b0)) begin
        ap_sig_ioackin_alloc_KWTA_cmd_ap_ack = alloc_KWTA_cmd_ap_ack;
    end else begin
        ap_sig_ioackin_alloc_KWTA_cmd_ap_ack = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_alloc_KWTA_free_target_ap_ack == 1'b0)) begin
        ap_sig_ioackin_alloc_KWTA_free_target_ap_ack = alloc_KWTA_free_target_ap_ack;
    end else begin
        ap_sig_ioackin_alloc_KWTA_free_target_ap_ack = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_alloc_KWTA_size_ap_ack == 1'b0)) begin
        ap_sig_ioackin_alloc_KWTA_size_ap_ack = alloc_KWTA_size_ap_ack;
    end else begin
        ap_sig_ioackin_alloc_KWTA_size_ap_ack = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        dis_output_ce0 = 1'b1;
    end else begin
        dis_output_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        dis_output_we0 = 1'b1;
    end else begin
        dis_output_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        in_list_address0 = tmp_3_reg_1601;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        in_list_address0 = in_list_addr_3_reg_1694;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        in_list_address0 = tmp_20_fu_1012_p1;
    end else if (((tmp_8_fu_687_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        in_list_address0 = 64'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (tmp_8_fu_687_p2 == 1'd1))) begin
        in_list_address0 = tmp_9_fu_698_p1;
    end else begin
        in_list_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        in_list_address1 = in_list_addr_3_reg_1694;
    end else if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state30))) begin
        in_list_address1 = in_list_addr_4_reg_1705;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        in_list_address1 = tmp_23_fu_1021_p1;
    end else begin
        in_list_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state15) | ((tmp_8_fu_687_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5)) | ((1'b1 == ap_CS_fsm_state5) & (tmp_8_fu_687_p2 == 1'd1)))) begin
        in_list_ce0 = 1'b1;
    end else begin
        in_list_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state15))) begin
        in_list_ce1 = 1'b1;
    end else begin
        in_list_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state30) | ((tmp_8_fu_687_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5)))) begin
        in_list_d0 = 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state34) | ((1'b1 == ap_CS_fsm_state5) & (tmp_8_fu_687_p2 == 1'd1)))) begin
        in_list_d0 = 1'd0;
    end else begin
        in_list_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state30) | ((tmp_8_fu_687_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5)) | ((1'b1 == ap_CS_fsm_state5) & (tmp_8_fu_687_p2 == 1'd1)))) begin
        in_list_we0 = 1'b1;
    end else begin
        in_list_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state30))) begin
        in_list_we1 = 1'b1;
    end else begin
        in_list_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        map_r_ce0 = 1'b1;
    end else begin
        map_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        map_r_ce1 = 1'b1;
    end else begin
        map_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == alloc_HTA_addr_ap_vld) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((tmp_5_fu_643_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (tmp_8_fu_687_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b0 == ap_block_state6_io) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == alloc_KWTA_addr_ap_vld) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (tmp_7_fu_768_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            if (((tmp_10_fu_862_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == ap_CS_fsm_state14) & (or_cond_fu_943_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            if (((update1_fu_1068_p2 == 1'd0) & (update0_fu_1057_p2 == 1'd0) & (brmerge_demorgan_fu_1073_p2 == 1'd0) & (1'b0 == ap_block_state16_io) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else if (((update0_fu_1057_p2 == 1'd0) & (brmerge_demorgan_fu_1073_p2 == 1'd0) & (1'b0 == ap_block_state16_io) & (1'b1 == ap_CS_fsm_state16) & (update1_fu_1068_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else if (((brmerge_demorgan_fu_1073_p2 == 1'd0) & (1'b0 == ap_block_state16_io) & (1'b1 == ap_CS_fsm_state16) & (update0_fu_1057_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else if (((1'b0 == ap_block_state16_io) & (1'b1 == ap_CS_fsm_state16) & (brmerge_demorgan_fu_1073_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            if (((1'b0 == ap_block_state17_io) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            if (((1'b1 == alloc_KWTA_addr_ap_vld) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state21 : begin
            if (((1'b0 == ap_block_state21_io) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            if (((1'b1 == alloc_KWTA_addr_ap_vld) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state25 : begin
            if (((1'b1 == alloc_KWTA_addr_ap_vld) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            if (((1'b0 == ap_block_state28_io) & (1'b1 == ap_CS_fsm_state28))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state29 : begin
            if (((1'b1 == alloc_KWTA_addr_ap_vld) & (1'b1 == ap_CS_fsm_state29))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            if (((1'b0 == ap_block_state33_io) & (1'b1 == ap_CS_fsm_state33))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state35 : begin
            if (((tmp_s_fu_1433_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state35))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign KWTA_heap_0_sum1_fu_778_p2 = (13'd2000 + tmp_27_fu_774_p1);

assign KWTA_heap_0_sum2_fu_1251_p2 = (13'd2000 + tmp_32_cast_fu_1243_p3);

assign KWTA_heap_0_sum3_fu_1300_p2 = (13'd2000 + tmp_33_cast_fu_1292_p3);

assign KWTA_heap_0_sum4_fu_1175_p2 = (13'd2000 + tmp_34_cast_fu_1167_p3);

assign KWTA_heap_0_sum5_fu_1099_p2 = (13'd2000 + tmp_35_cast_fu_1091_p3);

assign KWTA_heap_0_sum_fu_721_p2 = (13'd2000 + tmp_cast_fu_713_p3);

assign alloc_HTA_cmd = 8'd2;

assign alloc_HTA_free_target = 32'd0;

assign alloc_HTA_size = n;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state16_io = (((ap_sig_ioackin_alloc_KWTA_free_target_ap_ack == 1'b0) & (brmerge_demorgan_fu_1073_p2 == 1'd1)) | ((ap_sig_ioackin_alloc_KWTA_size_ap_ack == 1'b0) & (brmerge_demorgan_fu_1073_p2 == 1'd1)) | ((ap_sig_ioackin_alloc_KWTA_cmd_ap_ack == 1'b0) & (brmerge_demorgan_fu_1073_p2 == 1'd1)));
end

always @ (*) begin
    ap_block_state17_io = ((ap_sig_ioackin_alloc_KWTA_free_target_ap_ack == 1'b0) | (ap_sig_ioackin_alloc_KWTA_size_ap_ack == 1'b0) | (ap_sig_ioackin_alloc_KWTA_cmd_ap_ack == 1'b0));
end

always @ (*) begin
    ap_block_state1_io = ((ap_sig_ioackin_alloc_HTA_free_target_ap_ack == 1'b0) | (ap_sig_ioackin_alloc_HTA_size_ap_ack == 1'b0) | (ap_sig_ioackin_alloc_HTA_cmd_ap_ack == 1'b0));
end

always @ (*) begin
    ap_block_state21_io = ((ap_sig_ioackin_alloc_KWTA_free_target_ap_ack == 1'b0) | (ap_sig_ioackin_alloc_KWTA_size_ap_ack == 1'b0) | (ap_sig_ioackin_alloc_KWTA_cmd_ap_ack == 1'b0));
end

always @ (*) begin
    ap_block_state28_io = ((ap_sig_ioackin_alloc_KWTA_free_target_ap_ack == 1'b0) | (ap_sig_ioackin_alloc_KWTA_size_ap_ack == 1'b0) | (ap_sig_ioackin_alloc_KWTA_cmd_ap_ack == 1'b0));
end

always @ (*) begin
    ap_block_state33_io = ((ap_sig_ioackin_alloc_KWTA_free_target_ap_ack == 1'b0) | (ap_sig_ioackin_alloc_KWTA_size_ap_ack == 1'b0) | (ap_sig_ioackin_alloc_KWTA_cmd_ap_ack == 1'b0));
end

always @ (*) begin
    ap_block_state6_io = ((ap_sig_ioackin_alloc_KWTA_free_target_ap_ack == 1'b0) | (ap_sig_ioackin_alloc_KWTA_size_ap_ack == 1'b0) | (ap_sig_ioackin_alloc_KWTA_cmd_ap_ack == 1'b0));
end

assign brmerge_demorgan_fu_1073_p2 = (update1_fu_1068_p2 & update0_fu_1057_p2);

assign dis_output_address0 = tmp_11_fu_1469_p1;

assign dis_output_d0 = ((tmp_34_fu_1474_p1[0:0] === 1'b1) ? HTA_heap_1_q0 : HTA_heap_0_q0);

assign extLd_fu_858_p1 = $signed(N_2);

assign free_target_assign_fu_1421_p3 = ((tmp_37_fu_1373_p3[0:0] === 1'b1) ? p_neg_t_fu_1401_p2 : tmp_19_fu_1417_p1);

assign grp_fu_553_p2 = (13'd2001 + tmp_38_reg_1725);

assign grp_fu_558_p4 = {{grp_fu_553_p2[12:1]}};

assign guard_variable_for_H_1_load_fu_576_p1 = guard_variable_for_H;

assign i0_fu_878_p2 = i_2_reg_527 << 32'd1;

assign i1_fu_884_p2 = (i0_fu_878_p2 | 32'd1);

assign i_1_cast_fu_683_p1 = i_1_reg_506;

assign i_3_cast_fu_1429_p1 = i_3_reg_538;

assign i_4_fu_648_p2 = (i_reg_495 + 31'd1);

assign i_5_fu_692_p2 = (i_1_reg_506 + 31'd1);

assign i_6_fu_1438_p2 = (i_3_reg_538 + 31'd1);

assign i_7_fu_868_p2 = (i_2_reg_527 + 32'd1);

assign i_cast_fu_639_p1 = i_reg_495;

assign local_dis_0_sum1_fu_662_p2 = (tmp_1_fu_654_p1 + tmp_4_cast_reg_1504);

assign local_dis_0_sum2_fu_820_p2 = (tmp_4_cast_reg_1504 + tmp_31_fu_812_p1);

assign local_dis_0_sum6_fu_966_p2 = (tmp_4_cast_reg_1504 + tmp_23_cast_fu_959_p3);

assign local_dis_0_sum7_fu_992_p2 = (tmp_4_cast_reg_1504 + tmp_26_cast_fu_986_p2);

assign local_dis_0_sum_fu_1448_p2 = (tmp_33_fu_1444_p1 + tmp_4_cast_reg_1504);

assign map_r_address0 = tmp_13_fu_895_p1;

assign map_r_address1 = tmp_15_fu_905_p1;

assign newIndex10_cast_fu_1007_p1 = newIndex10_fu_997_p4;

assign newIndex10_fu_997_p4 = {{local_dis_0_sum7_fu_992_p2[12:1]}};

assign newIndex11_cast_fu_1267_p1 = newIndex11_fu_1257_p4;

assign newIndex11_fu_1257_p4 = {{KWTA_heap_0_sum2_fu_1251_p2[12:1]}};

assign newIndex12_cast_fu_1275_p1 = grp_fu_558_p4;

assign newIndex13_cast_fu_1191_p1 = newIndex13_fu_1181_p4;

assign newIndex13_fu_1181_p4 = {{KWTA_heap_0_sum4_fu_1175_p2[12:1]}};

assign newIndex14_cast_fu_1200_p1 = grp_fu_558_p4;

assign newIndex15_cast_fu_1316_p1 = newIndex15_fu_1306_p4;

assign newIndex15_fu_1306_p4 = {{KWTA_heap_0_sum3_fu_1300_p2[12:1]}};

assign newIndex16_cast_fu_1336_p1 = newIndex16_fu_1326_p4;

assign newIndex16_fu_1326_p4 = {{p_sum2_fu_1321_p2[12:1]}};

assign newIndex17_cast_fu_1362_p1 = newIndex17_reg_1779;

assign newIndex18_cast_fu_1115_p1 = newIndex18_fu_1105_p4;

assign newIndex18_fu_1105_p4 = {{KWTA_heap_0_sum5_fu_1099_p2[12:1]}};

assign newIndex19_cast_fu_1151_p1 = newIndex19_reg_1748;

assign newIndex1_fu_625_p4 = {{status_6_reg_1498[19:1]}};

assign newIndex20_cast_fu_1124_p1 = grp_fu_558_p4;

assign newIndex21_cast_fu_1227_p1 = newIndex21_reg_1761;

assign newIndex2_fu_634_p1 = newIndex1_fu_625_p4;

assign newIndex3_cast_fu_677_p1 = newIndex3_fu_667_p4;

assign newIndex3_fu_667_p4 = {{local_dis_0_sum1_fu_662_p2[12:1]}};

assign newIndex4_cast_fu_737_p1 = newIndex4_fu_727_p4;

assign newIndex4_fu_727_p4 = {{KWTA_heap_0_sum_fu_721_p2[12:1]}};

assign newIndex5_cast_fu_758_p1 = newIndex5_fu_748_p4;

assign newIndex5_fu_748_p4 = {{p_sum_fu_742_p2[12:1]}};

assign newIndex6_cast_fu_794_p1 = newIndex6_fu_784_p4;

assign newIndex6_fu_784_p4 = {{KWTA_heap_0_sum1_fu_778_p2[12:1]}};

assign newIndex7_cast_fu_835_p1 = newIndex7_reg_1586;

assign newIndex8_cast_fu_925_p1 = newIndex8_fu_915_p4;

assign newIndex8_fu_915_p4 = {{p_sum3_fu_910_p2[12:1]}};

assign newIndex9_cast_fu_981_p1 = newIndex9_fu_971_p4;

assign newIndex9_fu_971_p4 = {{local_dis_0_sum6_fu_966_p2[12:1]}};

assign newIndex_cast_fu_1463_p1 = newIndex_fu_1453_p4;

assign newIndex_fu_1453_p4 = {{local_dis_0_sum_fu_1448_p2[12:1]}};

assign now_dis_fu_843_p3 = ((tmp_32_reg_1581[0:0] === 1'b1) ? HTA_heap_1_q0 : HTA_heap_0_q0);

assign now_fu_804_p3 = ((tmp_28_fu_800_p1[0:0] === 1'b1) ? HTA_heap_1_q0 : HTA_heap_0_q0);

assign offset_head_3_fu_703_p2 = reg_568 << 32'd1;

assign offset_new_node0_2_fu_1155_p2 = reg_568 << 32'd1;

assign offset_new_node0_fu_1231_p2 = reg_568 << 32'd1;

assign offset_new_node1_1_fu_1281_p2 = reg_568 << 32'd1;

assign offset_new_node1_fu_1079_p2 = reg_568 << 32'd1;

assign offset_next_fu_1366_p3 = ((tmp_28_reg_1570[0:0] === 1'b1) ? HTA_heap_0_q0 : HTA_heap_1_q0);

assign or_cond_fu_943_p2 = (tmp_17_fu_937_p2 & tmp_16_fu_931_p2);

assign p_lshr_f_fu_1407_p4 = {{offset_head_reg_517[31:1]}};

assign p_lshr_fu_1387_p4 = {{p_neg_fu_1381_p2[31:1]}};

assign p_neg_fu_1381_p2 = (32'd0 - offset_head_reg_517);

assign p_neg_t_fu_1401_p2 = (32'd0 - tmp_18_fu_1397_p1);

assign p_sum2_fu_1321_p2 = (13'd2001 + tmp_32_cast_reg_1766);

assign p_sum3_fu_910_p2 = (tmp_27_reg_1555 + 13'd2001);

assign p_sum4_fu_1341_p2 = (13'd2001 + tmp_33_cast_fu_1292_p3);

assign p_sum6_fu_1206_p2 = (tmp_34_cast_fu_1167_p3 + 13'd2001);

assign p_sum8_fu_1130_p2 = (tmp_35_cast_fu_1091_p3 + 13'd2001);

assign p_sum_fu_742_p2 = (13'd2001 + tmp_cast_fu_713_p3);

assign tmp_10_fu_862_p2 = (($signed(i_2_reg_527) < $signed(extLd_fu_858_p1)) ? 1'b1 : 1'b0);

assign tmp_11_fu_1469_p1 = i_3_reg_538;

assign tmp_12_fu_890_p2 = ($signed(tmp_6_reg_1612) + $signed(i0_fu_878_p2));

assign tmp_13_fu_895_p1 = $signed(tmp_12_fu_890_p2);

assign tmp_14_fu_900_p2 = ($signed(tmp_6_reg_1612) + $signed(i1_fu_884_p2));

assign tmp_15_fu_905_p1 = $signed(tmp_14_fu_900_p2);

assign tmp_16_fu_931_p2 = (($signed(map_r_q0) > $signed(32'd9999)) ? 1'b1 : 1'b0);

assign tmp_17_fu_937_p2 = (($signed(map_r_q1) > $signed(32'd9999)) ? 1'b1 : 1'b0);

assign tmp_18_fu_1397_p1 = p_lshr_fu_1387_p4;

assign tmp_19_fu_1417_p1 = p_lshr_f_fu_1407_p4;

assign tmp_1_fu_654_p1 = i_reg_495[12:0];

assign tmp_1_i_fu_580_p0 = n;

assign tmp_1_i_fu_580_p2 = ($signed(tmp_1_i_fu_580_p0) + $signed(32'd1));

assign tmp_20_fu_1012_p1 = i0_reg_1631;

assign tmp_21_fu_1016_p2 = (($signed(weight0_reg_1667) < $signed(HTA_heap_0_q0)) ? 1'b1 : 1'b0);

assign tmp_22_fu_1051_p2 = (in_list_q0 ^ 1'd1);

assign tmp_23_cast_fu_959_p3 = {{tmp_35_reg_1626}, {1'd0}};

assign tmp_23_fu_1021_p1 = i1_reg_1637;

assign tmp_24_fu_1025_p2 = (($signed(weight1_reg_1673) < $signed(HTA_heap_1_q0)) ? 1'b1 : 1'b0);

assign tmp_25_fu_1062_p2 = (in_list_q1 ^ 1'd1);

assign tmp_26_cast_fu_986_p2 = (tmp_23_cast_fu_959_p3 | 13'd1);

assign tmp_26_fu_709_p1 = reg_568[11:0];

assign tmp_27_fu_774_p1 = offset_head_reg_517[12:0];

assign tmp_28_fu_800_p1 = offset_head_reg_517[0:0];

assign tmp_31_fu_812_p1 = now_fu_804_p3[12:0];

assign tmp_32_cast_fu_1243_p3 = {{tmp_40_fu_1239_p1}, {1'd0}};

assign tmp_32_fu_816_p1 = now_fu_804_p3[0:0];

assign tmp_33_cast_fu_1292_p3 = {{tmp_46_fu_1288_p1}, {1'd0}};

assign tmp_33_fu_1444_p1 = i_3_reg_538[12:0];

assign tmp_34_cast_fu_1167_p3 = {{tmp_43_fu_1163_p1}, {1'd0}};

assign tmp_34_fu_1474_p1 = i_3_reg_538[0:0];

assign tmp_35_cast_fu_1091_p3 = {{tmp_48_fu_1087_p1}, {1'd0}};

assign tmp_35_fu_874_p1 = i_2_reg_527[11:0];

assign tmp_37_fu_1373_p3 = offset_head_reg_517[32'd31];

assign tmp_38_fu_1047_p1 = offset_tail_fu_124[12:0];

assign tmp_3_fu_840_p1 = now_reg_1575;

assign tmp_40_fu_1239_p1 = reg_568[11:0];

assign tmp_41_fu_1272_p1 = offset_tail_load_reg_1720[0:0];

assign tmp_43_fu_1163_p1 = reg_568[11:0];

assign tmp_44_fu_1196_p1 = reg_572[0:0];

assign tmp_46_fu_1288_p1 = reg_568[11:0];

assign tmp_48_fu_1087_p1 = reg_568[11:0];

assign tmp_49_fu_1120_p1 = reg_572[0:0];

assign tmp_4_cast_fu_617_p3 = {{tmp_fu_608_p4}, {1'd0}};

assign tmp_4_fu_658_p1 = i_reg_495[0:0];

assign tmp_5_fu_643_p1 = n;

assign tmp_5_fu_643_p2 = (($signed(i_cast_fu_639_p1) < $signed(tmp_5_fu_643_p1)) ? 1'b1 : 1'b0);

assign tmp_6_fu_850_p0 = n;

assign tmp_6_fu_850_p2 = ($signed(tmp_6_fu_850_p0) * $signed(now_reg_1575));

assign tmp_7_fu_768_p2 = ((offset_head_reg_517 == 32'd4294967295) ? 1'b1 : 1'b0);

assign tmp_8_fu_687_p1 = n;

assign tmp_8_fu_687_p2 = (($signed(i_1_cast_fu_683_p1) < $signed(tmp_8_fu_687_p1)) ? 1'b1 : 1'b0);

assign tmp_9_fu_698_p1 = i_1_reg_506;

assign tmp_cast_fu_713_p3 = {{tmp_26_fu_709_p1}, {1'd0}};

assign tmp_fu_608_p4 = {{status_6_reg_1498[12:1]}};

assign tmp_s_fu_1433_p1 = n;

assign tmp_s_fu_1433_p2 = (($signed(i_3_cast_fu_1429_p1) < $signed(tmp_s_fu_1433_p1)) ? 1'b1 : 1'b0);

assign update0_fu_1057_p2 = (tmp_22_fu_1051_p2 & tmp_21_reg_1689);

assign update1_fu_1068_p2 = (tmp_25_fu_1062_p2 & tmp_24_reg_1700);

assign weight0_HTA_heap_loa_fu_1030_p3 = ((tmp_21_fu_1016_p2[0:0] === 1'b1) ? weight0_reg_1667 : HTA_heap_0_q0);

assign weight0_fu_949_p2 = (now_dis_reg_1606 + map_r_q0);

assign weight1_1_fu_1037_p3 = ((tmp_24_fu_1025_p2[0:0] === 1'b1) ? weight1_reg_1673 : HTA_heap_1_q0);

assign weight1_fu_954_p2 = (now_dis_reg_1606 + map_r_q1);

always @ (posedge ap_clk) begin
    reg_572[0] <= 1'b0;
    tmp_4_cast_reg_1504[0] <= 1'b0;
    i0_reg_1631[0] <= 1'b0;
    i1_reg_1637[0] <= 1'b1;
    in_list_addr_3_reg_1694[0] <= 1'b0;
    in_list_addr_4_reg_1705[0] <= 1'b1;
    offset_tail_load_reg_1720[0] <= 1'b0;
    tmp_38_reg_1725[0] <= 1'b0;
    tmp_32_cast_reg_1766[0] <= 1'b0;
    offset_tail_fu_124[0] <= 1'b0;
end

endmodule //HLS_SPFA_KWTA
