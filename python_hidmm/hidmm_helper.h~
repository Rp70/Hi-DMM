template <int unused> struct ap_int
{
    int val;
    ap_int(int val = 0) : val(val) {}

    // assignment operator modifies object, therefore non-const
    ap_int &operator=(const ap_int tmp)
    {
        val = tmp.val;
        return *this;
    }

    ap_int &operator=(const int tmp)
    {
        val = tmp;
        return *this;
    }

    ap_int &operator++()
    {
        val = val+1;
        return *this;
    }
    
    bool operator==(const ap_int &a) const { return (val == a.val); }

};

template <int unused> int operator+(const int cL, const ap_int<unused> cR) ;
template <int unused> int operator+(const ap_int<unused> cL, const int cR) ;
template <int unused, int unused1> int operator+(const ap_int<unused> cL, const ap_int<unused1> cR) ;
template <int unused> int operator-(const int cL, const ap_int<unused> cR) ;
template <int unused> int operator-(const ap_int<unused> cL, const int cR) ;
template <int unused, int unused1> int operator-(const ap_int<unused> cL, const ap_int<unused1> cR) ;
template <int unused> int operator*(const int cL, const ap_int<unused> cR) ;
template <int unused> int operator*(const ap_int<unused> cL, const int cR) ;
template <int unused, int unused1> int operator*(const ap_int<unused> cL, const ap_int<unused1> cR) ;
template <int unused> int operator/(const int cL, const ap_int<unused> cR) ;
template <int unused> int operator/(const ap_int<unused> cL, const int cR) ;
template <int unused, int unused1> int operator/(const ap_int<unused> cL, const ap_int<unused1> cR) ;
template <int unused> int operator&(const int cL, const ap_int<unused> cR) ;
template <int unused> int operator&(const ap_int<unused> cL, const int cR) ;
template <int unused, int unused1> int operator&(const ap_int<unused> cL, const ap_int<unused1> cR) ;
template <int unused> int operator|(const int cL, const ap_int<unused> cR) ;
template <int unused> int operator|(const ap_int<unused> cL, const int cR) ;
template <int unused, int unused1> int operator|(const ap_int<unused> cL, const ap_int<unused1> cR) ;
template <int unused> int operator<<(const int cL, const ap_int<unused> cR) ;
template <int unused> int operator<<(const ap_int<unused> cL, const int cR) ;
template <int unused, int unused1> int operator<<(const ap_int<unused> cL, const ap_int<unused1> cR) ;
template <int unused> int operator>>(const int cL, const ap_int<unused> cR) ;
template <int unused> int operator>>(const ap_int<unused> cL, const int cR) ;
template <int unused, int unused1> int operator>>(const ap_int<unused> cL, const ap_int<unused1> cR) ;
template <int unused> bool operator<(const int cL, const ap_int<unused> cR) ;
template <int unused> bool operator<(const ap_int<unused> cL, const int cR) ;
template <int unused, int unused1> bool operator<(const ap_int<unused> cL, const ap_int<unused1> cR) ;
template <int unused> bool operator>(const int cL, const ap_int<unused> cR) ;
template <int unused> bool operator>(const ap_int<unused> cL, const int cR) ;
template <int unused, int unused1> bool operator>(const ap_int<unused> cL, const ap_int<unused1> cR) ;
template <int unused> bool operator==(const int cL, const ap_int<unused> cR) ;
template <int unused> bool operator==(const ap_int<unused> cL, const int cR) ;
template <int unused, int unused1 bool operator==(const ap_int<unused> cL, const ap_int<unused1> cR) ;

template <int unused> struct ap_uint
{
    int val;
   
   
    
    ap_uint &operator=(const ap_uint tmp)
    {
        val = tmp.val;
        return *this;
    }
   
 
    ap_uint &operator=(const int tmp)
    {
        val = tmp;
        return *this;
    }

    ap_uint &operator++()
    {
        val = val+1;
        return *this;
    }

};
template <int unused> int operator+(const int cL, const ap_uint<unused> cR) ;
template <int unused> int operator+(const ap_uint<unused> cL, const int cR) ;
template <int unused, int unused1> int operator+(const ap_uint<unused> cL, const ap_uint<unused1> cR) ;
template <int unused> int operator-(const int cL, const ap_uint<unused> cR) ;
template <int unused> int operator-(const ap_uint<unused> cL, const int cR) ;
template <int unused, int unused1> int operator-(const ap_uint<unused> cL, const ap_uint<unused1> cR) ;
template <int unused> int operator*(const int cL, const ap_uint<unused> cR) ;
template <int unused> int operator*(const ap_uint<unused> cL, const int cR) ;
template <int unused, int unused1> int operator*(const ap_uint<unused> cL, const ap_uint<unused1> cR) ;
template <int unused> int operator/(const int cL, const ap_uint<unused> cR) ;
template <int unused> int operator/(const ap_uint<unused> cL, const int cR) ;
template <int unused, int unused1> int operator/(const ap_uint<unused> cL, const ap_uint<unused1> cR) ;
template <int unused> int operator&(const int cL, const ap_uint<unused> cR) ;
template <int unused> int operator&(const ap_uint<unused> cL, const int cR) ;
template <int unused, int unused1> int operator&(const ap_uint<unused> cL, const ap_uint<unused1> cR) ;
template <int unused> int operator|(const int cL, const ap_uint<unused> cR) ;
template <int unused> int operator|(const ap_uint<unused> cL, const int cR) ;
template <int unused, int unused1> int operator|(const ap_uint<unused> cL, const ap_uint<unused1> cR) ;


template <int a, int b, int c, int d> struct ap_fixed
{
    int val;
   
   
    
    ap_fixed &operator=(const ap_fixed tmp)
    {
        val = tmp.val;
        return *this;
    }
   
 
    ap_fixed &operator=(const int tmp)
    {
        val = tmp;
        return *this;
    }

};
template <int a, int b, int c, int d> int operator+(const int cL, const ap_fixed<a,b,c,d> cR) ;
template <int a, int b, int c, int d> int operator+(const ap_fixed<a,b,c,d> cL, const int cR) ;
template <int a, int b, int c, int d, int a1, int b1, int c1, int d1> int operator+(const ap_fixed<a,b,c,d> cL, const ap_fixed<a1,b1,c1,d1> cR) ;
template <int a, int b, int c, int d> int operator-(const int cL, const ap_fixed<a,b,c,d> cR) ;
template <int a, int b, int c, int d> int operator-(const ap_fixed<a,b,c,d> cL, const int cR) ;
template <int a, int b, int c, int d, int a1, int b1, int c1, int d1> int operator-(const ap_fixed<a,b,c,d> cL, const ap_fixed<a1,b1,c1,d1> cR) ;
template <int a, int b, int c, int d> int operator*(const int cL, const ap_fixed<a,b,c,d> cR) ;
template <int a, int b, int c, int d> int operator*(const ap_fixed<a,b,c,d> cL, const int cR) ;
template <int a, int b, int c, int d, int a1, int b1, int c1, int d1> int operator*(const ap_fixed<a,b,c,d> cL, const ap_fixed<a1,b1,c1,d1> cR) ;
template <int a, int b, int c, int d> int operator/(const int cL, const ap_fixed<a,b,c,d> cR) ;
template <int a, int b, int c, int d> int operator/(const ap_fixed<a,b,c,d> cL, const int cR) ;
template <int a, int b, int c, int d, int a1, int b1, int c1, int d1> int operator/(const ap_fixed<a,b,c,d> cL, const ap_fixed<a1,b1,c1,d1> cR) ;
template <int a, int b, int c, int d> int operator&(const int cL, const ap_fixed<a,b,c,d> cR) ;
template <int a, int b, int c, int d> int operator&(const ap_fixed<a,b,c,d> cL, const int cR) ;
template <int a, int b, int c, int d, int a1, int b1, int c1, int d1> int operator&(const ap_fixed<a,b,c,d> cL, const ap_fixed<a1,b1,c1,d1> cR) ;
template <int a, int b, int c, int d> int operator|(const int cL, const ap_fixed<a,b,c,d> cR) ;
template <int a, int b, int c, int d> int operator|(const ap_fixed<a,b,c,d> cL, const int cR) ;
template <int a, int b, int c, int d, int a1, int b1, int c1, int d1> int operator|(const ap_fixed<a,b,c,d> cL, const ap_fixed<a1,b1,c1,d1> cR) ;


void *malloc(unsigned int size) { return &size; }
