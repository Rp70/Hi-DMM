// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef __acc32kmau_req_cmd_H__
#define __acc32kmau_req_cmd_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct acc32kmau_req_cmd_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 2;
  static const unsigned AddressRange = 1024;
  static const unsigned AddressWidth = 10;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(acc32kmau_req_cmd_ram) {
        for (unsigned i = 0; i < 27 ; i = i + 1) {
            ram[i] = "0b10";
        }
        ram[27] = "0b11";
        ram[28] = "0b11";
        ram[29] = "0b11";
        for (unsigned i = 30; i < 37 ; i = i + 1) {
            ram[i] = "0b10";
        }
        ram[37] = "0b11";
        ram[38] = "0b11";
        ram[39] = "0b11";
        ram[40] = "0b11";
        for (unsigned i = 41; i < 47 ; i = i + 1) {
            ram[i] = "0b10";
        }
        ram[47] = "0b11";
        ram[48] = "0b11";
        ram[49] = "0b10";
        ram[50] = "0b10";
        ram[51] = "0b10";
        ram[52] = "0b11";
        ram[53] = "0b10";
        ram[54] = "0b10";
        ram[55] = "0b11";
        ram[56] = "0b10";
        ram[57] = "0b10";
        ram[58] = "0b10";
        ram[59] = "0b10";
        ram[60] = "0b11";
        ram[61] = "0b11";
        for (unsigned i = 62; i < 73 ; i = i + 1) {
            ram[i] = "0b10";
        }
        ram[73] = "0b11";
        ram[74] = "0b10";
        ram[75] = "0b10";
        ram[76] = "0b11";
        ram[77] = "0b10";
        ram[78] = "0b10";
        ram[79] = "0b10";
        ram[80] = "0b11";
        ram[81] = "0b10";
        ram[82] = "0b10";
        ram[83] = "0b10";
        ram[84] = "0b11";
        ram[85] = "0b11";
        ram[86] = "0b10";
        ram[87] = "0b10";
        ram[88] = "0b11";
        ram[89] = "0b10";
        ram[90] = "0b11";
        for (unsigned i = 91; i < 96 ; i = i + 1) {
            ram[i] = "0b10";
        }
        ram[96] = "0b11";
        ram[97] = "0b11";
        ram[98] = "0b11";
        ram[99] = "0b10";
        ram[100] = "0b11";
        ram[101] = "0b10";
        ram[102] = "0b10";
        ram[103] = "0b11";
        ram[104] = "0b10";
        ram[105] = "0b10";
        ram[106] = "0b11";
        ram[107] = "0b11";
        ram[108] = "0b10";
        ram[109] = "0b10";
        ram[110] = "0b10";
        ram[111] = "0b10";
        ram[112] = "0b11";
        ram[113] = "0b11";
        ram[114] = "0b11";
        ram[115] = "0b10";
        ram[116] = "0b11";
        for (unsigned i = 117; i < 122 ; i = i + 1) {
            ram[i] = "0b10";
        }
        ram[122] = "0b11";
        for (unsigned i = 123; i < 128 ; i = i + 1) {
            ram[i] = "0b10";
        }
        ram[128] = "0b11";
        ram[129] = "0b11";
        ram[130] = "0b10";
        ram[131] = "0b10";
        ram[132] = "0b11";
        ram[133] = "0b10";
        ram[134] = "0b11";
        ram[135] = "0b10";
        ram[136] = "0b11";
        ram[137] = "0b10";
        ram[138] = "0b11";
        for (unsigned i = 139; i < 145 ; i = i + 1) {
            ram[i] = "0b10";
        }
        ram[145] = "0b11";
        ram[146] = "0b11";
        ram[147] = "0b10";
        ram[148] = "0b10";
        ram[149] = "0b10";
        ram[150] = "0b11";
        for (unsigned i = 151; i < 157 ; i = i + 1) {
            ram[i] = "0b10";
        }
        ram[157] = "0b11";
        ram[158] = "0b10";
        ram[159] = "0b11";
        ram[160] = "0b10";
        ram[161] = "0b10";
        ram[162] = "0b11";
        ram[163] = "0b10";
        ram[164] = "0b11";
        ram[165] = "0b11";
        ram[166] = "0b10";
        ram[167] = "0b11";
        ram[168] = "0b10";
        ram[169] = "0b11";
        ram[170] = "0b11";
        ram[171] = "0b10";
        ram[172] = "0b11";
        ram[173] = "0b11";
        ram[174] = "0b10";
        ram[175] = "0b10";
        ram[176] = "0b10";
        ram[177] = "0b11";
        for (unsigned i = 178; i < 184 ; i = i + 1) {
            ram[i] = "0b10";
        }
        ram[184] = "0b11";
        for (unsigned i = 185; i < 190 ; i = i + 1) {
            ram[i] = "0b10";
        }
        ram[190] = "0b11";
        ram[191] = "0b11";
        ram[192] = "0b10";
        ram[193] = "0b11";
        ram[194] = "0b11";
        ram[195] = "0b10";
        ram[196] = "0b10";
        ram[197] = "0b11";
        ram[198] = "0b10";
        ram[199] = "0b11";
        ram[200] = "0b10";
        ram[201] = "0b10";
        ram[202] = "0b11";
        ram[203] = "0b11";
        ram[204] = "0b11";
        ram[205] = "0b10";
        ram[206] = "0b11";
        for (unsigned i = 207; i < 212 ; i = i + 1) {
            ram[i] = "0b10";
        }
        ram[212] = "0b11";
        ram[213] = "0b10";
        ram[214] = "0b10";
        ram[215] = "0b11";
        ram[216] = "0b10";
        ram[217] = "0b10";
        ram[218] = "0b10";
        ram[219] = "0b11";
        for (unsigned i = 220; i < 226 ; i = i + 1) {
            ram[i] = "0b10";
        }
        ram[226] = "0b11";
        ram[227] = "0b10";
        ram[228] = "0b10";
        ram[229] = "0b10";
        ram[230] = "0b10";
        ram[231] = "0b11";
        ram[232] = "0b10";
        ram[233] = "0b11";
        ram[234] = "0b11";
        ram[235] = "0b10";
        ram[236] = "0b10";
        ram[237] = "0b11";
        ram[238] = "0b10";
        ram[239] = "0b10";
        ram[240] = "0b11";
        for (unsigned i = 241; i < 250 ; i = i + 1) {
            ram[i] = "0b10";
        }
        ram[250] = "0b11";
        ram[251] = "0b11";
        ram[252] = "0b10";
        ram[253] = "0b11";
        for (unsigned i = 254; i < 259 ; i = i + 1) {
            ram[i] = "0b10";
        }
        ram[259] = "0b11";
        ram[260] = "0b11";
        ram[261] = "0b11";
        ram[262] = "0b10";
        ram[263] = "0b11";
        ram[264] = "0b10";
        ram[265] = "0b10";
        ram[266] = "0b11";
        ram[267] = "0b10";
        ram[268] = "0b10";
        ram[269] = "0b10";
        ram[270] = "0b11";
        ram[271] = "0b10";
        ram[272] = "0b11";
        ram[273] = "0b11";
        ram[274] = "0b10";
        ram[275] = "0b11";
        ram[276] = "0b10";
        ram[277] = "0b11";
        ram[278] = "0b11";
        ram[279] = "0b10";
        ram[280] = "0b10";
        ram[281] = "0b10";
        ram[282] = "0b10";
        ram[283] = "0b11";
        ram[284] = "0b10";
        ram[285] = "0b10";
        ram[286] = "0b11";
        ram[287] = "0b10";
        ram[288] = "0b10";
        ram[289] = "0b10";
        ram[290] = "0b11";
        ram[291] = "0b10";
        ram[292] = "0b11";
        ram[293] = "0b10";
        ram[294] = "0b10";
        ram[295] = "0b11";
        ram[296] = "0b10";
        ram[297] = "0b10";
        ram[298] = "0b10";
        ram[299] = "0b10";
        for (unsigned i = 300; i < 1024 ; i = i + 1) {
            ram[i] = "0b00";
        }


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(acc32kmau_req_cmd) {


static const unsigned DataWidth = 2;
static const unsigned AddressRange = 1024;
static const unsigned AddressWidth = 10;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


acc32kmau_req_cmd_ram* meminst;


SC_CTOR(acc32kmau_req_cmd) {
meminst = new acc32kmau_req_cmd_ram("acc32kmau_req_cmd_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~acc32kmau_req_cmd() {
    delete meminst;
}


};//endmodule
#endif
