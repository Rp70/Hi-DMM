-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity acc32kmau_req_size_rom is 
    generic(
             DWIDTH     : integer := 12; 
             AWIDTH     : integer := 10; 
             MEM_SIZE    : integer := 1024
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of acc32kmau_req_size_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 to 26=> "000000000000", 27 => "000000001100", 28 => "000000001011", 
    29 => "000000000001", 30 to 36=> "000000000000", 37 => "000000000011", 
    38 => "000000001101", 39 => "000000000101", 40 => "000000010000", 
    41 to 46=> "000000000000", 47 => "000000000010", 48 => "000000000001", 
    49 to 51=> "000000000000", 52 => "000000000111", 53 to 54=> "000000000000", 
    55 => "000000000001", 56 to 59=> "000000000000", 60 => "000000000001", 
    61 => "000000000101", 62 to 72=> "000000000000", 73 => "000000000100", 
    74 to 75=> "000000000000", 76 => "000000001000", 77 to 79=> "000000000000", 
    80 => "000000000100", 81 to 83=> "000000000000", 84 to 85=> "000000010000", 
    86 to 87=> "000000000000", 88 => "000001101011", 89 => "000000000000", 
    90 => "000000001101", 91 to 95=> "000000000000", 96 to 97=> "000000000101", 
    98 => "000000001001", 99 => "000000000000", 100 => "000000110111", 
    101 to 102=> "000000000000", 103 => "010000001011", 104 to 105=> "000000000000", 
    106 => "000000000101", 107 => "001001111010", 108 to 111=> "000000000000", 
    112 to 113=> "000000000111", 114 => "000000001101", 115 => "000000000000", 
    116 => "000000001010", 117 to 121=> "000000000000", 122 => "000000000001", 
    123 to 127=> "000000000000", 128 => "000000000011", 129 => "000000000001", 
    130 to 131=> "000000000000", 132 => "000000000100", 133 => "000000000000", 
    134 => "000000000100", 135 => "000000000000", 136 => "000000000111", 
    137 => "000000000000", 138 => "000000001001", 139 to 144=> "000000000000", 
    145 => "000000000100", 146 => "000000000011", 147 to 149=> "000000000000", 
    150 => "000000000011", 151 to 156=> "000000000000", 157 => "000100000111", 
    158 => "000000000000", 159 => "000000000100", 160 to 161=> "000000000000", 
    162 => "000011010001", 163 => "000000000000", 164 => "000000000001", 
    165 => "000011000110", 166 => "000000000000", 167 => "000000000010", 
    168 => "000000000000", 169 => "000000000001", 170 => "100000011111", 
    171 => "000000000000", 172 => "000000000101", 173 => "000000000100", 
    174 to 176=> "000000000000", 177 => "000010011010", 178 to 183=> "000000000000", 
    184 => "000000001010", 185 to 189=> "000000000000", 190 => "000000000110", 
    191 => "000010011110", 192 => "000000000000", 193 => "000000000001", 
    194 => "000000010000", 195 to 196=> "000000000000", 197 => "000000000101", 
    198 => "000000000000", 199 => "000000001000", 200 to 201=> "000000000000", 
    202 => "000000001101", 203 => "000000000101", 204 => "000000000110", 
    205 => "000000000000", 206 => "000000100010", 207 to 211=> "000000000000", 
    212 => "010000110010", 213 to 214=> "000000000000", 215 => "000000101001", 
    216 to 218=> "000000000000", 219 => "000000001000", 220 to 225=> "000000000000", 
    226 => "000000000101", 227 to 230=> "000000000000", 231 => "000001010000", 
    232 => "000000000000", 233 to 234=> "000000001000", 235 to 236=> "000000000000", 
    237 => "010000100001", 238 to 239=> "000000000000", 240 => "000000000111", 
    241 to 249=> "000000000000", 250 => "000010000011", 251 => "100001101011", 
    252 => "000000000000", 253 => "000001010001", 254 to 258=> "000000000000", 
    259 => "000000000101", 260 => "010001011000", 261 => "000000000101", 
    262 => "000000000000", 263 => "000000000010", 264 to 265=> "000000000000", 
    266 => "000000010000", 267 to 269=> "000000000000", 270 => "000000000100", 
    271 => "000000000000", 272 => "000000001010", 273 => "000000000101", 
    274 => "000000000000", 275 => "000101010100", 276 => "000000000000", 
    277 => "000000000001", 278 => "000000001111", 279 to 282=> "000000000000", 
    283 => "000100010111", 284 to 285=> "000000000000", 286 => "000000000001", 
    287 to 289=> "000000000000", 290 => "000100100111", 291 => "000000000000", 
    292 => "000010001001", 293 to 294=> "000000000000", 295 => "000000000100", 
    296 to 1023=> "000000000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity acc32kmau_req_size is
    generic (
        DataWidth : INTEGER := 12;
        AddressRange : INTEGER := 1024;
        AddressWidth : INTEGER := 10);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of acc32kmau_req_size is
    component acc32kmau_req_size_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    acc32kmau_req_size_rom_U :  component acc32kmau_req_size_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


