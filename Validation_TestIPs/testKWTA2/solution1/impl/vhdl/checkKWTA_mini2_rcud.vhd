-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity checkKWTA_mini2_rcud_rom is 
    generic(
             DWIDTH     : integer := 9; 
             AWIDTH     : integer := 13; 
             MEM_SIZE    : integer := 8192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of checkKWTA_mini2_rcud_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 to 3=> "000000001", 4 => "000000010", 5 => "000000000", 6 to 12=> "000000001", 
    13 => "000000011", 14 to 15=> "000000001", 16 => "000000000", 17 to 25=> "000000001", 
    26 => "000000100", 27 to 28=> "000000001", 29 => "000001101", 30 => "000000001", 
    31 => "000000110", 32 => "000000111", 33 to 34=> "000000001", 35 => "000000110", 
    36 to 38=> "000000001", 39 => "000001100", 40 => "000001001", 41 to 46=> "000000001", 
    47 => "000010000", 48 to 52=> "000000001", 53 => "000011001", 54 to 55=> "000000001", 
    56 => "000010010", 57 to 72=> "000000001", 73 => "000100110", 74 to 79=> "000000001", 
    80 => "000011110", 81 to 82=> "000000001", 83 => "000101111", 84 => "000101000", 
    85 => "000010110", 86 => "000000001", 87 => "000000011", 88 to 89=> "000000001", 
    90 => "000101011", 91 to 95=> "000000001", 96 => "000111001", 97 => "000110101", 
    98 to 101=> "000000001", 102 => "000110010", 103 => "000010101", 104 to 105=> "000000001", 
    106 => "000001101", 107 to 108=> "000000001", 109 => "000011111", 110 => "000110100", 
    111 => "000000001", 112 => "000101110", 113 => "000000001", 114 => "001000000", 
    115 => "000100001", 116 => "000000001", 117 => "000110011", 118 => "000011111", 
    119 => "000000001", 120 => "000011100", 121 to 124=> "000000001", 125 => "000011110", 
    126 => "000000101", 127 to 130=> "000000001", 131 => "001000110", 132 => "000001110", 
    133 => "000100101", 134 to 136=> "000000001", 137 => "000111110", 138 => "000000001", 
    139 => "000010001", 140 => "001001010", 141 => "000111011", 142 => "000010100", 
    143 to 145=> "000000001", 146 => "000000000", 147 to 155=> "000000001", 156 => "000001111", 
    157 => "000000001", 158 => "000101001", 159 => "000000001", 160 => "000111010", 
    161 to 164=> "000000001", 165 => "000111111", 166 to 168=> "000000001", 169 => "000110010", 
    170 => "001001011", 171 => "001010011", 172 => "000000001", 173 => "000001010", 
    174 => "000000001", 175 => "000011110", 176 to 181=> "000000001", 182 => "000010011", 
    183 => "000011111", 184 => "000000001", 185 => "001010101", 186 => "000101001", 
    187 => "001000011", 188 => "000001110", 189 to 192=> "000000001", 193 => "000110000", 
    194 to 195=> "000000001", 196 => "000100111", 197 => "000000001", 198 => "000011011", 
    199 => "000110110", 200 to 207=> "000000001", 208 => "000100000", 209 => "000101101", 
    210 => "001011110", 211 => "000011010", 212 => "001010100", 213 => "000000001", 
    214 => "000101110", 215 => "000000001", 216 => "001000010", 217 => "001010110", 
    218 to 226=> "000000001", 227 => "000011010", 228 to 235=> "000000001", 236 => "000010100", 
    237 => "000100010", 238 to 242=> "000000001", 243 => "000101111", 244 to 248=> "000000001", 
    249 => "000100110", 250 to 256=> "000000001", 257 => "000101000", 258 => "000000001", 
    259 => "001011011", 260 => "001011001", 261 => "000101000", 262 to 264=> "000000001", 
    265 => "000100111", 266 to 271=> "000000001", 272 => "000111110", 273 => "000000001", 
    274 => "001111111", 275 to 277=> "000000001", 278 => "001010101", 279 => "000000001", 
    280 => "001100101", 281 to 282=> "000000001", 283 => "001111011", 284 => "000100100", 
    285 to 287=> "000000001", 288 => "010000000", 289 => "000010001", 290 to 291=> "000000001", 
    292 => "000011111", 293 to 298=> "000000001", 299 => "001000001", 300 => "000101110", 
    301 to 306=> "000000001", 307 => "000110011", 308 to 326=> "000000001", 327 => "001110001", 
    328 => "010000110", 329 to 330=> "000000001", 331 => "010100001", 332 => "010010000", 
    333 to 334=> "000000001", 335 => "001101000", 336 to 338=> "000000001", 339 => "001000010", 
    340 to 347=> "000000001", 348 => "000001011", 349 to 352=> "000000001", 353 => "010100010", 
    354 to 356=> "000000001", 357 => "001000111", 358 to 359=> "000000001", 360 => "001101110", 
    361 to 366=> "000000001", 367 => "001001111", 368 => "000000001", 369 => "010110110", 
    370 => "010000100", 371 => "000000001", 372 => "000100101", 373 => "000000101", 
    374 => "000000001", 375 => "001100111", 376 => "000000001", 377 => "010010111", 
    378 to 379=> "000000001", 380 => "010110100", 381 to 385=> "000000001", 386 => "001111010", 
    387 to 389=> "000000001", 390 => "001111010", 391 to 395=> "000000001", 396 => "000100110", 
    397 => "000000001", 398 => "001011101", 399 => "010001000", 400 to 403=> "000000001", 
    404 => "000010111", 405 to 407=> "000000001", 408 => "001110111", 409 to 411=> "000000001", 
    412 => "010111011", 413 => "010001001", 414 => "000000001", 415 => "001010010", 
    416 to 418=> "000000001", 419 => "010111110", 420 to 428=> "000000001", 429 => "001011100", 
    430 to 432=> "000000001", 433 => "011000000", 434 => "000001011", 435 => "011010110", 
    436 to 437=> "000000001", 438 => "000001010", 439 => "010100100", 440 => "000000001", 
    441 => "000000100", 442 => "001000110", 443 to 444=> "000000001", 445 => "000111100", 
    446 to 450=> "000000001", 451 => "010011110", 452 to 455=> "000000001", 456 => "011001011", 
    457 to 458=> "000000001", 459 => "011100101", 460 to 462=> "000000001", 463 => "000111011", 
    464 to 465=> "000000001", 466 => "001010010", 467 => "011101001", 468 to 470=> "000000001", 
    471 => "010010001", 472 to 474=> "000000001", 475 => "000010010", 476 => "001110110", 
    477 => "011010010", 478 to 481=> "000000001", 482 => "011100010", 483 to 485=> "000000001", 
    486 => "010111111", 487 => "011110011", 488 => "001000001", 489 to 490=> "000000001", 
    491 => "010001010", 492 => "011011011", 493 to 495=> "000000001", 496 => "001101011", 
    497 to 502=> "000000001", 503 => "000000000", 504 => "000000001", 505 => "011011000", 
    506 => "000000001", 507 => "011001111", 508 => "000000001", 509 => "000001111", 
    510 => "100000100", 511 to 513=> "000000001", 514 => "000011011", 515 to 516=> "000000001", 
    517 => "000001000", 518 => "000000001", 519 => "010011100", 520 to 521=> "000000001", 
    522 => "001001110", 523 => "010111110", 524 to 526=> "000000001", 527 => "001000101", 
    528 to 529=> "000000001", 530 => "000001010", 531 to 532=> "000000001", 533 => "011001101", 
    534 => "000000001", 535 => "000110101", 536 to 539=> "000000001", 540 => "011010001", 
    541 => "000101100", 542 to 543=> "000000001", 544 => "011100110", 545 to 551=> "000000001", 
    552 => "011100111", 553 => "100010000", 554 to 555=> "000000001", 556 => "001111001", 
    557 to 562=> "000000001", 563 => "010110111", 564 => "000000001", 565 => "001000111", 
    566 to 567=> "000000001", 568 => "001110101", 569 to 578=> "000000001", 579 => "011111000", 
    580 to 583=> "000000001", 584 => "100100010", 585 to 587=> "000000001", 588 => "001101100", 
    589 => "000000001", 590 => "011001100", 591 => "000000001", 592 => "000101111", 
    593 => "000001111", 594 to 604=> "000000001", 605 => "011001000", 606 to 609=> "000000001", 
    610 => "100111100", 611 to 613=> "000000001", 614 => "100010010", 615 to 616=> "000000001", 
    617 => "001100011", 618 to 620=> "000000001", 621 => "100001110", 622 to 625=> "000000001", 
    626 => "100001101", 627 to 628=> "000000001", 629 => "011001110", 630 to 637=> "000000001", 
    638 => "001100000", 639 to 640=> "000000001", 641 => "001111101", 642 => "101001010", 
    643 => "000011101", 644 => "000000001", 645 => "001100010", 646 to 648=> "000000001", 
    649 => "001110110", 650 => "000000001", 651 => "100101010", 652 => "000000001", 
    653 => "100110101", 654 => "000000001", 655 => "011011001", 656 => "000000001", 
    657 => "100011101", 658 to 663=> "000000001", 664 => "011110100", 665 to 668=> "000000001", 
    669 => "100110010", 670 to 671=> "000000001", 672 => "011001111", 673 => "010010001", 
    674 => "011100100", 675 => "000000001", 676 => "010010100", 677 => "010010101", 
    678 => "000000001", 679 => "000001001", 680 => "000000001", 681 => "100110111", 
    682 to 688=> "000000001", 689 => "010011000", 690 => "001000000", 691 to 696=> "000000001", 
    697 => "100110000", 698 to 699=> "000000001", 700 => "000101010", 701 => "001000001", 
    702 to 703=> "000000001", 704 => "101011000", 705 => "011001010", 706 to 708=> "000000001", 
    709 => "001011010", 710 to 712=> "000000001", 713 => "001010100", 714 => "100011110", 
    715 to 717=> "000000001", 718 => "100100101", 719 => "000001110", 720 => "000000001", 
    721 => "100000001", 722 to 723=> "000000001", 724 => "000010111", 725 to 727=> "000000001", 
    728 => "010111001", 729 to 735=> "000000001", 736 => "000011000", 737 to 740=> "000000001", 
    741 => "100001111", 742 => "010100101", 743 => "011100111", 744 => "101010101", 
    745 => "000000001", 746 => "101010010", 747 to 751=> "000000001", 752 => "101110111", 
    753 => "100101110", 754 => "100100111", 755 => "001001000", 756 to 757=> "000000001", 
    758 => "000101110", 759 to 760=> "000000001", 761 => "011101010", 762 => "000000001", 
    763 => "100001010", 764 => "000000001", 765 => "101000000", 766 => "011111111", 
    767 => "000000010", 768 => "011001011", 769 to 770=> "000000001", 771 => "101110011", 
    772 => "001011100", 773 => "011010000", 774 => "001010000", 775 => "000000001", 
    776 => "000101010", 777 => "000000001", 778 => "000101001", 779 to 785=> "000000001", 
    786 => "001001010", 787 => "001000110", 788 to 791=> "000000001", 792 => "101100110", 
    793 to 796=> "000000001", 797 => "010101110", 798 => "000000101", 799 to 806=> "000000001", 
    807 => "000110111", 808 to 813=> "000000001", 814 => "100100001", 815 to 816=> "000000001", 
    817 => "001001011", 818 => "110000100", 819 => "011000010", 820 to 821=> "000000001", 
    822 => "010010000", 823 to 828=> "000000001", 829 => "100111000", 830 to 833=> "000000001", 
    834 => "000111111", 835 => "100110100", 836 => "100111111", 837 => "000000001", 
    838 => "001001100", 839 => "000000001", 840 => "101011101", 841 => "000110001", 
    842 => "000000001", 843 => "010101101", 844 => "011101100", 845 => "011000011", 
    846 => "000000001", 847 => "001001110", 848 => "000000001", 849 => "110010010", 
    850 to 851=> "000000001", 852 => "100011001", 853 to 855=> "000000001", 856 => "101100100", 
    857 to 861=> "000000001", 862 => "011011101", 863 => "101010000", 864 => "010100100", 
    865 to 866=> "000000001", 867 => "001111011", 868 => "010011111", 869 => "000000111", 
    870 to 873=> "000000001", 874 => "100000010", 875 => "000000001", 876 => "101101100", 
    877 => "000000001", 878 => "000010011", 879 => "011011100", 880 => "000000001", 
    881 => "101011001", 882 to 884=> "000000001", 885 => "100010011", 886 to 893=> "000000001", 
    894 => "001100010", 895 => "011000111", 896 => "001111010", 897 => "000000001", 
    898 => "100011100", 899 => "110001010", 900 => "000000001", 901 => "100111110", 
    902 => "101110101", 903 to 905=> "000000001", 906 => "011111101", 907 to 908=> "000000001", 
    909 => "101001111", 910 => "010110001", 911 => "000000001", 912 => "000101101", 
    913 to 914=> "000000001", 915 => "011000110", 916 to 918=> "000000001", 919 => "100000111", 
    920 to 921=> "000000001", 922 => "010001101", 923 => "000100001", 924 => "011010111", 
    925 => "110001111", 926 to 928=> "000000001", 929 => "101011011", 930 => "011011111", 
    931 to 932=> "000000001", 933 => "011111010", 934 => "000000001", 935 => "110111011", 
    936 to 940=> "000000001", 941 => "011110110", 942 => "000000001", 943 => "100000101", 
    944 => "000000001", 945 => "010111010", 946 to 950=> "000000001", 951 => "110010111", 
    952 to 953=> "000000001", 954 => "101101000", 955 to 958=> "000000001", 959 => "011000111", 
    960 to 963=> "000000001", 964 => "010101010", 965 to 968=> "000000001", 969 => "010001111", 
    970 to 972=> "000000001", 973 => "111000111", 974 => "000001100", 975 => "110000010", 
    976 => "000000001", 977 => "100000000", 978 to 982=> "000000001", 983 => "011001010", 
    984 to 999=> "000000001", 1000 to 8191=> "000000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity checkKWTA_mini2_rcud is
    generic (
        DataWidth : INTEGER := 9;
        AddressRange : INTEGER := 8192;
        AddressWidth : INTEGER := 13);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of checkKWTA_mini2_rcud is
    component checkKWTA_mini2_rcud_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    checkKWTA_mini2_rcud_rom_U :  component checkKWTA_mini2_rcud_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


