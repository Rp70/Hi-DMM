-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity acc128_128_mau_rebkb_rom is 
    generic(
             DWIDTH     : integer := 2; 
             AWIDTH     : integer := 11; 
             MEM_SIZE    : integer := 1280
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of acc128_128_mau_rebkb_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 to 2=> "10", 3 => "11", 4 => "10", 5 => "11", 6 => "10", 7 => "11", 
    8 => "10", 9 => "11", 10 to 14=> "10", 15 => "11", 16 => "10", 17 => "11", 
    18 => "10", 19 => "11", 20 to 23=> "10", 24 => "11", 25 => "10", 26 => "11", 
    27 to 28=> "10", 29 to 30=> "11", 31 => "10", 32 to 33=> "11", 34 => "10", 35 => "11", 
    36 => "10", 37 => "11", 38 => "10", 39 => "11", 40 => "10", 41 to 43=> "11", 
    44 => "10", 45 => "11", 46 => "10", 47 to 49=> "11", 50 => "10", 51 => "11", 
    52 to 54=> "10", 55 => "11", 56 => "10", 57 to 58=> "11", 59 => "10", 60 to 62=> "11", 
    63 to 66=> "10", 67 to 71=> "11", 72 to 79=> "10", 80 to 83=> "11", 84 to 86=> "10", 87 => "11", 
    88 to 91=> "10", 92 to 94=> "11", 95 => "10", 96 to 98=> "11", 99 to 100=> "10", 101 => "11", 
    102 to 103=> "10", 104 => "11", 105 to 106=> "10", 107 => "11", 108 to 109=> "10", 110 => "11", 
    111 => "10", 112 => "11", 113 => "10", 114 => "11", 115 to 116=> "10", 117 to 118=> "11", 
    119 => "10", 120 => "11", 121 => "10", 122 => "11", 123 to 126=> "10", 127 => "11", 
    128 to 129=> "10", 130 => "11", 131 to 133=> "10", 134 to 136=> "11", 137 => "10", 138 => "11", 
    139 => "10", 140 => "11", 141 => "10", 142 => "11", 143 => "10", 144 => "11", 
    145 => "10", 146 to 148=> "11", 149 to 150=> "10", 151 => "11", 152 => "10", 153 => "11", 
    154 to 155=> "10", 156 => "11", 157 => "10", 158 to 160=> "11", 161 => "10", 162 to 164=> "11", 
    165 to 167=> "10", 168 => "11", 169 => "10", 170 => "11", 171 to 173=> "10", 174 to 175=> "11", 
    176 => "10", 177 to 179=> "11", 180 to 181=> "10", 182 to 183=> "11", 184 to 185=> "10", 186 to 187=> "11", 
    188 to 189=> "10", 190 => "11", 191 to 196=> "10", 197 => "11", 198 to 199=> "10", 200 to 1279=> "00" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity acc128_128_mau_rebkb is
    generic (
        DataWidth : INTEGER := 2;
        AddressRange : INTEGER := 1280;
        AddressWidth : INTEGER := 11);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of acc128_128_mau_rebkb is
    component acc128_128_mau_rebkb_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    acc128_128_mau_rebkb_rom_U :  component acc128_128_mau_rebkb_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


