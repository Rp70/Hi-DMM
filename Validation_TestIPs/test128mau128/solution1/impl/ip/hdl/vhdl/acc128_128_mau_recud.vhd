-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity acc128_128_mau_recud_rom is 
    generic(
             DWIDTH     : integer := 7; 
             AWIDTH     : integer := 11; 
             MEM_SIZE    : integer := 1280
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of acc128_128_mau_recud_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0101010", 1 => "0010010", 2 => "0000010", 3 => "0000000", 
    4 => "0001010", 5 => "1100000", 6 => "0000100", 7 => "0010000", 
    8 => "0000010", 9 => "1000000", 10 => "0100100", 11 => "0000011", 
    12 => "0001000", 13 => "0001011", 14 => "0000100", 15 => "0100000", 
    16 => "0000011", 17 => "0010100", 18 => "0001000", 19 => "0110000", 
    20 => "0000101", 21 => "0000100", 22 => "0001000", 23 => "0000100", 
    24 => "0110000", 25 => "0000101", 26 => "0111000", 27 to 28=> "0000011", 
    29 => "0110000", 30 => "0000000", 31 => "0001010", 32 => "0000000", 
    33 => "0100000", 34 => "0000010", 35 => "0100100", 36 => "0000010", 
    37 => "0010000", 38 => "0001000", 39 => "0010100", 40 => "0000101", 
    41 => "0010000", 42 => "0111100", 43 => "0111000", 44 => "0000010", 
    45 => "0011000", 46 => "0000011", 47 => "1000000", 48 => "0010000", 
    49 => "0000100", 50 => "0000001", 51 => "0000010", 52 => "0000111", 
    53 => "0100001", 54 => "0000011", 55 => "0010000", 56 => "0001000", 
    57 => "0101000", 58 => "0000000", 59 => "0000001", 60 => "1000000", 
    61 => "0011000", 62 => "0001000", 63 => "0010100", 64 => "0000101", 
    65 => "0010100", 66 => "0000010", 67 => "0001000", 68 => "0000000", 
    69 => "1000000", 70 => "0100000", 71 => "0010000", 72 => "0000011", 
    73 => "0000001", 74 => "0001100", 75 => "0001000", 76 => "0100010", 
    77 => "0000011", 78 => "0000100", 79 => "0001011", 80 => "0000000", 
    81 => "0000100", 82 => "0001100", 83 => "0100000", 84 => "0000100", 
    85 => "0000101", 86 => "0000100", 87 => "0010000", 88 => "0000101", 
    89 => "0000011", 90 to 91=> "0000100", 92 => "0001100", 93 => "0010000", 
    94 => "0000010", 95 => "0000001", 96 => "0101000", 97 => "0000000", 
    98 => "0100000", 99 to 100=> "0001000", 101 => "0110000", 102 => "0000100", 
    103 => "0001000", 104 => "1000000", 105 => "0010010", 106 => "0010100", 
    107 => "0000100", 108 => "0000010", 109 => "0000110", 110 => "0010000", 
    111 => "0000011", 112 => "0011100", 113 => "0000110", 114 => "0001000", 
    115 => "0000011", 116 => "0000100", 117 => "0100000", 118 => "1000000", 
    119 => "0000100", 120 => "0001100", 121 => "0001000", 122 => "0011000", 
    123 => "0000001", 124 => "0000110", 125 => "0000101", 126 => "0000011", 
    127 => "0001100", 128 => "0000110", 129 => "0000100", 130 => "0111000", 
    131 => "0000111", 132 => "0000100", 133 => "0000010", 134 => "0101100", 
    135 => "1010000", 136 => "0000110", 137 => "0000010", 138 => "1011000", 
    139 => "0000101", 140 => "0111000", 141 => "0001011", 142 => "0101000", 
    143 => "0000001", 144 => "1001000", 145 => "0000110", 146 => "1100000", 
    147 => "0100100", 148 => "0000100", 149 => "0001000", 150 => "0010011", 
    151 => "0001000", 152 => "0000101", 153 => "1010000", 154 => "0000101", 
    155 => "0000100", 156 => "0101000", 157 => "0000011", 158 => "1100000", 
    159 => "0010000", 160 => "0101000", 161 => "0000100", 162 => "0111000", 
    163 => "0000000", 164 => "1000000", 165 => "0001100", 166 => "0001011", 
    167 => "0000100", 168 => "0001000", 169 => "0000111", 170 => "1110000", 
    171 => "0001100", 172 => "0000010", 173 => "0000101", 174 => "0001100", 
    175 => "0111000", 176 => "0000100", 177 => "0100000", 178 => "0011100", 
    179 => "0000000", 180 => "0000100", 181 => "0000111", 182 => "0001000", 
    183 => "0100110", 184 => "0000101", 185 => "0001000", 186 => "1100000", 
    187 => "0010000", 188 => "0001100", 189 => "0000011", 190 => "0001000", 
    191 to 193=> "0000010", 194 => "0000001", 195 => "0000100", 196 => "0001000", 
    197 => "0100000", 198 => "0000101", 199 => "0000100", 200 to 1279=> "0000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity acc128_128_mau_recud is
    generic (
        DataWidth : INTEGER := 7;
        AddressRange : INTEGER := 1280;
        AddressWidth : INTEGER := 11);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of acc128_128_mau_recud is
    component acc128_128_mau_recud_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    acc128_128_mau_recud_rom_U :  component acc128_128_mau_recud_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


