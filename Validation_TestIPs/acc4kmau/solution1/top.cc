#include<cstdio>
#include<cstring>
#include<iostream>
#include<ap_int.h>
#include "ap_utils.h"
#define REQ_N 1024
static int dynamic_heap0[100],dynamic_heap1[100];


typedef struct{
int size;
int addr;
int free_target;
char cmd;
} allocator_port;

template <int unused>
volatile int HLS_malloc(int size,volatile allocator_port *allocator)
{
#pragma HLS INLINE off
	int status;
	io_section_HLS_malloc:
	{
#pragma HLS PROTOCOL fixed
		allocator->cmd = 2; //send cmd and size to allocator
#pragma HLS PROTOCOL fixed
		allocator->size = size;
		allocator->free_target = 0;
		ap_wait();
		status = allocator->addr;
		ap_wait();
		return status;
	}
}

template <int unused>
volatile int HLS_free(int free_target, int free_size, volatile allocator_port *allocator)
{
#pragma HLS INLINE off
	int status;
	io_section_HLS_free:
	{
#pragma HLS PROTOCOL fixed
		allocator->cmd = 3; //send cmd and size to allocator
#pragma HLS PROTOCOL fixed
		allocator->size = free_size;
		allocator->free_target = free_target;
		ap_wait();
		return 1;
	}

}


int req_list[REQ_N]={    42,  1025,   129,  2048,     0,     3,   129,   129,   512,    65,   256,   128,   513,     5,   129,   129,     0,    65,   256,    17,  1025,     3,     8,  2048,   257,   513,     5,    32,     9,    33,    64,    33,     9,     9,   257,     5,     2,     5,     2,     2,     2,    17,  3072,     4,   512,     2,   128,   257,     3,    33,   192,   264,     3,   129,    17,   272,    33,    48,     8,   288,    33,     2,   512,    64,     3,     9,     6,   257,     5,    17,    17,    48,     9,  1024,    17,   160,     8,  2048,     3,   129,   384,     3,   257,     9,    17,   129,   132,    17,    16,     2,    96,     9,   274,     8,  3584,     5,   257,     9,    17,     2,  1536,  2048,   512,    12,     3,    65,   112,   257,  3072,    33,    17,     5,   513,   257,     2,     5,    96,    33,   256,     2,     5,     2,    12,     2,   112,   704,     5,     2,  1536,   257,   768,   448,    17,   256,     3,     0,     5,   129,    78,    33,     5,     5,  3072,    17,   129,    17,   768,   257,   129,   416,   152,     3,    72,     3,     5,     9,     4,     8,     3,     2,     3,   768,    65,     2,     3,    65,    65,    65,    33,    96,     3,     4,  1024,   257,   640,    76,     9,   112,   104,     9,     2,   120,     4,    96,    72,   132,   672,   192,    33,     9,   704,    10,     5,   320,  1024,     3,  2048,     2,   640,   129,   129,     5,     9,     3,     5,   512,    17,   112,     4,    17,    33,   129,   656,   336,     5,  3584,   129,    65,   129,    64,    33,     3,    65,   640,  2048,   152,   129,     5,   192,   128,     6,     3,  3968,     5,    33,    17,     4,     9,    17,    17,    65,     0,     3,     2,     9,   152,    17,     9,   336,    17,     9,  3840,     9,   672,    17,     5,   288,     5,   256,   576,  2560,     9,   257,    33,     9,     2,  3584,   152,     2,    96,   129,  3456,     5,     5,     2,    65,    17,   256,   288,    64,     5,     9,    17,     0,     5,     9,  2304,   144,     9,    33,     9,   192,    33,  3584,     5,     2,     2,     2,    65,   136,     9,   328,   128,    33,  2320,     5,     9,     9,    33,     9,    33,    68,    80,   896,    17,  2304,     3,    17,    96,     9,     5,    17,     9,   152,     9,    17,    16,  2560,     2,   384,   129,  3328,   768,    33,     5,    65,  3072,     2,     5,   656,     2,    17,  1280,    64,     5,     9,    33,   672,    17,    33,   440,    17,     3,    33,   320,  3648,    33,   384,  1008,    33,    17,    17,     5,    24,    33,    65,     2,   320,   272,     6,     2,   640,   544,     5,     9,   736,     9,     3,     5,  1280,   128,  1024,     4,     5,  2352,   129,     3,    65,  3856,     3,     9,   320,   440,   104,   352,  2320,   576,    96,   152,     5};
int req_cmd[REQ_N]={};
int req_size[REQ_N]={     0,     0,     0,  1025,    42,     0,     0,     0,   129,     0,   129,    65,     0,     0,     0,     0,     3,     0,   129,     0,     0,     0,     5,  1025,     0,     0,     0,    17,     0,     0,    33,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,   513,     2,   129,     0,    65,     0,     0,     0,    33,     5,     0,     0,     0,     2,     0,     9,     5,    17,     0,     0,   129,    33,     0,     0,     2,     0,     0,     0,     0,     9,     0,   513,     0,    17,     2,   257,     0,     0,    17,     0,     0,     0,     0,     0,     3,     0,     9,     0,    17,     0,     2,     3,   257,     0,     0,     0,     0,     0,   129,   257,   129,     3,     0,     0,     9,     0,   257,     0,     0,     0,     0,     0,     0,     0,     5,     0,     5,     0,     0,     0,     3,     0,     5,    33,     0,     0,   257,     0,   129,    33,     0,    17,     0,     3,     0,     0,     2,     0,     0,     0,   513,     0,     0,     0,   129,     0,     0,    17,     5,     0,     3,     0,     0,     0,     2,     2,     0,     0,     0,   129,     0,     0,     0,     0,     0,     0,     0,     5,     0,     2,   257,     0,    17,     2,     0,     5,     5,     0,     0,     3,     2,     3,     3,     3,    17,    33,     0,     0,    33,     2,     0,    33,   257,     0,   257,     0,     9,     0,     0,     0,     0,     0,     0,    65,     0,     3,     2,     0,     0,     0,     9,     9,     0,   257,     0,     0,     0,     5,     0,     0,     0,    65,   129,     5,     0,     0,    33,     3,     2,     0,    65,     0,     0,     0,     3,     0,     0,     0,     0,     3,     0,     0,     0,     5,     0,     0,     5,     0,     0,    33,     0,    17,     0,     0,    17,     0,    17,    33,   257,     0,     0,     0,     0,     0,   129,     5,     0,     9,     0,    65,     0,     0,     0,     0,     0,     9,     5,     3,     0,     0,     0,     3,     0,     0,   129,     5,     0,     0,     0,    33,     0,   129,     0,     0,     0,     0,     0,     5,     0,     5,     5,     0,     9,     0,     0,     0,     0,     0,     0,     2,     9,    65,     0,     9,     0,     0,     5,     0,     0,     0,     0,     5,     0,     0,     9,   257,     0,    17,     0,    65,    65,     0,     0,     0,   129,     0,     0,     9,     0,     0,   129,     2,     0,     0,     0,    17,     0,     0,     5,     0,     0,     0,     5,    33,     0,    17,     9,     0,     0,     0,     0,     5,     0,     0,     0,     5,     9,     2,     0,     9,    17,     0,     0,    17,     0,     0,     0,    33,     5,   129,     2,     0,     9,     0,     0,     0,     9,     0,     0,     9,     5,     5,    17,     9,    33,     5,     5,     0};

int req_address[REQ_N];

volatile int acc4kmau(//volatile int *size, volatile int *cmd,
		volatile allocator_port *alloc_1)
{
//#pragma HLS interface ap_hs port=size
//#pragma HLS interface ap_hs port=cmd
#pragma HLS interface ap_hs port=alloc_1

	int i,r;
	int cmd,size;
	for (i=0;;i++)
	{
		cmd = req_cmd[i];
		size = req_list[i];
		if ((cmd) == 2)
		{
			req_address[i]=r=HLS_malloc<1>(size,alloc_1);
		}
		else if ((cmd) == 3)
		{

			r=HLS_free<1>(size,req_size[i],alloc_1);
		}
		else if ((cmd) == 0) break;
	}
	return r;
}



//void acc_OS(int acc_IO[3000],int sel,int offset)
//{

//	static int aa[3000],bb[3000];
	/*    int *base1,*base2;

    int offset = acc_IO[3];
        base1 = (bb+offset);
        base2 = (aa+offset);

    int i;
    acc_OS_label0:for (i=0;i<3000;i++)
    {
    	base1[i]=i+123;
    }
    acc_OS_label1:for (i=0;i<2000;i++)
    {
        acc_IO[i]=base1[i+100];
    }
    acc_OS_label2:for (i=0;i<3000;i++)
    {
    	base2[i]=i+123;
    }
    base2 = (aa+offset+offset);
    acc_OS_label3:for (i=0;i<2000;i++)
    {
        acc_IO[i]+=base2[i+100];
    }
*/
/*
	int *base1;

    if (sel==0)
        base1 = (aa+offset);
    else
        base1 = (bb+offset);

    int i;
    acc_OS_label0:for (i=0;i<2000;i++)
    {
    	base1[i]=i+123;
    }
    acc_OS_label1:for (i=0;i<2000;i++)
    {
        acc_IO[i]=base1[i+100];
    }
}
*/

int main()
{
	int acc_IO[3000]; acc_IO[0]=0;acc_IO[3]=11;
	int alloc_1[100],alloc_2[100],alloc_3[100],alloc_4[100],alloc_5[100];
	//acc_OS(1,2,3,4,5,alloc_1,alloc_2,alloc_3,alloc_4,alloc_5);
	int i;
	for (i=0;i<2000;i+=10) printf("%d ",acc_IO[i]);
	return 0;
}
