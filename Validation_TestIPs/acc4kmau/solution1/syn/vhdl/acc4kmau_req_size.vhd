-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity acc4kmau_req_size_rom is 
    generic(
             DWIDTH     : integer := 11; 
             AWIDTH     : integer := 10; 
             MEM_SIZE    : integer := 1024
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of acc4kmau_req_size_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 to 2=> "00000000000", 3 => "10000000001", 4 => "00000101010", 
    5 to 7=> "00000000000", 8 => "00010000001", 9 => "00000000000", 
    10 => "00010000001", 11 => "00001000001", 12 to 15=> "00000000000", 
    16 => "00000000011", 17 => "00000000000", 18 => "00010000001", 
    19 to 21=> "00000000000", 22 => "00000000101", 23 => "10000000001", 
    24 to 26=> "00000000000", 27 => "00000010001", 28 to 29=> "00000000000", 
    30 => "00000100001", 31 to 41=> "00000000000", 42 => "01000000001", 
    43 => "00000000010", 44 => "00010000001", 45 => "00000000000", 
    46 => "00001000001", 47 to 49=> "00000000000", 50 => "00000100001", 
    51 => "00000000101", 52 to 54=> "00000000000", 55 => "00000000010", 
    56 => "00000000000", 57 => "00000001001", 58 => "00000000101", 
    59 => "00000010001", 60 to 61=> "00000000000", 62 => "00010000001", 
    63 => "00000100001", 64 to 65=> "00000000000", 66 => "00000000010", 
    67 to 70=> "00000000000", 71 => "00000001001", 72 => "00000000000", 
    73 => "01000000001", 74 => "00000000000", 75 => "00000010001", 
    76 => "00000000010", 77 => "00100000001", 78 to 79=> "00000000000", 
    80 => "00000010001", 81 to 85=> "00000000000", 86 => "00000000011", 
    87 => "00000000000", 88 => "00000001001", 89 => "00000000000", 
    90 => "00000010001", 91 => "00000000000", 92 => "00000000010", 
    93 => "00000000011", 94 => "00100000001", 95 to 99=> "00000000000", 
    100 => "00010000001", 101 => "00100000001", 102 => "00010000001", 
    103 => "00000000011", 104 to 105=> "00000000000", 106 => "00000001001", 
    107 => "00000000000", 108 => "00100000001", 109 to 115=> "00000000000", 
    116 => "00000000101", 117 => "00000000000", 118 => "00000000101", 
    119 to 121=> "00000000000", 122 => "00000000011", 123 => "00000000000", 
    124 => "00000000101", 125 => "00000100001", 126 to 127=> "00000000000", 
    128 => "00100000001", 129 => "00000000000", 130 => "00010000001", 
    131 => "00000100001", 132 => "00000000000", 133 => "00000010001", 
    134 => "00000000000", 135 => "00000000011", 136 to 137=> "00000000000", 
    138 => "00000000010", 139 to 141=> "00000000000", 142 => "01000000001", 
    143 to 145=> "00000000000", 146 => "00010000001", 147 to 148=> "00000000000", 
    149 => "00000010001", 150 => "00000000101", 151 => "00000000000", 
    152 => "00000000011", 153 to 155=> "00000000000", 156 to 157=> "00000000010", 
    158 to 160=> "00000000000", 161 => "00010000001", 162 to 168=> "00000000000", 
    169 => "00000000101", 170 => "00000000000", 171 => "00000000010", 
    172 => "00100000001", 173 => "00000000000", 174 => "00000010001", 
    175 => "00000000010", 176 => "00000000000", 177 to 178=> "00000000101", 
    179 to 180=> "00000000000", 181 => "00000000011", 182 => "00000000010", 
    183 to 185=> "00000000011", 186 => "00000010001", 187 => "00000100001", 
    188 to 189=> "00000000000", 190 => "00000100001", 191 => "00000000010", 
    192 => "00000000000", 193 => "00000100001", 194 => "00100000001", 
    195 => "00000000000", 196 => "00100000001", 197 => "00000000000", 
    198 => "00000001001", 199 to 204=> "00000000000", 205 => "00001000001", 
    206 => "00000000000", 207 => "00000000011", 208 => "00000000010", 
    209 to 211=> "00000000000", 212 to 213=> "00000001001", 214 => "00000000000", 
    215 => "00100000001", 216 to 218=> "00000000000", 219 => "00000000101", 
    220 to 222=> "00000000000", 223 => "00001000001", 224 => "00010000001", 
    225 => "00000000101", 226 to 227=> "00000000000", 228 => "00000100001", 
    229 => "00000000011", 230 => "00000000010", 231 => "00000000000", 
    232 => "00001000001", 233 to 235=> "00000000000", 236 => "00000000011", 
    237 to 240=> "00000000000", 241 => "00000000011", 242 to 244=> "00000000000", 
    245 => "00000000101", 246 to 247=> "00000000000", 248 => "00000000101", 
    249 to 250=> "00000000000", 251 => "00000100001", 252 => "00000000000", 
    253 => "00000010001", 254 to 255=> "00000000000", 256 => "00000010001", 
    257 => "00000000000", 258 => "00000010001", 259 => "00000100001", 
    260 => "00100000001", 261 to 265=> "00000000000", 266 => "00010000001", 
    267 => "00000000101", 268 => "00000000000", 269 => "00000001001", 
    270 => "00000000000", 271 => "00001000001", 272 to 276=> "00000000000", 
    277 => "00000001001", 278 => "00000000101", 279 => "00000000011", 
    280 to 282=> "00000000000", 283 => "00000000011", 284 to 285=> "00000000000", 
    286 => "00010000001", 287 => "00000000101", 288 to 290=> "00000000000", 
    291 => "00000100001", 292 => "00000000000", 293 => "00010000001", 
    294 to 298=> "00000000000", 299 => "00000000101", 300 => "00000000000", 
    301 to 302=> "00000000101", 303 => "00000000000", 304 => "00000001001", 
    305 to 310=> "00000000000", 311 => "00000000010", 312 => "00000001001", 
    313 => "00001000001", 314 => "00000000000", 315 => "00000001001", 
    316 to 317=> "00000000000", 318 => "00000000101", 319 to 322=> "00000000000", 
    323 => "00000000101", 324 to 325=> "00000000000", 326 => "00000001001", 
    327 => "00100000001", 328 => "00000000000", 329 => "00000010001", 
    330 => "00000000000", 331 to 332=> "00001000001", 333 to 335=> "00000000000", 
    336 => "00010000001", 337 to 338=> "00000000000", 339 => "00000001001", 
    340 to 341=> "00000000000", 342 => "00010000001", 343 => "00000000010", 
    344 to 346=> "00000000000", 347 => "00000010001", 348 to 349=> "00000000000", 
    350 => "00000000101", 351 to 353=> "00000000000", 354 => "00000000101", 
    355 => "00000100001", 356 => "00000000000", 357 => "00000010001", 
    358 => "00000001001", 359 to 362=> "00000000000", 363 => "00000000101", 
    364 to 366=> "00000000000", 367 => "00000000101", 368 => "00000001001", 
    369 => "00000000010", 370 => "00000000000", 371 => "00000001001", 
    372 => "00000010001", 373 to 374=> "00000000000", 375 => "00000010001", 
    376 to 378=> "00000000000", 379 => "00000100001", 380 => "00000000101", 
    381 => "00010000001", 382 => "00000000010", 383 => "00000000000", 
    384 => "00000001001", 385 to 387=> "00000000000", 388 => "00000001001", 
    389 to 390=> "00000000000", 391 => "00000001001", 392 to 393=> "00000000101", 
    394 => "00000010001", 395 => "00000001001", 396 => "00000100001", 
    397 to 398=> "00000000101", 399 to 1023=> "00000000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity acc4kmau_req_size is
    generic (
        DataWidth : INTEGER := 11;
        AddressRange : INTEGER := 1024;
        AddressWidth : INTEGER := 10);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of acc4kmau_req_size is
    component acc4kmau_req_size_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    acc4kmau_req_size_rom_U :  component acc4kmau_req_size_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


