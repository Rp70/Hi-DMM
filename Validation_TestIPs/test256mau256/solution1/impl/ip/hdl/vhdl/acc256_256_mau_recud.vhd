-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity acc256_256_mau_recud_rom is 
    generic(
             DWIDTH     : integer := 8; 
             AWIDTH     : integer := 11; 
             MEM_SIZE    : integer := 1280
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of acc256_256_mau_recud_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00101010", 1 => "01000010", 2 => "00000010", 3 => "00000000", 
    4 => "00100010", 5 => "00001000", 6 => "00000000", 7 => "00000110", 
    8 => "00000000", 9 => "00000110", 10 => "00001000", 11 => "01001000", 
    12 => "00001000", 13 => "00000011", 14 => "00001000", 15 => "00000101", 
    16 => "00001000", 17 => "01000000", 18 => "00010001", 19 => "00011000", 
    20 => "00000001", 21 => "00010000", 22 => "00000110", 23 => "00001000", 
    24 => "00000010", 25 => "00010100", 26 => "00011010", 27 => "00110000", 
    28 => "00000100", 29 => "00000010", 30 => "00101000", 31 => "01000000", 
    32 => "00001001", 33 => "01000000", 34 => "00100000", 35 => "00111000", 
    36 => "00000010", 37 => "10000000", 38 to 39=> "00010000", 40 => "00001011", 
    41 => "01000001", 42 => "00001100", 43 => "01000000", 44 => "00000010", 
    45 => "00011010", 46 => "10000000", 47 => "00011100", 48 => "00000011", 
    49 => "00010100", 50 => "01100000", 51 => "01010000", 52 => "00000100", 
    53 => "00110000", 54 => "00000101", 55 => "00000011", 56 => "00100000", 
    57 => "00100011", 58 => "00000101", 59 => "00010000", 60 => "00000100", 
    61 => "00000000", 62 to 63=> "10000000", 64 => "00011100", 65 => "00010000", 
    66 => "00000110", 67 => "00001000", 68 => "01000100", 69 => "00001000", 
    70 => "10000000", 71 => "00111000", 72 => "00001011", 73 => "00100000", 
    74 => "00110000", 75 => "01000000", 76 => "00000011", 77 => "01000000", 
    78 => "00000101", 79 => "00000100", 80 => "00000011", 81 => "00010010", 
    82 => "00000001", 83 => "00010100", 84 => "00101000", 85 => "00011001", 
    86 => "00011000", 87 => "00010011", 88 => "10000000", 89 => "00010000", 
    90 => "10100000", 91 => "00000110", 92 => "00010010", 93 => "00000011", 
    94 => "00000010", 95 => "01000000", 96 => "00000101", 97 => "00010010", 
    98 => "00100000", 99 => "00110000", 100 => "00000100", 101 => "10000000", 
    102 => "01000000", 103 => "00011000", 104 => "00000100", 105 => "00011000", 
    106 => "00000101", 107 => "00010000", 108 => "00100000", 109 => "00000011", 
    110 => "00001000", 111 => "00100000", 112 => "00000001", 113 => "00010010", 
    114 => "01010000", 115 => "00000100", 116 => "00000101", 117 => "00000011", 
    118 => "00000000", 119 => "00000101", 120 => "00101000", 121 to 122=> "00000101", 
    123 => "00001000", 124 => "00000111", 125 => "00100100", 126 => "00001010", 
    127 => "00010100", 128 => "00101000", 129 => "10000000", 130 => "00000010", 
    131 => "00000110", 132 => "00001100", 133 => "00000100", 134 => "00000000", 
    135 => "00000101", 136 => "00111000", 137 => "00000110", 138 => "00011000", 
    139 => "00010100", 140 => "00100100", 141 => "00000001", 142 => "00000010", 
    143 => "00001000", 144 => "00000101", 145 => "01000000", 146 => "10000000", 
    147 => "00000001", 148 => "00011100", 149 => "00000100", 150 => "00010101", 
    151 => "01011000", 152 => "11100000", 153 => "00100000", 154 => "00000101", 
    155 => "00110100", 156 => "00000111", 157 => "00011000", 158 => "00000101", 
    159 => "00000111", 160 => "00000101", 161 => "00110000", 162 => "01000000", 
    163 => "00101000", 164 => "10001000", 165 => "00000010", 166 => "11100000", 
    167 => "00111000", 168 => "10010000", 169 => "00010100", 170 => "00000110", 
    171 => "11000000", 172 => "00000100", 173 => "00000000", 174 => "00000101", 
    175 => "00000100", 176 => "00100100", 177 => "00010001", 178 => "00100000", 
    179 => "00010100", 180 => "00000000", 181 => "00110000", 182 => "11100000", 
    183 => "00000011", 184 => "10100000", 185 => "00000101", 186 => "00000001", 
    187 => "00010011", 188 => "01001000", 189 => "00001000", 190 => "01011000", 
    191 => "00010001", 192 => "01010000", 193 => "00001100", 194 => "00000011", 
    195 => "00001010", 196 => "00010000", 197 => "00000010", 198 => "00000100", 
    199 => "11000000", 200 to 1279=> "00000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity acc256_256_mau_recud is
    generic (
        DataWidth : INTEGER := 8;
        AddressRange : INTEGER := 1280;
        AddressWidth : INTEGER := 11);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of acc256_256_mau_recud is
    component acc256_256_mau_recud_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    acc256_256_mau_recud_rom_U :  component acc256_256_mau_recud_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


