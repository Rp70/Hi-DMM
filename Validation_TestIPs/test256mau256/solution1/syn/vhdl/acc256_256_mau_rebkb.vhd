-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity acc256_256_mau_rebkb_rom is 
    generic(
             DWIDTH     : integer := 2; 
             AWIDTH     : integer := 11; 
             MEM_SIZE    : integer := 1280
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of acc256_256_mau_rebkb_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 to 2=> "10", 3 => "11", 4 to 5=> "10", 6 => "11", 7 => "10", 8 => "11", 
    9 to 10=> "10", 11 => "11", 12 to 16=> "10", 17 => "11", 18 => "10", 19 => "11", 
    20 => "10", 21 => "11", 22 to 25=> "10", 26 to 27=> "11", 28 to 29=> "10", 30 to 31=> "11", 
    32 => "10", 33 to 35=> "11", 36 => "10", 37 => "11", 38 => "10", 39 => "11", 
    40 to 42=> "10", 43 => "11", 44 => "10", 45 to 47=> "11", 48 => "10", 49 to 51=> "11", 
    52 => "10", 53 => "11", 54 to 55=> "10", 56 => "11", 57 to 58=> "10", 59 => "11", 
    60 => "10", 61 => "11", 62 => "10", 63 to 65=> "11", 66 to 69=> "10", 70 to 71=> "11", 
    72 => "10", 73 to 75=> "11", 76 to 83=> "10", 84 to 86=> "11", 87 => "10", 88 => "11", 
    89 => "10", 90 => "11", 91 to 94=> "10", 95 => "11", 96 to 97=> "10", 98 to 99=> "11", 
    100 => "10", 101 to 103=> "11", 104 => "10", 105 => "11", 106 to 107=> "10", 108 => "11", 
    109 to 110=> "10", 111 => "11", 112 to 113=> "10", 114 => "11", 115 to 117=> "10", 118 => "11", 
    119 => "10", 120 => "11", 121 to 124=> "10", 125 => "11", 126 => "10", 127 to 129=> "11", 
    130 to 133=> "10", 134 => "11", 135 => "10", 136 => "11", 137 => "10", 138 to 140=> "11", 
    141 to 142=> "10", 143 => "11", 144 => "10", 145 to 146=> "11", 147 => "10", 148 => "11", 
    149 => "10", 150 to 152=> "11", 153 to 154=> "10", 155 => "11", 156 => "10", 157 => "11", 
    158 to 160=> "10", 161 to 164=> "11", 165 => "10", 166 to 168=> "11", 169 to 170=> "10", 171 => "11", 
    172 => "10", 173 => "11", 174 to 175=> "10", 176 => "11", 177 => "10", 178 to 182=> "11", 
    183 => "10", 184 => "11", 185 to 187=> "10", 188 => "11", 189 => "10", 190 => "11", 
    191 => "10", 192 => "11", 193 to 198=> "10", 199 => "11", 200 to 1279=> "00" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity acc256_256_mau_rebkb is
    generic (
        DataWidth : INTEGER := 2;
        AddressRange : INTEGER := 1280;
        AddressWidth : INTEGER := 11);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of acc256_256_mau_rebkb is
    component acc256_256_mau_rebkb_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    acc256_256_mau_rebkb_rom_U :  component acc256_256_mau_rebkb_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


