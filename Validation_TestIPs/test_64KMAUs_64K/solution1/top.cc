#include<cstdio>
#include<cstring>
#include<iostream>
#include<ap_int.h>
#include "ap_utils.h"
#define REQ_N 1024
static int dynamic_heap0[100],dynamic_heap1[100];

typedef struct{
int size;
int addr;
int free_target;
char cmd;
} allocator_port;

template <int unused>
volatile int HLS_malloc(int size,volatile allocator_port *allocator)
{
#pragma HLS INLINE off
	int status;
	io_section_HLS_malloc:
	{
#pragma HLS PROTOCOL fixed
		allocator->cmd = 2; //send cmd and size to allocator
#pragma HLS PROTOCOL fixed
		allocator->size = size;
		allocator->free_target = 0;
		ap_wait();
		status = allocator->addr;
		ap_wait();
		return status;
	}
}

template <int unused>
volatile int HLS_free(int free_target, int free_size, volatile allocator_port *allocator)
{
#pragma HLS INLINE off
	int status;
	io_section_HLS_free:
	{
#pragma HLS PROTOCOL fixed
		allocator->cmd = 3; //send cmd and size to allocator
#pragma HLS PROTOCOL fixed
		allocator->size = free_size;
		allocator->free_target = free_target;
		ap_wait();
		return 1;
	}

}

//                    0  1 2 3 4 5 6 7 8  9 10 11 1213  14  15 16 171819  20  21  22  23  24  252627 28 29 30  31 32 33 34 35 36
int req_list[REQ_N]={     3,    12,     2,     1,     1,     1,     8,     3,     3,    13,    13,    15,     7,     5,    11,     7,    16,    16,     1,     1,     3,     3,     5,     5,     2,     5,     4,    16,   112,     7,     3,    16,    16,    16,     5,     5,     5,    12,    48,   104,   144,     3,    13,    12,     4,     9,   627,     4,     7,    47,  8262,   124,   128,    94,    33,    10,    63,   602,    55,   148,    10,   184,     3,     4,     6,     8,  4199,     6,   534,  4138,   251,  4180,   220,   128,  2170,    43,  4096,    84,    10,   123,   200,   115,     7,    65,     5,   104,    96,    43,  1147,    64,    85,  2147,   160,     6,    24,    85,    75,  3328,   200,    28,  4480,  1052,    57,  2067,  3584,     3,    64,   183,  1029,   144,    20,   147,    99,   112,   288,  4608,     4,   108,    54,     6,    86,    72,    46,    35,     6,    12,    36,   212,     7,     8,    51,    52,  3328,   208,     6,   120,    60,   384,    40,  3072,     4,    42,   130,     6,    88,  3328,    48,     4,    43,  4480,   148,    45,    53,  3328, 59392,     4,   625, 53248,   320,   188,   256,    64,   109,  4352,   534,   159,    60,  8192,    12,     9,    64,   208,    13,     4,  1112,    64,    41,   554,   150,    56,    67,   512,    10,  1118,     7,   537,   768,   160,  1124,   163, 54272,   256,    34,     7,   145,    59,   203,  3584,   120,     2,  4608,     9,    48,    16,    10,     9,   179,     5,    81,    24,     6, 59392,    14,    88,  1142, 59392,    97,    81,     6,    25,     5,    90,   130,    87, 40960,   565,     3,   126,    64,   125,    40,     4,   104,   248,     8,   576, 15360,     4,   110,     6,    40,  1142,   179,    40,     7,   160,    79,   135,   107,   111,     1,  1090, 11776,    48,   291,   640,     5,    95,    93,  1137, 15360, 16000,   144, 11520, 53248,    58,   222,  3328,    88, 15488,     1,   288,     4,     9,    71, 45312,  4544,    14,     6,   113,   128,    58,    48,    91,     7,   329,  4096,    61,     8, 14336,    48,   110,   569,   234,     8,   128,     9,  4736,   108, 45568,    14,    34,   280,    10,   108,  5376,  8192,    57,     2,     6,    12,     8, 11776,    10,   304,   224,    38, 42112,   134,     6,    84,    15,   512,   324,   343,  3328,  8704,   128, 54016,    27,   337,   238,   216,   184, 16384,   604,    93,     9,     2,   112,     2,   375,     1,  2168,  3328,    12,  3072,   273,   320, 16384,    10,  5120,   311, 42240,   260,   191,    32,   188,   291,  4736,   626,   104, 15488,    45,    86,     9,  1103,     9,   378,  2156,   628,  8576,  3584,  4736,    89,    24, 45312,    14, 49152,  2126,   268,     9,   112,    40,   208,   368, 15488,    12,   185, 42496,    30,     2,     9,    30,  4800, 42112,  8448,    29,    10,    30,     8,  4352,     4,    40,  9728,  4608,   106,    90,    14, 47104,   567,  8448,  4800,   178, 15488,    99,  2048,   214,    40, 54272,    31,    52,   280,   704,    48,   113,     4,   640,   816, 28672,   512,   124,    10,    97,    32, 59392,    80,  8704,  1085,    27, 16384,   248,     7,  3840,   342,   145,    44,   132,    37,    82,    44,    10,    63,    40,   224,   116,   144,    99,    20,   107,   128,    66,  1071,   200,   620, 11648,     6,    10,   164,   800,   368,     3,     1,    25,    57,  4352,  4224,   132,    61,   102,   368,    48,    69,  9728,  8704,   105,   280,  8704,   114,   638,   128,    92,     1,   800,     3, 11648,  4480,   144, 16384, 27648,   145,   120, 11520,  4768, 40960,    53,     1,   112,   320,     6,   127,   248,    80,    87,   800,   355, 20480,   110,    97,     4,  4096,    12,   544,    40,    88,    52,   309, 53760,  4608, 30848,    18,  4352,   184,    76,   120,  2368,   257,     8,  3392,    85,    32,   147,  4608, 42368,   114,  2816,   129,  3328,    95,    98,  1040,   104,    62,   112,    23,   144,    65,   183,    87,  2048,   320,    10,   243, 41984,   176, 46592,  3584,   112,    66,   611,    10, 53248,    16,   192,     3,    49,    48,    68,     3,    55,    53,   519,     5,  2304,    14, 16384,    64, 11520,  4352,    48,    68,   122,  9728,    97,  4768, 16384,     7,   153, 15488,    11,    40,   294,    83, 40960,   114,    64,     6,   371,     9,  5312,  4224,   127,    88,    37,     4,    10,    10,   136,    74,   128,    20,    56,    34, 18688, 22528,     6,   896,     5, 27648,    72,    10,    46,  8704,   576,   269,   121,   246,   596, 14336,    16,  4544,    47,   164,    72, 11264,   320,   576,  2560,     7,   374,    37,     7,   174,   188,    93,     6,    77,    98,     6,    42,   233, 32768,    12,    14,    51,    34,   208,   158,   544,   305,   128,  2130,  1057,   354,   280,     4,   104,  3072, 23424,     4,   144,   320,   117,  3712,    52,    54,   104,   800,    96,    10,   120,  4288, 22528,   323,    81, 53248,   104,   119,    11,     6,   100,   114,   108, 15872, 18816,   184,    37,   133,    12,   107,   896,   140,  2304,    39,    73, 34432,    98,    72,  4480,    24,  4752,     9,    40,   276,    46, 59392,    40,  2560,   182,    49,   111,   176,    11, 11520,   124,    10,   147,    86,  5184,    31,    10,    51,    49,    26,    38,    10,  3712,   133, 21504, 28160,   275,    38, 15488,    63,    49,    34,   145,    73,   352, 53760,  5440,   186, 34560,    71,   178,    98,  8192,   363,   113,   120,    48,   112,    10,    65,    45,    18,    19,     7,    10,     9,  4608,  3072, 22528,    11,    10,  4480,   113, 45824,   208,  3328,     6,    33,   125,  4288,   272, 23488,    47,   224, 15488,   116,     8,    65,     6, 34432,    67,   304,    10,     6,  4352,    26,    13,    48,   576,    46,    76,     9,   200,    45,    13,     5,     9,  8448, 11648,    16,   123,    46, 47104,     8,   109,   227,    67,   704,   588,   104,    44,     3, 46592,  4480,    40,   200,   240, 16896, 11648,   832,   122, 45056, 16384,  5440,   512,    92,    10,  4288,    46,  3328,    13,   640,    12,    82,     1,   240, 16000,     5,  8320,   284,     5, 11840,   228,   146,  2048,     9,     8,   145,     3,     8,    40,    27, 16896, 16896,  3328,   144,   104,    54,     6,   144,  4336,    33,     5,     1,   130, 53760, 45824,    76,    13,   116,   352,   104,  3200, 23552,   539,   384,    38, 11520,    48,     7, 41472, 42496,    85, 17408,   119,   108,    22,    21,    64,   126,  4544,    52, 16000,  2048, 11264,   113, 60416,   192, 61440, 16640,    10,   160,   107,    17, 16384,    10,   135, 53248,    44,    38,  2105, 11520,   640, 45824,    20,     5, 45824,   175,   140,    24,  8192,    12,     5,     9,  3840,    72,    39,    48, 31744,     8,     6,    22,   276,    43,    61,    10,   110,    55,    73,    61,  4352,  2176,    37,   816,    81,   134,    10,  4752,    73,    13, 32768, 15488,    10,    40,  3072,    61,   560,     4,     8,    24,    12,   132, 45568,     8,    35,  4352,    58,  3424, 14592,   704, 40960,  9984,     5,    90,   153,    35};
int  req_cmd[REQ_N]={};
int req_size[REQ_N]={     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,    12,    11,     1,     0,     0,     0,     0,     0,     0,     0,     3,    13,     5,    16,     0,     0,     0,     0,     0,     0,     2,     1,     0,     0,     0,     7,     0,     0,     1,     0,     0,     0,     0,     1,     5,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     6,     0,     0,   534,     0,     0,     0,     4,     0,     0,     0,     0,     3,     7,     0,     0,    13,     0,     0,    16,     0,     0,     0,     0,   251,     5,     0,    85,     0,     0,     0,   220,     0,     6,     0,     0,    12,     4,     0,     0,    16,    10,    75,     0,     4,     0,     0,     0,     0,     0,     0,     0,     3,     0,     0,     0,     0,     0,     0,    28,    16,     0,     6,     0,   124,     3,   148,     0,     0,     0,     0,     0,    60,    13,     0,     0,    54,     0,     0,     0,    45,  1029,     0,     0,  2147,     0,     0,     9,     6,     0,    85,     0,     0,     0,  4199,     4,     0,     6,    16,     0,     0,     0,     6,     0,     0,     0,     0,     0,    94,     0,     0,     0,     0,    55,    13,     0,     0,   534,     9,     0,     1,     0,     0,     0,   183,     0,     0,    86,     1,     4,     3,     0,     0,     0,     0,     0,     5,     0,   625,     0,     0,     0,  1142,     0,     0,     0,     0,     0,     0,     0,     0,  4180,     0,     0,     0,     0,     0,     0,     0,     0,     5,     0,    59,   203,     0,     0,     0,     4,     0,     0,     4,     0,     0,     0,     0,     0,     0,     0,     0,   163,     5,     0,    33,     0,     0,     0,     0,   110,    90,     9,    67,   320,     0,     0,    60,     0,    79,     0,    14,     0,     1,     0,   107,    46,     0,     0,     0,     7,     0,     5,     0,     0,     0,    65,     0,     0,   537,     7,     0,     0,     0,     0,     8,     0,    72,     4,   291,     0,     0,     4,     0,     0,   212,  1112,     0,     0,     0,     4,     1,    95,     0,     6,    16,     0,    64,     0,     0,     0,     0,     0,     0,     0,    61,   512,     6,   159,     0,     0,     0,     0,     8,  8262,     0,     0,     1,     0,     8,     0,     0,     0,     0,    27,     2,   130,     0,    47,   604,     0,    35,     0,   125,     0,     0,     8,     0,     0,   108,     0,     7,   113,     0,     0,     0,     0,     0,     0,     0,     0,    93,   120,    86,     0,     6,   107,     0,  2170,     0,     0,     0,     0,     4,    10,    14,   113,     0,     0,   179,     0,     0,     1,     0,    30,    64,    15,     0,     0,     0,     0,    41,     0,     0,   343,    88,     0,     0,     0,  1090,     0,    90,    29,     0,   113,     0,   602,     0,     0,    87,     0,     0,     4,    63,     0,     0,     0,    58,    14,  2156,    34,     0,     2,     0,     0,  1137,     0,   337,     0,     0,   311,     8,     0,   123,     0,     0,     3,     0,     0,     0,     0,     0,     0,     0,     6,     0,    14,     0,     4,     0,     6,     0,     0,     5,     0,    97,     0,     2,     0,     9,    10,     0,     0,     0,     0,    40,    43,     0,     0,     0,    10,     8,     0,   178,   342,     0,     0,   105,     0,     0,     6,     0,     0,     9,     0,    57,    53,    14,   132,   628,     0,     6,    88,    30,   565,     0,     0,     8,    10,     0,     0,     8,     0,     0,     9,     0,  2168,     0,     0,     0,   110,     2,    27,     6,     0,     0,     0,   188,   106,   102,     0,    53,     0,     0,     0,    31,     0,     0,    57,     0,     4,     0,    76,   104,     0,    97,     0,    45,     0,     0,     0,     0,     0,     6,     0,    14,     0,     0,     0,   214,    10,     0,     0,   126,     0,   329,    89,     0,     0,     0,     0,   611,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,    40,     0,    97,     0,    87,    62,     3,     0,     0,   127,     0,    30,   122,     0,     0,   116,     0,     0,     0,     0,   176,     0,     6,     0,     0,     0,    52,    61,     0,     0,     0,     0,     0,     0,     0,     0,     3,     3,     0,     0,   185,  1040,     0,    84,     0,   355,     0,     0,     0,   114,    58,     0,     0,     0,     0,   569,     0,    34,     0,     0,     3,   150,    14,    16,   113,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,  4138,     2,     0,     0,     0,     0,     0,    18,     0,     6,     0,     0,     0,     7,     0,     0,   191,    51,     0,    10,     6,     0,    81,     4,     0,     7,     9,     0,     0,     6,    24,   269,     0,     0,   519,     0,     0,     0,     0,     0,     0,     0,    81,    77,     5,     0,     0,     0,     0,    72,     0,    64,     0,     0,   119,     0,     0,    52,     8,    14,     1,     8,     0,     0,  1071,     0,    93,     0,     0,     0,     5,     0,    68,     0,     0,     0,     0,    36,     0,     0,     0,     0,     0,     0,     0,    96,     0,   257,    65,     0,     0,    83,     0,     0,     0,     0,     0,     9,   276,    38,     0,   100,     0,     0,     0,   134,     0,     0,     0,     4,     0,     0,     0,     0,     0,     0,     1,     0,     1,   114,   117,   323,     0,     0,    51,     0,   216,    12,    98,     0,     0,     0,    10,     6,    34,     0,    16,    49,     0,     0,     0,     0,    98,     0,     6,     0,     0,    40,     0,     0,     6,    37,     0,     4,     0,     7,     0,     0,     0,     0,    99,   110,     3,     0,     0,   567,     0,     0,     0,     0,    48,     0,     6,     3,     0,   294,    47,     8,     7,     0,   260,    46,    43,     0,   135,   114,    45,    32,     0,     0,    13,     0,   125,     0,    37,     2,     0,     0,     5,    91,     0,   120,     0,     0,    49,     0,     0,   243,     0,     0,     0,     0,     0,     5,     0,   284,   284,    82,     0,     5,     0,     0,    10,    10,     0,     0,     0,     0,   186,   227,     0,     0,     0,    10,     0,    54,   596,     0,    42,     0,   124,     0,     0,    68,   108,     0,   375,     0,     0,     0,     0,     0,     0,    47,     4,   116,   145,   174,     0,   145,     5,  2067,    99,     1,    10,     0,     0,    92,     0,     0,   133,     0,     0,     0,    85,     9,   104,     0,     0,   104,     0,     0,     6,   113,     2,     0,     1,    82,     0,     0,     5,   620,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,    45,   107,     0,    10,     0,     0,     0,     9,     0,     0,   158,    61,     0,     6,    11,     0,    10,     0,     0,     5,     2,     0,   238,     0,     0,    61,     0,    21,   188,    46,   127,   145,     0,     0,     0,     0};

int req_address[REQ_N];

volatile int acc_64k_mau64k(//volatile int *size, volatile int *cmd,
		volatile allocator_port *alloc_1)
{
//#pragma HLS interface ap_hs port=size
//#pragma HLS interface ap_hs port=cmd
#pragma HLS interface ap_hs port=alloc_1

	int i,r;
	int cmd,size;
	for (i=0;;i++)
	{
		cmd = req_cmd[i];
		size = req_list[i];
		if ((cmd) == 2)
		{
			req_address[i]=r=HLS_malloc<1>(size,alloc_1);
		}
		else if ((cmd) == 3)
		{

			r=HLS_free<1>(size,req_size[i],alloc_1);
		}
		else if ((cmd) == 0) break;
	}
	return r;
}



//void acc_OS(int acc_IO[3000],int sel,int offset)
//{

//	static int aa[3000],bb[3000];
	/*    int *base1,*base2;

    int offset = acc_IO[3];
        base1 = (bb+offset);
        base2 = (aa+offset);

    int i;
    acc_OS_label0:for (i=0;i<3000;i++)
    {
    	base1[i]=i+123;
    }
    acc_OS_label1:for (i=0;i<2000;i++)
    {
        acc_IO[i]=base1[i+100];
    }
    acc_OS_label2:for (i=0;i<3000;i++)
    {
    	base2[i]=i+123;
    }
    base2 = (aa+offset+offset);
    acc_OS_label3:for (i=0;i<2000;i++)
    {
        acc_IO[i]+=base2[i+100];
    }
*/
/*
	int *base1;

    if (sel==0)
        base1 = (aa+offset);
    else
        base1 = (bb+offset);

    int i;
    acc_OS_label0:for (i=0;i<2000;i++)
    {
    	base1[i]=i+123;
    }
    acc_OS_label1:for (i=0;i<2000;i++)
    {
        acc_IO[i]=base1[i+100];
    }
}
*/

int main()
{
	int acc_IO[3000]; acc_IO[0]=0;acc_IO[3]=11;
	int alloc_1[100],alloc_2[100],alloc_3[100],alloc_4[100],alloc_5[100];
	//acc_OS(1,2,3,4,5,alloc_1,alloc_2,alloc_3,alloc_4,alloc_5);
	int i;
	for (i=0;i<2000;i+=10) printf("%d ",acc_IO[i]);
	return 0;
}
