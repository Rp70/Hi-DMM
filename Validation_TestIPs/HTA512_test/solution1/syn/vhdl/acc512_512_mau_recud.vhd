-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity acc512_512_mau_recud_rom is 
    generic(
             DWIDTH     : integer := 9; 
             AWIDTH     : integer := 11; 
             MEM_SIZE    : integer := 1280
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of acc512_512_mau_recud_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "000101010", 1 => "001000010", 2 => "000000010", 3 => "000000000", 
    4 => "000100010", 5 => "000001000", 6 => "000000000", 7 => "000000110", 
    8 => "000000000", 9 => "010000100", 10 => "000000110", 11 => "000001000", 
    12 => "010000000", 13 => "000001000", 14 => "000000011", 15 => "000001000", 
    16 => "000100100", 17 => "000000101", 18 => "000001000", 19 => "000011000", 
    20 => "000010001", 21 => "001000000", 22 => "001001000", 23 => "000000001", 
    24 => "001100000", 25 => "000000110", 26 => "000001000", 27 => "000000010", 
    28 => "000010100", 29 => "000001100", 30 => "000000000", 31 => "000001000", 
    32 => "001001000", 33 => "000000100", 34 => "000000010", 35 => "000111000", 
    36 => "011000000", 37 => "000001001", 38 => "010000000", 39 => "000010000", 
    40 => "000100001", 41 => "010000000", 42 => "000000010", 43 => "000100011", 
    44 to 45=> "000010000", 46 => "000110000", 47 => "000001011", 48 => "000001100", 
    49 => "011100000", 50 => "000000010", 51 => "000010100", 52 => "000011010", 
    53 => "000001000", 54 => "000110000", 55 => "000000011", 56 => "001100000", 
    57 => "001010000", 58 => "011100000", 59 => "000000100", 60 => "000010000", 
    61 => "000000101", 62 => "000000011", 63 => "000010000", 64 => "000000101", 
    65 => "000101000", 66 => "000000100", 67 => "001000010", 68 => "001000000", 
    69 => "000001100", 70 => "000011100", 71 => "000000110", 72 to 73=> "000001000", 
    74 => "011000000", 75 => "010000000", 76 => "000001011", 77 => "000011000", 
    78 => "001001000", 79 => "000111000", 80 => "000000011", 81 => "001000000", 
    82 => "000000101", 83 => "000000100", 84 => "000000011", 85 => "000010010", 
    86 => "000000001", 87 => "000010100", 88 => "001100000", 89 => "000000000", 
    90 => "000010000", 91 => "000010011", 92 => "001100000", 93 => "000010000", 
    94 => "000110000", 95 => "000000110", 96 => "000000011", 97 => "000000010", 
    98 => "011100000", 99 => "000000101", 100 => "000010010", 101 => "000010000", 
    102 => "010000000", 103 => "000000100", 104 => "000101000", 105 => "000001100", 
    106 => "001000000", 107 => "000000100", 108 => "000000000", 109 => "000000101", 
    110 => "000010000", 111 => "011100000", 112 => "000000011", 113 => "000001000", 
    114 => "001000000", 115 => "000000001", 116 => "000010010", 117 => "000001100", 
    118 => "000000100", 119 => "000000101", 120 => "000000011", 121 => "011010000", 
    122 => "000100010", 123 => "000000101", 124 => "001000000", 125 to 126=> "000000101", 
    127 => "000001000", 128 => "000000111", 129 => "001010000", 130 => "000001010", 
    131 => "000110000", 132 => "001100000", 133 => "001001000", 134 => "000000010", 
    135 => "000000110", 136 => "000001100", 137 => "000000100", 138 => "100000000", 
    139 => "000010000", 140 => "000000101", 141 => "000010000", 142 => "010000000", 
    143 => "000010011", 144 => "101000000", 145 => "000001011", 146 => "000100000", 
    147 => "000010001", 148 => "000000110", 149 => "101000000", 150 => "010101000", 
    151 => "000000101", 152 => "001110000", 153 => "000000001", 154 => "000000010", 
    155 => "001100000", 156 => "000000101", 157 => "000001000", 158 => "000000110", 
    159 => "000010100", 160 => "000001010", 161 => "110000000", 162 => "000000001", 
    163 => "010000000", 164 => "000110010", 165 => "000000100", 166 => "110000000", 
    167 => "000111000", 168 => "010100000", 169 => "001000000", 170 => "000100000", 
    171 => "000000101", 172 => "000101100", 173 => "000000111", 174 => "000001100", 
    175 => "000000101", 176 => "000010100", 177 => "111100000", 178 => "000010001", 
    179 => "011000000", 180 => "001111000", 181 => "000101000", 182 => "000000010", 
    183 => "100010000", 184 => "000010100", 185 => "100000000", 186 => "000010100", 
    187 => "000010011", 188 => "000000110", 189 => "010110000", 190 => "000000100", 
    191 => "000010000", 192 => "000000101", 193 => "000000100", 194 => "101100000", 
    195 => "000010001", 196 => "000011000", 197 => "001100000", 198 => "000111100", 
    199 => "100011000", 200 to 1279=> "000000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity acc512_512_mau_recud is
    generic (
        DataWidth : INTEGER := 9;
        AddressRange : INTEGER := 1280;
        AddressWidth : INTEGER := 11);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of acc512_512_mau_recud is
    component acc512_512_mau_recud_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    acc512_512_mau_recud_rom_U :  component acc512_512_mau_recud_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


