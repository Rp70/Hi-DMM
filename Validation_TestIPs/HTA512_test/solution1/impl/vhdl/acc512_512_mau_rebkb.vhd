-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity acc512_512_mau_rebkb_rom is 
    generic(
             DWIDTH     : integer := 2; 
             AWIDTH     : integer := 11; 
             MEM_SIZE    : integer := 1280
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of acc512_512_mau_rebkb_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 to 2=> "10", 3 => "11", 4 to 5=> "10", 6 => "11", 7 => "10", 8 => "11", 
    9 to 11=> "10", 12 => "11", 13 to 18=> "10", 19 => "11", 20 to 21=> "10", 22 => "11", 
    23 => "10", 24 => "11", 25 to 29=> "10", 30 => "11", 31 => "10", 32 => "11", 
    33 to 34=> "10", 35 to 36=> "11", 37 => "10", 38 to 39=> "11", 40 => "10", 41 => "11", 
    42 to 43=> "10", 44 => "11", 45 => "10", 46 => "11", 47 to 48=> "10", 49 => "11", 
    50 to 51=> "10", 52 to 54=> "11", 55 => "10", 56 to 58=> "11", 59 => "10", 60 => "11", 
    61 to 62=> "10", 63 => "11", 64 => "10", 65 => "11", 66 => "10", 67 to 70=> "11", 
    71 to 73=> "10", 74 to 75=> "11", 76 => "10", 77 to 79=> "11", 80 to 87=> "10", 88 to 90=> "11", 
    91 => "10", 92 => "11", 93 => "10", 94 => "11", 95 to 97=> "10", 98 => "11", 
    99 to 100=> "10", 101 to 102=> "11", 103 => "10", 104 to 106=> "11", 107 => "10", 108 => "11", 
    109 to 110=> "10", 111 => "11", 112 to 113=> "10", 114 => "11", 115 to 116=> "10", 117 => "11", 
    118 to 120=> "10", 121 => "11", 122 to 123=> "10", 124 => "11", 125 to 128=> "10", 129 => "11", 
    130 => "10", 131 to 133=> "11", 134 to 137=> "10", 138 => "11", 139 to 143=> "10", 144 => "11", 
    145 to 148=> "10", 149 to 150=> "11", 151 => "10", 152 => "11", 153 to 154=> "10", 155 => "11", 
    156 to 158=> "10", 159 => "11", 160 => "10", 161 => "11", 162 to 163=> "10", 164 => "11", 
    165 => "10", 166 to 168=> "11", 169 to 171=> "10", 172 => "11", 173 => "10", 174 => "11", 
    175 to 176=> "10", 177 => "11", 178 => "10", 179 to 181=> "11", 182 => "10", 183 to 185=> "11", 
    186 to 188=> "10", 189 => "11", 190 => "10", 191 => "11", 192 to 193=> "10", 194 => "11", 
    195 => "10", 196 to 199=> "11", 200 to 1279=> "00" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity acc512_512_mau_rebkb is
    generic (
        DataWidth : INTEGER := 2;
        AddressRange : INTEGER := 1280;
        AddressWidth : INTEGER := 11);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of acc512_512_mau_rebkb is
    component acc512_512_mau_rebkb_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    acc512_512_mau_rebkb_rom_U :  component acc512_512_mau_rebkb_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


