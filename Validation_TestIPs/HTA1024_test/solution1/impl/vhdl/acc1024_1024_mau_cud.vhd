-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity acc1024_1024_mau_cud_rom is 
    generic(
             DWIDTH     : integer := 10; 
             AWIDTH     : integer := 11; 
             MEM_SIZE    : integer := 1280
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of acc1024_1024_mau_cud_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0000101010", 1 => "0001000001", 2 => "0000001001", 3 => "0010000000", 
    4 => "0000000000", 5 => "0000100001", 6 to 7=> "0000001001", 8 => "0001010000", 
    9 => "0000000101", 10 => "0001000000", 11 => "0001010000", 12 => "0000100001", 
    13 => "0000000101", 14 => "0000001001", 15 => "0010000001", 16 => "0000000000", 
    17 => "0000000101", 18 => "0001010000", 19 => "0000000010", 20 => "0000000101", 
    21 => "0000100001", 22 => "0010000001", 23 => "0000000011", 24 => "0000010001", 
    25 => "0000010000", 26 => "0011000000", 27 => "0000010001", 28 => "0000000011", 
    29 => "0000000101", 30 => "0010000000", 31 => "0000100001", 32 => "0010000001", 
    33 => "0000000011", 34 => "0010000000", 35 to 36=> "0000000011", 37 => "0000010001", 
    38 => "0000000010", 39 => "0000000101", 40 => "0000000010", 41 => "0000001001", 
    42 => "0000010001", 43 => "0000000010", 44 => "0000010001", 45 => "0001001000", 
    46 => "0000100000", 47 => "0011100000", 48 => "0000010001", 49 => "0000010000", 
    50 => "0000000010", 51 to 52=> "0000000011", 53 => "0011000000", 54 => "0001010000", 
    55 => "0000100001", 56 => "0000000010", 57 => "0100000000", 58 => "0000100001", 
    59 => "0001100000", 60 => "0001011100", 61 => "1000000000", 62 => "0000100001", 
    63 => "0000001001", 64 => "0000000010", 65 => "0010000000", 66 => "0101000000", 
    67 => "0000001001", 68 => "0000100001", 69 to 70=> "0000001001", 71 => "0000100000", 
    72 => "0000010001", 73 => "0001000001", 74 to 75=> "0000010001", 76 => "0000000101", 
    77 => "1000000000", 78 => "0000001001", 79 => "0000000000", 80 => "0000000010", 
    81 => "0111100000", 82 => "0101000000", 83 => "0000001100", 84 => "0000000011", 
    85 => "0000001001", 86 => "0000000000", 87 => "0000000011", 88 => "0000010001", 
    89 => "0000001001", 90 => "0000000011", 91 => "0000010001", 92 => "0000001001", 
    93 => "0000010010", 94 => "0000000010", 95 => "0000001000", 96 => "0000000010", 
    97 => "0000100001", 98 => "0001011000", 99 => "0000001001", 100 => "0011000000", 
    101 => "0001110000", 102 => "0001100000", 103 to 104=> "0000000101", 105 => "0000000010", 
    106 => "0000001001", 107 => "0000010001", 108 => "0000001001", 109 => "0000010001", 
    110 => "0111000000", 111 => "0001110000", 112 => "0101010000", 113 => "0000010010", 
    114 => "0000000011", 115 => "0000000101", 116 => "0000001010", 117 => "0000000010", 
    118 => "0011000000", 119 => "0000000011", 120 => "0000000010", 121 => "0000000101", 
    122 => "0000100001", 123 => "0000000010", 124 => "0000010001", 125 to 126=> "0000001001", 
    127 => "0000000101", 128 => "0110100000", 129 => "0000100001", 130 => "0010010000", 
    131 => "0000010001", 132 => "0000000101", 133 => "0000010001", 134 => "0001000000", 
    135 => "0000000101", 136 => "0001100000", 137 => "0011110000", 138 => "0000000011", 
    139 => "0000000101", 140 => "0000001001", 141 => "1100000000", 142 => "0000000010", 
    143 to 144=> "0000001001", 145 => "0000000100", 146 => "0000000000", 147 => "0000000101", 
    148 => "0000000010", 149 => "0100000000", 150 => "0000000011", 151 => "0000010001", 
    152 => "0011100000", 153 => "0000000101", 154 => "0000000011", 155 => "0000001001", 
    156 => "0001000000", 157 => "0000000011", 158 => "0001000001", 159 => "0100000000", 
    160 => "0000000010", 161 => "0000001001", 162 => "0000010001", 163 => "1011000000", 
    164 => "0000000010", 165 => "1000100000", 166 => "1100100000", 167 => "0000100001", 
    168 => "1110000000", 169 => "0000100001", 170 => "0000000101", 171 => "0000001001", 
    172 => "0010010000", 173 => "1011000000", 174 => "0000100001", 175 => "0000010001", 
    176 => "0000100001", 177 => "0001111000", 178 => "0000000101", 179 to 180=> "0000000010", 
    181 => "0000100001", 182 => "0000000010", 183 => "0000000101", 184 => "0000000011", 
    185 => "0001000000", 186 => "0000000011", 187 => "0001010100", 188 => "0000000011", 
    189 => "1101000000", 190 => "0000000011", 191 => "0000000010", 192 => "0000001001", 
    193 => "0000010001", 194 => "0001101000", 195 => "0000000011", 196 => "0001000100", 
    197 => "0000000011", 198 => "0000010010", 199 => "0100100000", 200 to 1279=> "0000000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity acc1024_1024_mau_cud is
    generic (
        DataWidth : INTEGER := 10;
        AddressRange : INTEGER := 1280;
        AddressWidth : INTEGER := 11);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of acc1024_1024_mau_cud is
    component acc1024_1024_mau_cud_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    acc1024_1024_mau_cud_rom_U :  component acc1024_1024_mau_cud_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


