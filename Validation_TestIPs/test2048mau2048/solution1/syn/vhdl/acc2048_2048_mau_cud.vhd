-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity acc2048_2048_mau_cud_rom is 
    generic(
             DWIDTH     : integer := 11; 
             AWIDTH     : integer := 11; 
             MEM_SIZE    : integer := 1280
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of acc2048_2048_mau_cud_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00000101010", 1 => "00001000001", 2 => "00000100001", 
    3 => "00010000000", 4 => "00000000000", 5 => "00000000011", 
    6 => "00010000001", 7 => "01000000001", 8 => "00100000000", 
    9 => "00001000001", 10 => "00001000000", 11 => "00010000000", 
    12 => "00000000010", 13 => "00000001001", 14 => "00000100001", 
    15 => "00000000100", 16 => "00100000001", 17 => "00000010000", 
    18 => "00001000001", 19 => "00000000101", 20 => "00000001001", 
    21 => "00010000001", 22 => "00000010001", 23 => "01000000000", 
    24 => "00100000000", 25 => "00000000010", 26 => "00000001001", 
    27 => "00000000010", 28 => "10000000000", 29 => "00000100001", 
    30 => "00010000001", 31 => "00000100001", 32 => "00101000000", 
    33 => "00010000001", 34 to 35=> "00000100001", 36 => "00010000001", 
    37 => "00000010001", 38 => "00000000010", 39 => "00100000001", 
    40 => "00000010001", 41 => "00000000011", 42 => "00000000010", 
    43 => "00000000101", 44 => "00100010010", 45 => "00000000010", 
    46 => "00100000000", 47 => "00100010010", 48 => "00000000101", 
    49 => "01000000000", 50 => "00000000010", 51 => "00000000011", 
    52 => "01100000000", 53 => "00000001000", 54 => "00010000001", 
    55 => "00000000011", 56 => "00000100001", 57 => "00001000001", 
    58 => "00111000000", 59 => "00000100001", 60 => "00100010000", 
    61 => "01110000000", 62 => "00000000100", 63 => "01000000000", 
    64 => "00100100000", 65 => "00000001001", 66 => "00000100001", 
    67 => "00000000011", 68 => "00000100001", 69 => "01000000000", 
    70 to 71=> "00000000010", 72 to 73=> "00000010001", 74 => "00010000000", 
    75 => "00000000011", 76 => "00110000000", 77 => "00001000001", 
    78 => "00100000000", 79 => "00000100000", 80 => "01010000000", 
    81 => "00000000011", 82 => "00000100001", 83 => "00000001000", 
    84 => "00000001001", 85 => "00000000011", 86 => "00000010001", 
    87 => "00000001001", 88 => "00000010000", 89 => "00000000010", 
    90 => "00000000110", 91 => "00100001100", 92 to 93=> "00000001001", 
    94 => "00001000000", 95 => "00100011000", 96 => "00000010000", 
    97 => "00001000001", 98 => "00000000101", 99 to 100=> "00000010001", 
    101 => "00000000011", 102 => "11000000000", 103 => "00000010000", 
    104 => "01100000000", 105 => "00101000000", 106 => "00000000011", 
    107 => "00000000010", 108 => "00110000000", 109 => "00001000001", 
    110 => "00000100000", 111 => "00000100001", 112 => "00001000001", 
    113 => "00100000001", 114 => "00000010001", 115 => "00001000001", 
    116 => "00000000010", 117 to 118=> "00000000011", 119 => "00000000010", 
    120 => "00000010001", 121 => "00101000000", 122 => "00000000011", 
    123 => "01000000000", 124 => "00000001001", 125 => "00000100001", 
    126 => "00000000010", 127 => "00000101000", 128 => "00000000101", 
    129 => "00000110000", 130 => "10100000000", 131 => "00000000010", 
    132 => "00000000011", 133 => "00000000101", 134 => "00000100001", 
    135 => "01100000000", 136 => "00000010001", 137 => "00000000011", 
    138 => "00000001100", 139 => "00100010100", 140 => "00000010001", 
    141 => "00000010110", 142 => "00000000011", 143 => "00000010001", 
    144 => "00000011000", 145 => "00000000010", 146 => "00000100001", 
    147 => "00000000100", 148 => "00000001001", 149 to 150=> "00000000010", 
    151 => "00110000000", 152 => "00000010001", 153 => "00110000000", 
    154 => "00000010100", 155 => "00100001000", 156 => "00000010110", 
    157 => "00000001001", 158 => "00000010001", 159 => "00111000000", 
    160 => "00100100000", 161 => "00000000011", 162 => "10110000000", 
    163 => "00000001001", 164 => "00000010001", 165 => "00001000001", 
    166 => "00000011100", 167 => "00000001001", 168 => "00000011000", 
    169 => "00110100000", 170 => "00000000011", 171 => "00000010001", 
    172 => "00000011000", 173 => "00000001001", 174 => "00000101000", 
    175 => "00000001001", 176 => "00000000011", 177 => "00000100000", 
    178 => "00000000011", 179 => "00000010000", 180 => "00000000101", 
    181 => "10101000000", 182 => "00000101000", 183 => "00000000010", 
    184 => "00101100000", 185 => "00000000000", 186 => "10110000000", 
    187 => "00000100001", 188 => "00001100000", 189 to 190=> "00000000010", 
    191 => "00000000101", 192 => "00000010100", 193 => "00000000011", 
    194 => "00000100001", 195 => "01100000000", 196 => "00000101000", 
    197 => "10101000000", 198 => "00000010001", 199 => "00100010000", 
    200 => "00000000010", 201 => "10100000000", 202 => "00000000010", 
    203 => "00010000000", 204 => "00001000001", 205 => "00000100001", 
    206 => "00000000010", 207 => "00000010001", 208 => "00010000100", 
    209 => "00000001001", 210 => "00000000100", 211 to 212=> "00000000010", 
    213 => "00000111000", 214 => "00000000110", 215 => "01101000000", 
    216 => "00000001001", 217 => "00000010001", 218 => "10110000000", 
    219 => "00000001001", 220 => "00000000011", 221 => "00000100000", 
    222 => "00000011000", 223 => "00111000000", 224 => "00000000101", 
    225 => "00000000010", 226 => "00000000011", 227 => "00000110000", 
    228 => "00000001100", 229 => "10100000000", 230 to 231=> "00000000011", 
    232 => "00000011000", 233 => "00000000010", 234 => "00000100001", 
    235 => "00001000001", 236 => "00000110000", 237 => "00000010001", 
    238 => "00000000010", 239 => "00000000011", 240 => "00000000101", 
    241 => "01000000000", 242 => "00000100001", 243 => "00000010001", 
    244 => "01010000000", 245 => "00000010001", 246 => "00000000011", 
    247 => "00011000000", 248 => "00000000010", 249 => "00000100001", 
    250 => "00000000011", 251 => "00000101000", 252 => "00000100001", 
    253 => "00000011010", 254 to 255=> "00000000101", 256 => "00100001010", 
    257 => "00000011100", 258 => "00000001001", 259 => "01100000000", 
    260 => "00000001001", 261 => "10100000000", 262 => "00000100001", 
    263 => "00000000101", 264 => "00000100001", 265 => "00000000011", 
    266 => "00000001001", 267 => "00000000011", 268 => "00000001000", 
    269 => "00000000000", 270 => "00110000000", 271 => "00000001001", 
    272 => "00000000011", 273 => "01100110000", 274 => "00000001001", 
    275 => "00000000010", 276 => "00000000011", 277 => "00000000010", 
    278 => "00000000101", 279 => "00000000011", 280 => "00100100000", 
    281 => "00000000010", 282 => "00000000101", 283 => "00110010000", 
    284 => "00100110000", 285 => "00000000010", 286 => "00000000101", 
    287 => "00000000000", 288 => "00000000101", 289 => "00000001001", 
    290 => "00000100100", 291 => "00000011100", 292 => "00000110100", 
    293 => "10101000000", 294 => "00000000010", 295 => "00000100001", 
    296 => "00000000011", 297 => "00000000010", 298 => "00110000000", 
    299 => "10111000000", 300 to 1279=> "00000000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity acc2048_2048_mau_cud is
    generic (
        DataWidth : INTEGER := 11;
        AddressRange : INTEGER := 1280;
        AddressWidth : INTEGER := 11);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of acc2048_2048_mau_cud is
    component acc2048_2048_mau_cud_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    acc2048_2048_mau_cud_rom_U :  component acc2048_2048_mau_cud_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


