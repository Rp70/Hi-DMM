#include<cstdio>
#include<cstring>
#include<iostream>
#include<ap_int.h>
#include "ap_utils.h"
#define REQ_N 128
static int dynamic_heap0[100],dynamic_heap1[100];

typedef struct{
int size;
int addr;
char cmd;
bool idle;
} allocator_port;

template <int unused>
volatile int HLS_malloc(int size,volatile allocator_port *allocator)
{
#pragma HLS INLINE off

	io_section0:
	{
#pragma HLS PROTOCOL fixed
		ap_wait();
		int status=allocator->idle;// waiting for the allocation available
		ap_wait();
		while (status==0)
		{
			status = (allocator->idle);
			ap_wait();
		}

#pragma HLS PROTOCOL fixed
		allocator->cmd = 2; //send cmd and size to allocator
#pragma HLS PROTOCOL fixed
		allocator->size = size;
		ap_wait();

		status = allocator->addr;
		ap_wait();

		return status;
	}

}

template <int unused>
volatile int HLS_free(int free_target, volatile allocator_port *allocator)
{
#pragma HLS INLINE off

	io_section0:
	{
#pragma HLS PROTOCOL fixed
		ap_wait();
		int status=allocator->idle;// waiting for the allocation available
		ap_wait();
		while (status==0)
		{
			status = (allocator->idle);
			ap_wait();
		}

#pragma HLS PROTOCOL fixed
		allocator->cmd = 3; //send cmd and size to allocator
#pragma HLS PROTOCOL fixed
		allocator->size = free_target;
		ap_wait();


		return status;
	}

}

//                    0  1 2 3 4 5 6 7 8  9 10 11 1213  14  15 16 171819  20  21  22  23  24  252627 28 29 30  31 32 33 34 35 36
int req_list[REQ_N]={    32,    32,     2,     1,     1,     1,     1,     3,     3,    13,    13,    27,    27,     5,   111,   111,    35,    35,     1,     1,   234,   234,   256,   256,   256,   256,     4,    32,   256,  1280,    30,    16,    16,    16,    55,    55,    55,    72,    80,  1536,   192,     3,    13,    17,    64,   127,   704,    96,   704,    17,  1024,  1024,    64,    26,     8,   131,     6,    64,    69,    73,   256,   120,    76,    32,   768,     7,    10,    64,   704,    13,    26,    71,   129,   704,    64,   112,   576,   384,   256,     9,   120,     5,     8,   138,    25,  1024,    10,   272,     6,  1536,    76,   384,    19,    70,   304,    20,   416,    96,   768,  1536};
int req_cmd[REQ_N] ={};
int req_address[REQ_N];

volatile int acc_OS(//volatile int *size, volatile int *cmd,
		volatile allocator_port *alloc_1, volatile allocator_port *alloc_2, volatile allocator_port *alloc_3,
		volatile allocator_port *alloc_4, volatile allocator_port *alloc_5)
{
//#pragma HLS interface ap_hs port=size
//#pragma HLS interface ap_hs port=cmd
#pragma HLS interface ap_hs port=alloc_1
#pragma HLS interface ap_hs port=alloc_2
#pragma HLS interface ap_hs port=alloc_3
#pragma HLS interface ap_hs port=alloc_4
#pragma HLS interface ap_hs port=alloc_5

	int i,r1,r2,r3,r4,r5;
	int cmd,size;
	for (i=0;;i++)
	{
		cmd = req_cmd[i];
		size = req_list[i];
		if ((cmd) == 2)
		{
			req_address[i]=r1=HLS_malloc<1>(size,alloc_1);
			r2=HLS_malloc<2>(size,alloc_2);
			r3=HLS_malloc<3>(size,alloc_3);
			r4=HLS_malloc<4>(size,alloc_4);
			r5=HLS_malloc<5>(size,alloc_5);
		}
		else if ((cmd) == 3)
		{

			r1=HLS_free<1>(size,alloc_1);
			r2=HLS_free<2>(size,alloc_2);
			r3=HLS_free<3>(size,alloc_3);
			r4=HLS_free<4>(size,alloc_4);
			r5=HLS_free<5>(size,alloc_5);
		}
		else if ((cmd) == 0) break;
	}
	return r1+r2+r3+r4+r5;
}



//void acc_OS(int acc_IO[3000],int sel,int offset)
//{

//	static int aa[3000],bb[3000];
	/*    int *base1,*base2;

    int offset = acc_IO[3];
        base1 = (bb+offset);
        base2 = (aa+offset);

    int i;
    acc_OS_label0:for (i=0;i<3000;i++)
    {
    	base1[i]=i+123;
    }
    acc_OS_label1:for (i=0;i<2000;i++)
    {
        acc_IO[i]=base1[i+100];
    }
    acc_OS_label2:for (i=0;i<3000;i++)
    {
    	base2[i]=i+123;
    }
    base2 = (aa+offset+offset);
    acc_OS_label3:for (i=0;i<2000;i++)
    {
        acc_IO[i]+=base2[i+100];
    }
*/
/*
	int *base1;

    if (sel==0)
        base1 = (aa+offset);
    else
        base1 = (bb+offset);

    int i;
    acc_OS_label0:for (i=0;i<2000;i++)
    {
    	base1[i]=i+123;
    }
    acc_OS_label1:for (i=0;i<2000;i++)
    {
        acc_IO[i]=base1[i+100];
    }
}
*/

int main()
{
	int acc_IO[3000]; acc_IO[0]=0;acc_IO[3]=11;
	int alloc_1[100],alloc_2[100],alloc_3[100],alloc_4[100],alloc_5[100];
	//acc_OS(1,2,3,4,5,alloc_1,alloc_2,alloc_3,alloc_4,alloc_5);
	int i;
	for (i=0;i<2000;i+=10) printf("%d ",acc_IO[i]);
	return 0;
}
