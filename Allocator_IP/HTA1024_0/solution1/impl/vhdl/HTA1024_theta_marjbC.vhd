-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity HTA1024_theta_marjbC_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of HTA1024_theta_marjbC_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "11000000001111111100001111001101", 
    1 => "00111111110000000011110000110010", 
    2 => "11000000000000111100000011000101", 
    3 => "00000000001111000000001100001001", 
    4 => "00000011110000000000110000010010", 
    5 => "00111100000000000011000000100010", 
    6 => "11000000000000001100000001000101", 
    7 => "00000000000000110000000010000101", 
    8 => "00000000000011000000000100001001", 
    9 => "00000000001100000000001000001001", 
    10 => "00000000110000000000010000010010", 
    11 => "00000011000000000000100000010010", 
    12 => "00001100000000000001000000100010", 
    13 => "00110000000000000010000000100010", 
    14 => "11000000000000000100000001000101", 
    15 => "00000000000000001000000001000101", 
    16 => "00000000000000010000000010000101", 
    17 => "00000000000000100000000010000101", 
    18 => "00000000000001000000000100001001", 
    19 => "00000000000010000000000100001001", 
    20 => "00000000000100000000001000001001", 
    21 => "00000000001000000000001000001001", 
    22 => "00000000010000000000010000010010", 
    23 => "00000000100000000000010000010010", 
    24 => "00000001000000000000100000010010", 
    25 => "00000010000000000000100000010010", 
    26 => "00000100000000000001000000100010", 
    27 => "00001000000000000001000000100010", 
    28 => "00010000000000000010000000100010", 
    29 => "00100000000000000010000000100010", 
    30 => "01000000000000000100000001000101", 
    31 => "10000000000000000100000001000101", 
    32 to 33=> "00000000000000001000000001000101", 
    34 to 35=> "00000000000000010000000010000101", 
    36 to 37=> "00000000000000100000000010000101", 
    38 to 39=> "00000000000001000000000100001001", 
    40 to 41=> "00000000000010000000000100001001", 
    42 to 43=> "00000000000100000000001000001001", 
    44 to 45=> "00000000001000000000001000001001", 
    46 to 47=> "00000000010000000000010000010010", 
    48 to 49=> "00000000100000000000010000010010", 
    50 to 51=> "00000001000000000000100000010010", 
    52 to 53=> "00000010000000000000100000010010", 
    54 to 55=> "00000100000000000001000000100010", 
    56 to 57=> "00001000000000000001000000100010", 
    58 to 59=> "00010000000000000010000000100010", 
    60 to 61=> "00100000000000000010000000100010", 
    62 => "11000000001111111100001111001101", 
    63 => "00111111110000000011110000110010", 
    64 => "11000000000000111100000011000100", 
    65 => "00000000001111000000001100001000", 
    66 => "00000011110000000000110000010000", 
    67 => "00111100000000000011000000100000", 
    68 => "11000000000000001100000001000000", 
    69 => "00000000000000110000000010000000", 
    70 => "00000000000011000000000100000000", 
    71 => "00000000001100000000001000000000", 
    72 => "00000000110000000000010000000000", 
    73 => "00000011000000000000100000000000", 
    74 => "00001100000000000001000000000000", 
    75 => "00110000000000000010000000000000", 
    76 => "11000000000000000100000000000000", 
    77 => "00000000000000001000000000000000", 
    78 => "00000000000000010000000000000000", 
    79 => "00000000000000100000000000000000", 
    80 => "00000000000001000000000000000000", 
    81 => "00000000000010000000000000000000", 
    82 => "00000000000100000000000000000000", 
    83 => "00000000001000000000000000000000", 
    84 => "00000000010000000000000000000000", 
    85 => "00000000100000000000000000000000", 
    86 => "00000001000000000000000000000000", 
    87 => "00000010000000000000000000000000", 
    88 => "00000100000000000000000000000000", 
    89 => "00001000000000000000000000000000", 
    90 => "00010000000000000000000000000000", 
    91 => "00100000000000000000000000000000", 
    92 => "01000000000000000000000000000000", 
    93 => "10000000000000000000000000000000", 
    94 to 127=> "00000000000000000000000000000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity HTA1024_theta_marjbC is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of HTA1024_theta_marjbC is
    component HTA1024_theta_marjbC_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    HTA1024_theta_marjbC_rom_U :  component HTA1024_theta_marjbC_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


